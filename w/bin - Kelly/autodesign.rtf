{\rtf1\ansi\deff1
{\fonttbl{\f0\fnil Times New Roman;}{\f1\fswiss Arial;}}
{\colortbl;\red0\green0\blue0;\red0\green128\blue0;}
{\stylesheet{\fs16 \snext0 Normal;}
}\pard\plain
\pard \b\fs16\cf1 
\par \trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sa115 \fs28 {\field {\*\fldinst import bm0.BMP}} \cell\pard \pard\intbl\sa115 \pard\intbl\sb235\sa115 \fs48 Autodesign Manual\par\pard \pard\intbl\sa235 \plain\b\fs24 Version 2001 - Release 010407\cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sa235 \plain\fs20 \cell\pard \pard\intbl\sa235 \pard\intbl\sb235\sa235 \uldb \b\fs22 Overview\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sb235\sa235 \plain\fs20 \cell\pard \pard\intbl\sb235\sa235 \uldb \b\fs22 Autodesign Initialization Entry\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sb235\sa235 \pard\intbl\sa235 \plain\fs20 \cell\pard \pard\intbl\sa235 \pard\intbl\sb235\sa235 \uldb \b\fs22 Operation Generation Entry\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sb235\sa235 \pard\intbl\sa235 \plain\fs20 \cell\pard \pard\intbl\sa235 \pard\intbl\sb235\sa235 \uldb \b\fs22 Autodesign Termination Entry\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sb235\sa235 \pard\intbl\sa235 \plain\fs20 \cell\pard \pard\intbl\sa235 \pard\intbl\sb235\sa235 \uldb \b\fs22 UserCust LPLR\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sb235\sa235 \pard\intbl\sa235 \plain\fs20 \cell\pard \pard\intbl\sa235 \pard\intbl\sb235\sa235 \uldb \b\fs22 LOD Structures\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\trowd\trgaph65\trleft-66 \cellx4535\cellx9085\pard\intbl\sb235\sa235 \pard\intbl\sa235 \plain\fs20 \cell\pard \pard\intbl\sa235 \pard\intbl\sb235\sa235 \uldb \b\fs22 Implementation\plain\b\ul\fs22 \plain\b\fs22  \cell\intbl\row
\pard \fs28 \par
\pard\sb115\sa115 Overview
\par \pard\sa235 \plain\fs20 \line
The purpose of Autodesign Customization is to allow an installation to modify the content of the generated dialogs from Autodesign in two ways:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab By inserting code in the VML operations normally generated by Autodesign, the content of the code depending on information in the LOD and UIS specification.
\par \pard\sa235\li275\fi-275\tx275 2.\tab By adding or modifying controls in a normal dialog window generated by Autodesign.
\par \pard\sa235\tx275 \plain\fs20 The solution involves allowing an installation to build special routines to be called at three points during the generation of a dialog by Autodesign. These entry points are:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab At the beginning of the Autodesign process, so that any special work objects can be set up or the UIS Specification modified.
\par \pard\sa235\li275\fi-275\tx275 2.\tab In the middle of the generation of each VML dialog operation, so that particular dialog operations can be altered. This would be right after the variables are defined but before any statements are executed.
\par \pard\sa235\li275\fi-275\tx275 3.\tab At the termination of the Autodesign process so that the dialog, any of its windows or any of the controls within a window can be altered. Additional VML operations can also be added at this entry.
\par \pard\sa235\tx275 \plain\fs20 The customization routines are written in VML as a part of a special User Customization LPLR, named UserCust. This LPLR contains the necessary LODs for customization and is supplied with Zeidon. The customer then extends this LPLR, using normal Zeidon programming functionality.
\par \pard\sa235\tx275 The output of the customization process is a single DLL, TZADUSER.DLL, which contains the customization operations. It must be copied into the Zeidon BIN directory, where the operations it contains will be dynamically called by Autodesign.
\par \pard\sa235\tx275 The three entry points are further described under \uldb \cf2 Autodesign Initialization Entry\plain\fs20\cf2 \plain\fs20 , \uldb \cf2 Operation Generation Entry\plain\fs20\cf2 \plain\fs20  and \uldb \cf2 Autodesign Termination Entry\plain\fs20\cf2 \plain\fs20 . The content of the customization LPLR is discussed under \uldb \cf2 User Cust LPLR\plain\fs20\cf2 \plain\fs20  below.
\par \pard\sa235\tx275 
\par \par
\pard\sb115\sa115 \b\fs28 Autodesign Initialization Entry
\par \pard\sa235 \plain\fs20 \line
This entry is called right after the new Dialog object instance is created but before any Window or Dialog Operation subobjects are created. Views to both the new Dialog and the User Interface Specification (UIS) are passed into this entry. The primary purposes of this entry are to allow the user to modify particular characteristics of the UIS and to set up work data. Particularly, you may want to alter information in the UIS object instance, which would in turn alter the generated Dialog.
\par \pard\sa235 Parameters passed are:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab A view to the User Specification (Dialog Specification), TZADCSDO. This is the object instance created during the User Specification dialog, which contains the information that drives Autodesign.
\par \pard\sa235\li275\fi-275\tx275 2.\tab A view to the Dialog being generated, TZWDLGSO. This is the dialog object instance which will be created during the Autodesign process, along with the VML file.
\par \pard\sa235\tx275 \plain\fs20 The return code from this entry is not checked by Autodesign.
\par \pard\sa235\tx275 The structure of the UIS is defined in the TZADCSDO LOD in the UserCust LPLR. The structure of the Dialog is defined in the TZWDLGSO LOD in the UserCust LPLR. An overview of their content follows below.
\par \pard\sa235\tx275 Note that it is valid to modify the definition TZADCSDO LOD by adding work entities or attributes. You may want to do this to store work data to be used by the later entry points.
\par \pard\sa235\tx275 Sample code, specifying the passed parameters, is contained in the TZADCSDO Object Operation, UserInitializeEntry.
\par \pard\sa235\tx275 
\par \par
\pard\sb115\sa115 \b\fs28 Operation Generation Entry
\par \pard\sa235 \plain\fs20 \line
This entry is called for each generated operation immediately after the variables for that operation are created. It allows variables to be added at the end of the normal variable definition section and then executable statements to be generated at the front of the normal executable statement section. 
\par Note that the executable statements generated in this entry will precede any statements generated normally by autodesign. If it is desired that statements be generated in the middle of normal code or that the normal code be altered in any way, then all of the executable statements must be generated here, with this operation ending with a -1 return code. This signals Autodesign to not generate the executable statements that are normally created.
\par \pard\sa235 Parameters passed are:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab A view to the User Specification (Dialog Specification), TZADCSDO. This is the object instance created during the User Specification dialog, which contains the main information that drives Autodesign. Additional information used by Autodesign comes from the LOD object, also passed as a parameter to this entry. When this entry gets control, the cursor is positioned on the UIS_Entity entity that is driving the generation of the current window, and thereby the event operation for which this entry is called. This cursor position may be on a UIS_Entity that is within a recursive structure. This is explained under LOD structures below.
\par \pard\sa235\li275\fi-275\tx275 2.\tab A string that contains the name of the operation being generated.
\par \pard\sa235\li275\fi-275\tx275 3.\tab A very large string that contains all the VML code generated so far during Autodesign for the current dialog. Any customization variables or statements are concatenated to this string.
\par \pard\sa235\li275\fi-275\tx275 4.\tab A view to the LOD, TZZOLODO, which contains additional information used by Autodesign. This LOD was initially used to the creation of the User Specification above. When this entry gets control, the cursor is positioned on the LOD_Entity entity, associated with the UIS_entity from the first parameter above. The TZZOLODO LOD contains both a flat structure and a recursive structure for presenting entity information. Only the flat structure is used in this entry.
\par \pard\sa235\tx275 \plain\fs20 Return codes are:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab A 0 return code indicates that normal executable VML statements are to be generated by Autodesign.
\par \pard\sa235\li275\fi-275\tx275 2.\tab A \'961 return code indicates that normal executable VML statements are NOT to be generated by Autodesign.
\par \pard\sa235\tx275 \plain\fs20 Sample code, specifying the passed parameters, is contained in the TZADCSDO Object Operation, UserPostVariableEntry
\par \pard\sa235\tx275 The user customization algorithms will use information in the User Specification and LOD objects to generate variables and executable statements. The TZADCSDO operations delivered as a part of the UserCust LPLR show some samples of how this is done. Note that the sample code names the views being passed into the operation and then pauses execution with a MessageSend. It is recommended that you compile the sample and run it, studying the information contained in the two objects. You should then experiment with using that information to modify the generated VML.
\par \pard\sa235\tx275 
\par \par
\pard\sb115\sa115 \b\fs28 Autodesign Termination Entry
\par \pard\sa235 \plain\fs20 \line
This entry is called at termination of the Autdesign process, right after the new Dialog object instance has been successfully generated. Views to both this finished Dialog and the User Interface Specification (UIS) that was used to generate it are passed into this entry. The primary purpose of this entry is to allow the user to modify characteristics of the Dialog just generated.
\par Parameters passed are:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab A view to the User Specification (Dialog Specification), TZADCSDO. This is the object instance created during the User Specification dialog, which contains the information that defined the characteristics of the Dialog just generated.
\par \pard\sa235\li275\fi-275\tx275 2.\tab A view to the Dialog just generated, TZWDLGSO. This is the dialog object instance which was just created from the Autodesign process.
\par \pard\sa235\li275\fi-275\tx275 3.\tab A very large string that contains all the VML code generated so far during Autodesign for the current dialog. Any additional operations can be added at this point. These are usually reusable operations that are called from VML statements generated within UserPostVariableEntry described above.
\par \pard\sa235\tx275 \plain\fs20 The return code from this entry is not checked by Autodesign.
\par \pard\sa235\tx275 The structure of the UIS is defined in the TZADCSDO LOD in the UserCust LPLR. The structure of the Dialog is defined in the TZWDLGSO LOD in the UserCust LPLR. An overview of their content follows below.
\par \pard\sa235\tx275 Sample code, specifying the passed parameters, is contained in the TZADCSDO Object Operation, UserTerminationEntry
\par \par
\pard\sb115\sa115 \b\fs28 UserCust LPLR
\par \pard\sa235 \plain\fs20 \line
The customization routines are written in VML as a part of a special User Customization LPLR, named UserCust. This LPLR contains the three LODs necessary for customization. The customer then extends this LPLR, using normal Zeidon programming functionality.
\par The UserCust LPLR contains:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab All the Zeidon domains used in the Zeidon data model
\par \pard\sa235\li275\fi-275\tx275 2.\tab The Zeidon data model
\par \pard\sa235\li275\fi-275\tx275 3.\tab The TZZOLODO LOD
\par \pard\sa235\li275\fi-275\tx275 4.\tab The TZWDLGSO LOD
\par \pard\sa235\li275\fi-275\tx275 5.\tab The TZADCSDO LOD and customization VML operations
\par \pard\sa235\tx275 \plain\fs20 To add Autodesign customization routines, you extend the TZADCSDO object as necessary and modify the VML operations code. Note that the operation names or parameters cannot be modified as they are used in Autodesign to call the customization routines.
\par \pard\sa235\tx275 
\par \par
\pard\sb115\sa115 \b\fs28 LOD Structures
\par \pard\sa235 \plain\fs20 \line
The three LODs used by Autodesign, TZADCSDO, TZZOLODO and TZWDLGSO are complex structures. To understand them fully is probably beyond the scope of someone involved in the customization process, but it is also unnecessary. This section tries to provide a general overview of the three LODs. However, the best way to gain further understanding is to run the TZADUSER.DLL, containing the sample code in the UserCust LPLR, while autodesigning sample dialogs. The code contains MessageSend operations which will pause execution at the various entry points and allow you to study information in the three objects using the Object Browser.
\par \pard\sa235 
\par \par
\pard\sb115\sa115 \b\fs28\cf1 TZADCSDO Object
\par \pard\sa235 \plain\fs20 This is the User Specification created by the User Specification dialog and is the main object driving the Autodesign process. It has a recursive structure that matches the structure of the TZZOLODO object from which it was created. Most of the information you care about is in the subobject starting with the UIS_Entity entity. One instance of a UIS_Entity exists for each LOD_Entity in the TZZOLODO object. The UIS_Entity / UIS_ChildEntity entity pair define the recursive part of the structure. This matches the LOD_EntityParent / LOD_EntityChild pair in the TZZOLODO object, which defines its recursive structure.
\par \pard\sa235 In addition, each LOD_Entity in the TZZOLODO object has its information duplicated in the entities LOD_Entity and ER_Entity in the TZADCSDO object. Thus every entity in the LOD which generates a User Specification causes the creation of the tripilet, UIS_Entity / LOD_Entity / ER_Entity.
\par An example will probably help to understand this structure. Assume you  have an original LOD with root A and two entities subordinate to A which are B and C. The TZADCSDO object that will be created will have an initial triplet, UIS_Entity / LOD_Entity / ER_Entity, for root A. At the next recursive level, through the recursive entity UIS_ChildEntity, there will be two additional triplets for B and C.
\par \pard\sa235 The attributes and domains used during Autodesign are defined within five different subobjects under the UIS_Entity. They are defined as follows:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab M_LOD_Attribute - You get one M_LOD_Attribute entity instance for each attribute autodesigned into a maintenance/display window without Tab controls. If your maintenance/display window is defined with Tabs, the attributes are defined under the UIS_Tab structure. (ex., just about all Autodesign Cases except 1F or 1G)
\par \pard\sa235\li275\fi-275\tx275 2.\tab L_LOD_Attribute \'96 You get one L_LOD_Attribute entity instance for each attribute autodesigned into a listbox control for subentities with cardinality greater than one. This listbox control may be the main list for the dialog or it may be lists for subordinate windows in the dialog. (ex., Autodesign Cases 1A, 1B, 1C or 4)
\par \pard\sa235\li275\fi-275\tx275 3.\tab UIS_Include \'96 You get one UIS_Include entity for each includable subentity, regardless if that entity is included through a subwindow or a combo box. (ex., Autodesign Cases 2 or 6)
\par \pard\sa235\li275\fi-275\tx275 4.\tab I_LOD_Attribute \'96 You get one I_LOD_Attribute entity for each attribute that is a part of a listbox on a subordinate window for an includable entity. (ex., Autodesign Cases 2 or 6)
\par \pard\sa235\li275\fi-275\tx275 5.\tab UIS_Tab \'96 You get one UIS_Tab entity for the tabs defined in Autodesign Cases 1F or 1G.
\par \pard\sa235\tx275 \plain\fs20 
\par \par
\pard\sb115\sa115 \b\fs28\cf1 TZZOLODO Object
\par \pard\sa235 \plain\fs20 This is the LOD that is the original source of the User Specification. It has a recursive structure starting with the entity LOD_EntityParent. However, this structure is not used during the Autodesign process. Instead, the flat structure starting with the entity, LOD_Entity is used. Thus, when a UserPostVariableEntry operation is called, the cursor is positioned on the LOD_Entity corresponding to the UIS_Entity in the TZADCSDO object.
\par There is not much information in the TZZOLODO object that is of interest in customization, as most of the information of interest is duplicated in the TZADCSDO object. It is, however, passed to the UserPostVariableEntry because the object name from the LOD is the easiest source of the object name and the LOD contains other information that may be of value in the generation process.
\par \pard\sa235 
\par \par
\pard\sb115\sa115 \b\fs28\cf1 TZWDLGSO Object
\par \pard\sa235 \plain\fs20 This is the generated dialog object that is maintained by the Dialog Painter and which generates the XWD, which defines the dialog characteristics during runtime. The main subobject within the Dialog starts with the Window entity. An instance of this entity exists for every window generated as a part of the Dialog. In turn, it has the following important subobjects within it. Note that it contains other subobjects as well, but these are not likely to be important in modifying the Dialog.
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab The Control subobject, which exists for each control painted on a window, including Tabs, Edit Boxes, List Boxes and Buttons. This is a recursive subobject and because of its importance and complexity, it is described further below.
\par \pard\sa235\li275\fi-275\tx275 2.\tab The WndEvent subobject, which contains the Events and Actions tied to the window itself.
\par \pard\sa235\li275\fi-275\tx275 3.\tab The Action subobject, which exists for each Action created for the window. Note that the Action entity itself is also included under other subobjects under the Events that trigger the Action.
\par \pard\sa235\li275\fi-275\tx275 4.\tab The Menu subobject, with its Option subobject below it. These define window and popup menus and their options. The Option / OptOpt entity pairs create a recursive structure that support the logical tree structure of options and suboptions.
\par \pard\sa235\tx275 \plain\fs20 Besides the Window subobject, the Dialog has three other subobjects that might be important in the customizing process.
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab The DfltWnd subobject, which is an inclusion of the default Window for the Dialog.
\par \pard\sa235\li275\fi-275\tx275 2.\tab The ViewObjRef subobject, which contains all the registered views for the Dialog. At the termination of Autodesign, it will include the view of every object that is used in some form of mapping within the Dialog.
\par \pard\sa235\li275\fi-275\tx275 3.\tab The SourceFile subobject, which contains all the Operations and their Parameters that have been generated in the Dialog.
\par \pard\sa235\tx275 \plain\fs20 The subobject structure most likely to be analyzed or modified is the Control subobject. It has the following subobjects that are likely to be used in customization.
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab The Control / CtrlCtrl entity pair is the recursive relationship that allows controls to have subcontrols.
\par \pard\sa235\li275\fi-275\tx275 2.\tab The CtrlMap subobject defines the Entity/Attribute mapping for the control.
\par \pard\sa235\li275\fi-275\tx275 3.\tab The Event subobject defines the Events and Actions that are triggered by a control.
\par \pard\sa235\li275\fi-275\tx275 4.\tab The ControlDef subobject defines what type the control is.
\par \pard\sa235\tx275 \plain\fs20 You can navigate the Control subobjects recursively to search for control combinations that you want to modify. For example, if you wanted to find all edit boxes for Date domains, you would navigate down the Control / CtrlCtrl recursive chain, searching for controls with ControlDef.Tag values of "EditBox" and with CtrlMapER_Domain.Name values of "Date". The best way to understand the Control subobject structure is to use the Zeidon Object Browser to analyze existing Dialogs.
\par \pard\sa235\tx275 
\par \par
\pard\sb115\sa115 \b\fs28 Implementation
\par \pard\sa235 \plain\fs20 \line
Implementation includes the following three steps:
\par \pard\sa235\li275\fi-275\tx275 \cf1 1.\tab Add the UserCust LPLR to your system as an "external LPLR".
\par \pard\sa235\li275\fi-275\tx275 2.\tab Modify the Compiler Specification to correlate with your installation.
\par \pard\sa235\li275\fi-275\tx275 3.\tab Modify the TZADCSDO operations as desired.
\par \pard\sa235\li275\fi-275\tx275 4.\tab Parse, compile and link the VML to create executable TZADUSER.DLL.
\par \pard\sa235\li275\fi-275\tx275 5.\tab Copy the TZADUSER.DLL module into your Zeidon BIN directory.
\par \pard\sa235\tx275 \plain\fs20 Autodesign will look for the TZADUSER.DLL module during the autodesign process and will call each entry as necessary.
\par \pard\sa235\tx275 
\par \par
\pard\sa45\li115\ri125 \b\fs14  \{ewl RoboEx32.dll, WinHelp2000, \}\plain\fs16 
\par }