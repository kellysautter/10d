/*************************************************************************************************
**
**    OPERATION: INITIALIZE_NextZKeyForObject
**
*************************************************************************************************/
DIALOG OPERATION
INITIALIZE_NextZKeyForObject( VIEW vMetaOI,
                              STRING ( 32 )  szRootEntityName )

   VIEW vHierMetaOI
   STRING ( 32 )  szCurrentEntityName
   STRING ( 500 ) szMsg
   STRING ( 50 )  szDateTimeStamp
   STRING ( 20 )  szGeneratedKey
   INTEGER        lZKey
   INTEGER        lMaxZKey
   INTEGER        lGeneratedKey
   SHORT          nHierRC
   SHORT          nReturnLevel

   SysGetDateTime( szDateTimeStamp )
   TraceLineS( "*** szDateTimeStamp: ", szDateTimeStamp )

   // Initialize the NextZKeyToAssign value in the object, which is done in two different ways.
   // 1. If the current entity being created in CreateMetaEntity is the root entity, then we will use the
   //    date/time stamp as a random number generator.
   // 2. Otherwise, we will set NextZKeyToAssign to one more than the highest ZKey in the object.

   IF szRootEntityName != szCurrentEntityName

      // Initialize the Next ZKey to Assign value for the meta object to one more than the highest ZKey
      // Value in the object.
      // Process each entity hierarchically, looking for highest ZKey value.
      CreateViewFromView( vHierMetaOI, vMetaOI )
      DefineHierarchicalCursor( vHierMetaOI, szRootEntityName )
      szCurrentEntityName = szRootEntityName

      GetIntegerFromAttribute( lMaxZKey, vHierMetaOI, szCurrentEntityName, "ZKey" )
      nHierRC = zCURSOR_SET
      LOOP WHILE nHierRC >= zCURSOR_SET
         nHierRC = SetCursorNextEntityHierarchical( nReturnLevel,
                                                    szCurrentEntityName,
                                                    vHierMetaOI )
         IF nHierRC >= zCURSOR_SET

            // Check ZKey in current entity against current Max ZKey.
            GetIntegerFromAttribute( lZKey, vHierMetaOI, szCurrentEntityName, "ZKey" )
            IF lZKey > lMaxZKey
               lMaxZKey =lZKey
   END

            // For recursive subentity, step down a level.
            IF nHierRC = zCURSOR_SET_RECURSIVECHILD
               SetViewToSubobject( vHierMetaOI, szCurrentEntityName )
END

   END
END
      lMaxZKey = lMaxZKey + 1

      DropView( vHierMetaOI )
      ELSE
      // This is the Root of the object, so we will use the date/time stamp as a random number generator
      // for generating the ZKey of the root entity and set the NextZKeyToAssign to 1000.
      // DateTimeStamp is of form YYYYMMDDHHMMSSTTT.
      // We will use 9 middle digits, DDHHMMSST, forming DDH,HMM,SST, which would generate a key up to 312,459,599.
      SysGetDateTime( szDateTimeStamp )
      szGeneratedKey = szDateTimeStamp[6:9]
      lGeneratedKey = zStringToInteger( szGeneratedKey )
      SetAttributeFromInteger( vMetaOI, szRootEntityName, "ZKey", lGeneratedKey )
      lMaxZKey = 1000
      END

   // Set the NextZKeyToAssign attribute
   SetAttributeFromInteger( vMetaOI, szRootEntityName, "NextZKeyToAssign", lMaxZKey )
   szMsg = "*** Root Attribute " + szRootEntityName + ": "
   TraceLineI( szMsg, lMaxZKey )

   END

/************************************************************************************************
**
**    OPERATION: INITIALIZE_UserStartingGenZKey
**
*************************************************************************************************/
DIALOG OPERATION
INITIALIZE_UserStartingGenZKey( VIEW ViewToWindow )

   VIEW TZCMLPLO REGISTERED AS TZCMLPLO
   VIEW TZCMWKSO REGISTERED AS TZCMWKSO
   VIEW vMetaOI
   VIEW vHierMetaOI
   STRING ( 255 ) szFullFileName
   STRING ( 10 )  szSuffix
   STRING ( 32 )  szMetaType
   STRING ( 32 )  szRootEntityName
   STRING ( 32 )  szEntityName
   STRING ( 500 ) szMsg
   INTEGER        hFile
   INTEGER        lZKey
   INTEGER        lMaxZKey
   SHORT          nRC

   // Initialize the Next ZKey to Assign value for each meta object to one more than the highest ZKey
   // Value in the object.
   FOR EACH TZCMLPLO.W_MetaType
      szSuffix = ""
      IF TZCMLPLO.W_MetaType.Type = 2000
         szSuffix         = "HDR"
         szMetaType       = "TZOPHDRO"
         szRootEntityName = "HeaderFile"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2004
         szSuffix         = "PMD"
         szMetaType       = "TZEREMDO"
         szRootEntityName = "EntpER_Model"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2005
         szSuffix         = "PSA"
         szMetaType       = "TZERSASO"
         szRootEntityName = "SubjectArea"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2006
         szSuffix         = "DTE"
         szMetaType       = "TZTENVRO"
         szRootEntityName = "TE_DB_Environ"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2007
            szSuffix   = "LOD"
            szMetaType = "TZZOLODO"
         szRootEntityName = "LOD"
         ELSE
      IF TZCMLPLO.W_MetaType.Type = 2009
         szSuffix         = "PVR"
         szMetaType       = "TZWDVORO"
         szRootEntityName = "ViewObjRef"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2010
         szSuffix         = "PPE"
         szMetaType       = "TZPESRCO"
         szRootEntityName = "PresEnvDef"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2011
            szSuffix   = "PWD"
            szMetaType = "TZWDLGSO"
         szRootEntityName = "Dialog"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2013
         szSuffix         = "PDG"
         szMetaType       = "TZDGSRCO"
         szRootEntityName = "DomainGroup"
      ELSE
      IF TZCMLPLO.W_MetaType.Type = 2014
         szSuffix         = "POG"
         szMetaType       = "TZOGSRCO"
         szRootEntityName = "GlobalOperationGroup"
         END
      END
      END
      END
      END
      END
      END
      END
      END
      END

      IF szSuffix != ""

         // Process each meta within the type.
         FOR EACH TZCMLPLO.W_MetaDef
            szFullFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.W_MetaDef.Name + "." + szSuffix
            hFile = SysOpenFile( TZCMLPLO, szFullFileName, COREFILE_READ )
            IF hFile >= 0
               SysCloseFile( TZCMLPLO, hFile, 0 )
               nRC = ActivateOI_FromFile ( vMetaOI, szMetaType, ViewToWindow, szFullFileName, 8192 ) // 8192 is zIGNORE_ATTRIB_ERRORS
               IF nRC >= 0
                  NAME VIEW vMetaOI "MetaAnalyze"

                  // We have now loaded the meta into memory, so execute INITIALIZE_NextZKeyForObject to initialize the ZKey.
                  INITIALIZE_NextZKeyForObject( vMetaOI, szRootEntityName )

                  DropObjectInstance( vMetaOI )
               END
            END
         END
      END
   END

   END
/*************************************************************************************************
**
**    OPERATION: CANCEL_NewLPLR
**
*************************************************************************************************/
DIALOG OPERATION
CANCEL_NewLPLR( VIEW ViewToWindow )

   VIEW TZCMLPLO REGISTERED AS TZCMLPLO

   DropObjectInstance( TZCMLPLO )

END

/*************************************************************************************************
**
**    OPERATION: CREATE_NewLPLR
**
*************************************************************************************************/
DIALOG OPERATION
CREATE_NewLPLR( VIEW ViewToWindow )

   VIEW TZCMWKSO    REGISTERED AS TZCMWKSO
   VIEW TZCMLPLO    REGISTERED AS TZCMLPLO
   VIEW KZAPPLOO    BASED ON LOD  KZAPPLOO
   VIEW TZCMLPLONew BASED ON LOD  TZCMLPLO
   VIEW TZEREMDO    BASED ON LOD  TZEREMDO
   VIEW TZTENVRO    BASED ON LOD  TZTENVRO
   STRING ( 513 ) szMsg
   STRING ( 513 ) szTmp
   STRING ( 513 ) szFileName
   STRING ( 513 ) szFromFileName
   STRING ( 513 ) szExeDir
   STRING ( 513 ) szTempDir
   STRING ( 513 ) szLPLRName
   STRING ( 513 ) szOrigLPLRName
   STRING ( 513 ) szJavaPackageName
   SHORT nRC
   INTEGER lHighZKey
   INTEGER lHighPrefix
   INTEGER nLth
   INTEGER lHandle

   // KJS 05/18/15 - For right now I am not using this because we were running into errors with
   // the xlp, hky file not being created and zeidon.app not updated. I modified nzwTZCMLPLD_CreateNewLPLR to
   // create the tzcmulwo entries.

   // If the request is to create a new, empty LPLR, use the data entered to create a new one.
   // If the request is to create a new entry for an existing, external LPLR, then update the existing LPLR.
   szLPLRName = TZCMLPLO.LPLR.Name
   zSearchAndReplace( szLPLRName, 513, " ", "_" )

   // Get the max zkey in tzcmwkso? This is code from zwTZCMLPLD_PrebuildNewLPLR, not sure where that was called before...
   // And I'm not seeing that the LPLR.ZKey in xlp is the same as the LPLR.Zkey in tzcmwkso.por. Is this a problem?
   lHighZKey = 0
   FOR EACH TZCMWKSO.LPLR
      IF TZCMWKSO.LPLR.ZKey > lHighZKey
         lHighZKey = TZCMWKSO.LPLR.ZKey
      END
   END
   lHighZKey = lHighZKey + 1

   // Make sure there is a correct APPLICATION entry for the new LPLR in the ZEIDON.APP object and save it.
   SysGetEnvVar( szFileName, "ZEIDON", 128 )
   szFileName = szFileName + "\ZEIDON.APP"

   GET VIEW KZAPPLOO NAMED "KZAPPLOO"
   IF RESULT < 0
      nRC = ActivateOI_FromFile ( KZAPPLOO, "KZAPPLOO", ViewToWindow, szFileName, 512 )
      IF nRC < 0
         MessageSend( ViewToWindow, "", "Configuration Management",
                      "An error occurred when reading the ZEIDON.APP file.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
         DropView( KZAPPLOO )
         RETURN -1
      ELSE
         NAME VIEW KZAPPLOO "KZAPPLOO"
      END
   END

   // KJS 09/12/17 - Thinking I still want to do this even if it's not new... because if I have a different directory to move to...??
   //IF TZCMLPLO.LPLR.LPLR_Type = "2"    // "2" is new empty
      // LPLR is new empty.
      // Create the following.
      // 1. Build Installation/Users object (TZCMULWO). It will be completed on next window.
      // 2. TZCMLPLO and TZCMWKSO will be updated on next window.

      // Is this right?????
      TZCMLPLO.LPLR.ZKey = lHighZKey

      // KJS 06/05/15 - If the user puts in a directory for the meta source that doesn't
      // exist, do we want to create one for them?
      szFileName = TZCMLPLO.LPLR.MetaSrcDir
      IF SysValidDirOrFile( szFileName, TRUE, TRUE, 512) < 0
         RETURN -1
      END

   //END


   // We have to create the subdirectory one directory at a time.
   szExeDir = TZCMLPLO.LPLR.wExecutableSubDirectory
   TZCMLPLO.LPLR.ExecDir = TZCMLPLO.LPLR.MetaSrcDir + "\" + szExeDir
   nRC = zSearchSubString( szExeDir, "\"  , "f", 0 )
   LOOP WHILE nRC > 0 
      ZeidonStringCopy( szTempDir, 1, 0, szExeDir, 1, nRC, 513 )
      szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + szTempDir
      IF SysValidDirOrFile( szFileName, TRUE, TRUE, 512) < 0
         szMsg = "An error occured trying to create the executable directory " + szFileName
         MessageSend( ViewToWindow, "", "Configuration Management",
                      szMsg,
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
         RETURN -1
      END
      nRC = zSearchSubString( szExeDir, "\"  , "f", nRC + 1)
   END
   
   // Set the executable directory. Create it if it doesn't exist and also copy the zeidon.hky if it doesn't exist.
   szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.LPLR.wExecutableSubDirectory
   SysValidDirOrFile( szFileName, TRUE, TRUE, 512)
   
   // If the user has changed the lplr name, then we will copy over the original lplr to the new directory.
   IF TZCMLPLO.LPLR.wOrigLPLRName != "" AND TZCMLPLO.LPLR.Name != TZCMLPLO.LPLR.wOrigLPLRName 
   
      // This was for testing purposes but at the moment, it looked like the
      // zSearchSubString is case sensitive and I don't want it to be.
      szFileName = TZCMLPLO.LPLR.JavaPackageName 
      szOrigLPLRName = TZCMLPLO.LPLR.wOrigLPLRName
      nRC = zSearchSubString( szFileName, szOrigLPLRName, "f", 0 )
      zSearchAndReplace( szFileName, 513, szOrigLPLRName, szLPLRName )
      TZCMLPLO.LPLR.JavaPackageName = szFileName
            
      szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\*.*"

      lHandle = FindFileStart( szFromFileName, szMsg )
      nRC = 1
      LOOP WHILE lHandle >= 0 AND nRC > 0
      
         //szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + szMsg
         nRC = zSearchSubString( szMsg, ".", "f", 0 )
         IF nRC != 0 
         
         // I think we care about DTE, PMD, LLP (don't copy)
         szTempDir = TZCMLPLO.LPLR.wOrigLPLRName + ".DTE"
         nRC = zSearchSubString( szMsg, szTempDir, "f", 0 )
         IF nRC >= 0
            szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.LPLR.Name + ".DTE"

            szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\" + szMsg   
            nRC = SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
            nRC = ActivateOI_FromFile ( TZTENVRO, "TZTENVRO", ViewToWindow, szFileName, 512 )
            TZTENVRO.TE_DB_Environ.Name = TZCMLPLO.LPLR.Name
            nRC = CommitOI_ToFile( TZTENVRO, szFileName, zASCII )
         ELSE 
         szTempDir = TZCMLPLO.LPLR.wOrigLPLRName + ".PMD"
         nRC = zSearchSubString( szMsg, szTempDir, "f", 0 )
         IF nRC >= 0
            szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.LPLR.Name + ".PMD"
            szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\" + szMsg   
            nRC = SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
            nRC = ActivateOI_FromFile ( TZEREMDO, "TZEREMDO", ViewToWindow, szFileName, 512 ) 
            TZEREMDO.EntpER_Model.Name = TZCMLPLO.LPLR.Name
            //CommitMetaOI( ViewToWindow, TZEREMDO, zSOURCE_ERD_META )
            nRC = CommitOI_ToFile( TZEREMDO, szFileName, zASCII )
         ELSE 
         szTempDir = TZCMLPLO.LPLR.wOrigLPLRName + ".LLP"
         nRC = zSearchSubString( szMsg, szTempDir, "f", 0 )
         // Don't copy if this is the llp.
         IF nRC < 0
            szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + szMsg
            szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\" + szMsg
            nRC = SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
         END
         END
         END

         END // Check if file name starts with "."

         nRC = FindFileNext( lHandle, szMsg )
      END 

      szFromFileName = TZCMLPLO.LPLR.wOrigExecSrc + "\*.*"

      // Now Copy files from executable directory.
      lHandle = FindFileStart( szFromFileName, szMsg )
      nRC = 1
      LOOP WHILE lHandle >= 0 AND nRC > 0

         szFileName = TZCMLPLO.LPLR.ExecDir + "\" + szMsg
         //szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\" + szMsg
         szFromFileName = TZCMLPLO.LPLR.wOrigExecSrc + "\" + szMsg

         nRC = SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
         nRC = FindFileNext( lHandle, szMsg )
      END 

      // Copy files from the JavaProject... java directory if it exists.
      IF TZCMLPLO.LPLR.JavaPackageName != ""
      
         szJavaPackageName = TZCMLPLO.LPLR.JavaPackageName 
         nRC = zSearchSubString( szJavaPackageName, "."  , "f", 0 )
         IF nRC >= 0
            zSearchAndReplace( szJavaPackageName, 513, ".", "\" )
         END
         // At the moment we are going to assume that if you have a JavaPackageName that
         // you will have a \javaProject\src\main" + javaPackageName directory to store your 
         // java code.
         szTmp = "JavaProject\src\main\java\" + szJavaPackageName + "\"
         nRC = zSearchSubString( szTmp, "\"  , "f", 0 )
         LOOP WHILE nRC > 0 
            ZeidonStringCopy( szTempDir, 1, 0, szTmp, 1, nRC, 513 )
            szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + szTempDir
            IF SysValidDirOrFile( szFileName, TRUE, TRUE, 512) < 0
               szMsg = "An error occured trying to create the java project directory " + szFileName
               MessageSend( ViewToWindow, "", "Configuration Management",
                            szMsg,
                            zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
               RETURN -1
            END
            nRC = zSearchSubString( szTmp, "\"  , "f", nRC + 1)
         END
         
         szTmp = TZCMLPLO.LPLR.wOrigJavaPackage  
         IF zSearchSubString( szTmp, "."  , "f", 0 ) >= 0
            zSearchAndReplace( szTmp, 513, ".", "\" )
         END
         
         TZCMLPLO.LPLR.wOrigJavaPackage = szTmp
         
         // Copy java files
         szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\JavaProject\src\main\java\" + szTmp 
         szTempDir = TZCMLPLO.LPLR.MetaSrcDir + "\JavaProject\src\main\java\" + szJavaPackageName
         szJavaPackageName = szTempDir
         szTempDir = szFromFileName + "\*.*"
   
         // Now Copy files from JavaProject... java directory.
         lHandle = FindFileStart( szTempDir, szTmp )
         nRC = 1
         LOOP WHILE lHandle >= 0 AND nRC > 0
   
            szFileName = szJavaPackageName + "\" + szTmp
            szTempDir = szFromFileName + "\" + szTmp
   
            nRC = SysCopyFile( ViewToWindow, szTempDir, szFileName, TRUE )
            nRC = FindFileNext( lHandle, szTmp )
         END 
         
         // Look for a JavaProject...\domains directory. If one exists, then copy the files.
         //szFromFileName = szFromFileName + TZCMLPLO.LPLR.wOrigJavaPackage + "\domains" 
         //kkkkkk
         szFromFileName = szFromFileName + "\domains" 
         szTempDir = szJavaPackageName + "\domains"
         szJavaPackageName = szTempDir
         szTempDir = szFromFileName + "\*.*"
   
         // Now Copy files JavaProject \domain.
         lHandle = FindFileStart( szTempDir, szTmp )
         IF lHandle >= 0 
            // Create domains directory in imported lplr
            SysValidDirOrFile( szJavaPackageName, TRUE, TRUE, 512)
         END
         nRC = 1
         LOOP WHILE lHandle >= 0 AND nRC > 0
   
            szFileName = szJavaPackageName + "\" + szTmp
            szTempDir = szFromFileName + "\" + szTmp
   
            nRC = SysCopyFile( ViewToWindow, szTempDir, szFileName, TRUE )
            nRC = FindFileNext( lHandle, szTmp )
         END 
         
         // Now copy pom.xml if it exists
         szFromFileName = TZCMLPLO.LPLR.wOrigMetaSrc + "\JavaProject" 
         szTempDir = TZCMLPLO.LPLR.MetaSrcDir + "\JavaProject"
         szJavaPackageName = szTempDir
         szTempDir = szFromFileName + "\*.*"
   
         lHandle = FindFileStart( szTempDir, szTmp )
         nRC = 1
         LOOP WHILE lHandle >= 0 AND nRC > 0
   
            szFileName = szJavaPackageName + "\" + szTmp
            szTempDir = szFromFileName + "\" + szTmp
   
            nRC = SysCopyFile( ViewToWindow, szTempDir, szFileName, TRUE )
            nRC = FindFileNext( lHandle, szTmp )
         END 
      END // If JavaProjectName exists
    
   END
   
   // Set the executable directory. Create it if it doesn't exist and also copy the zeidon.hky if it doesn't exist.
   szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.LPLR.wExecutableSubDirectory

   TZCMLPLO.LPLR.ExecDir = szFileName
   

   // Copy the Hotkey file "ZEIDON.HKY" to the new LPLR executable directory.
   szFileName = szFileName + "\ZEIDON.HKY"
   nRC = SysValidDirOrFile( szFileName, FALSE, FALSE, 512 )
   IF nRC <= 0
      szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
      szFromFileName = szFromFileName + "\ZEIDON.HKY"
      SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
   END

   IF TZCMLPLO.LPLR.Name != TZCMLPLO.LPLR.wOrigLPLRName 

   // If we are creating a new lplr...
   // Now check kzmsgqoo, and tzzolodo if the directory "NewLPLR" exists under zeidon executable directory.
   szFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS + "\NewLPLR"
   IF TZCMLPLO.LPLR.LPLR_Type = "2" AND SysValidDirOrFile( szFileName, TRUE, FALSE, 512 ) > 0

      szFileName = TZCMLPLO.LPLR.MetaSrcDir
      szFileName = szFileName + "\KZMSGQOO.LOD"
      nRC = SysValidDirOrFile( szFileName, FALSE, FALSE, 512 )
      IF nRC <= 0
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\KZMSGQOO.LOD"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
         szFileName = TZCMLPLO.LPLR.ExecDir + "\KZMSGQOO.XOD"
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\KZMSGQOO.XOD"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
      END
      szFileName = TZCMLPLO.LPLR.MetaSrcDir
      szFileName = szFileName + "\TZZOLFLO.LOD"
      nRC = SysValidDirOrFile( szFileName, FALSE, FALSE, 512 )
      IF nRC <= 0
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\TZZOLFLO.LOD"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
         szFileName = TZCMLPLO.LPLR.ExecDir + "\TZZOLFLO.XOD"
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\TZZOLFLO.XOD"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
      END
      szFileName = TZCMLPLO.LPLR.MetaSrcDir
      szFileName = szFileName + "\TZAPDMAA.PDG"
      nRC = SysValidDirOrFile( szFileName, FALSE, FALSE, 512 )
      IF nRC <= 0
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\TZAPDMAA.PDG"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
      END
      szFileName = TZCMLPLO.LPLR.MetaSrcDir
      szFileName = szFileName + "\TZAPDMAB.PDG"
      nRC = SysValidDirOrFile( szFileName, FALSE, FALSE, 512 )
      IF nRC <= 0
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\TZAPDMAB.PDG"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
      END
      szFileName = TZCMLPLO.LPLR.MetaSrcDir
      szFileName = szFileName + "\TZAPDMAC.PDG"
      nRC = SysValidDirOrFile( szFileName, FALSE, FALSE, 512 )
      IF nRC <= 0
         szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
         szFromFileName = szFromFileName + "\NewLPLR\TZAPDMAC.PDG"
         SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
      END

      szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\KZMSGQOO_Object.java"
      szFromFileName = KZAPPLOO.ZEIDON.ZEIDON_SYS
      szFromFileName = szFromFileName + "\NewLPLR\KZMSGQOO_Object.java"
      SysCopyFile( ViewToWindow, szFromFileName, szFileName, TRUE )
   END

   END

   TZCMLPLO.LPLR.PgmSrcDir = TZCMLPLO.LPLR.MetaSrcDir
   TZCMLPLO.LPLR.TempDesc = TZCMLPLO.LPLR.Desc

   // TZCMWKSO
   // Make sure that the LPLR object exists in TZCMWKSO.
   SET CURSOR FIRST TZCMWKSO.LPLR WHERE TZCMWKSO.LPLR.Name = TZCMLPLO.LPLR.Name
   IF RESULT < zCURSOR_SET
      CREATE ENTITY TZCMWKSO.LPLR
      TZCMWKSO.LPLR.LPLR_Type = "2"
      TZCMWKSO.LPLR.Name      = TZCMLPLO.LPLR.Name
      TZCMWKSO.LPLR.ZKey = lHighZKey
   END
   TZCMWKSO.LPLR.Desc       = TZCMLPLO.LPLR.Desc
   TZCMWKSO.LPLR.MetaSrcDir = TZCMLPLO.LPLR.MetaSrcDir
   TZCMWKSO.LPLR.PgmSrcDir  = TZCMLPLO.LPLR.MetaSrcDir
   TZCMWKSO.LPLR.ExecDir    = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.LPLR.wExecutableSubDirectory
   //TZCMWKSO.LPLR.MaxZKey    = TZCMULWO.User.GenerationStartZKey

   TZCMWKSO.RepositoryClient.DefaultLPLR_ZKey = TZCMWKSO.LPLR.ZKey

   SysGetEnvVar( szFileName, "ZEIDON", 128 )
   szFileName = szFileName + "\TZCMWKS8.POR"
   nRC = CommitOI_ToFile( TZCMWKSO, szFileName, zASCII )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save New LPLR",
                   "An error occurred when writing the TZCMWKSO file. You will have to repeat the function.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END

   // TZCMLPLO
   IF TZCMLPLO.LPLR.wExecutableSubDirectory = ""
      szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + szLPLRName + ".XLP"
   ELSE
      szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMLPLO.LPLR.wExecutableSubDirectory + "\" + szLPLRName + ".XLP"
   END

   // KJS 06/05/15 - Do we need to create this new one, or can we just save this with the new base directory?
   /*
   nRC = ActivateOI_FromFile ( TZCMLPLONew, "TZCMLPLO", ViewToWindow, szFileName, 512 )
   IF nRC < 0
      szMsg = "An XLP object (TZCMLPLO) does not exist in the directory path specified: " + NEW_LINE + "  " + szFileName + "."
      MessageSend( ViewToWindow, "", "Configuration Management", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      DropView( TZCMULWO )
      RETURN -1
   ELSE
      TZCMLPLONew.LPLR.LPLR_Type  = TZCMLPLO.LPLR.LPLR_Type    // We will use Type on next window.
      TZCMLPLONew.LPLR.MetaSrcDir = TZCMLPLO.LPLR.MetaSrcDir
      TZCMLPLONew.LPLR.PgmSrcDir  = TZCMLPLO.LPLR.MetaSrcDir
      TZCMLPLONew.LPLR.ExecDir    = TZCMLPLO.LPLR.MetaSrcDir + "\" + TZCMULWO.Installation.ExecutableSubDirectory
      DropObjectInstance( TZCMLPLO )
      NAME VIEW TZCMLPLONew "TZCMLPLO"
   END
   */
   // Commit the XLP in the executable directory, and then commit the LLP in the base directory.
   CommitOI_ToFile( TZCMLPLO, szFileName, zSINGLE )
   szFileName = TZCMLPLO.LPLR.MetaSrcDir + "\" + szLPLRName + ".LLP"
   CommitOI_ToFile( TZCMLPLO, szFileName, zSINGLE )

   // Make sure the APPLICATION entry exists and is correct.
   SET CURSOR FIRST KZAPPLOO.APPLICATION WHERE KZAPPLOO.APPLICATION.APP_NAME = TZCMLPLO.LPLR.Name
   IF RESULT < zCURSOR_SET
      CREATE ENTITY KZAPPLOO.APPLICATION
      KZAPPLOO.APPLICATION.APP_NAME = TZCMLPLO.LPLR.Name
   END
   KZAPPLOO.APPLICATION.APP_DLL    = TZCMLPLO.LPLR.ExecDir
   KZAPPLOO.APPLICATION.APP_ADOBIN = TZCMLPLO.LPLR.ExecDir
   KZAPPLOO.APPLICATION.APP_LOCAL  = KZAPPLOO.ZEIDON.ZEIDON_LOC
   KZAPPLOO.APPLICATION.APP_SHARED = KZAPPLOO.ZEIDON.ZEIDON_SHR

   SysGetEnvVar( szFileName, "ZEIDON", 128 )
   szFileName = szFileName + "\ZEIDON.APP"

   // Commit the ZEIDON.APP object.
   nRC = CommitOI_ToFile( KZAPPLOO, szFileName, zASCII )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save New LPLR",
                   "An error occurred when writing the ZEIDON.APP file. You will have to repeat the function.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END

   // Save view TZCMLPLO to view TaskLPLR because thi
   NAME VIEW TZCMLPLO "TaskLPLR"

   RebuildMetaLists( ViewToWindow )
   InitializeLPLR( ViewToWindow, szLPLRName )
   //CommitMetaOI( ViewToWindow, TZEREMDO, zSOURCE_ERD_META )
   //CommitMetaOI( ViewToWindow, TZTENVRO, zSOURCE_DTE_META )
   RebuildXDM( ViewToWindow )
   // Right now we run into an error in RebuildXODs because we don't have the TE set up.
   // It's looking for view "TE_DB_Environ" and entity "TE_DBMS_Source".
   // So I will come back to this, do we want to set up an initial te here?
   //RebuildXODs( ViewToWindow )

END

/*************************************************************************************************
**
**    OPERATION: PostbuildNewLPLR
**
*************************************************************************************************/
DIALOG OPERATION
PostbuildNewLPLR( VIEW ViewToWindow )

   VIEW TZCMWKSO REGISTERED AS TZCMWKSO
   VIEW TZCMLPLO BASED ON LOD  TZCMLPLO

   // Initialize an empty LPLO object to hold the keyed in data.
   ACTIVATE TZCMLPLO EMPTY
   NAME VIEW TZCMLPLO "TZCMLPLO"
   CREATE ENTITY TZCMLPLO.LPLR

   // New Empty LPLR
   TZCMLPLO.LPLR.LPLR_Type = 2

END


/*************************************************************************************************
**
**    OPERATION: PostbuildNewLPLR
**
*************************************************************************************************/
DIALOG OPERATION
PostbuildImportLPLR( VIEW ViewToWindow )

   VIEW TZCMLPLO REGISTERED AS TZCMLPLO

   // New Imported (external) LPLR
   TZCMLPLO.LPLR.LPLR_Type = 3
   SetCtrlState( ViewToWindow, "edName", zCONTROL_STATUS_ENABLED, FALSE )
   SetCtrlState( ViewToWindow, "edDesc", zCONTROL_STATUS_ENABLED, FALSE )
   SetCtrlState( ViewToWindow, "edBaseDir", zCONTROL_STATUS_ENABLED, FALSE )
   SetCtrlState( ViewToWindow, "edExecDir", zCONTROL_STATUS_ENABLED, FALSE )
   SetCtrlState( ViewToWindow, "edJavaPackageName", zCONTROL_STATUS_ENABLED, FALSE )

END

/*************************************************************************************************
**
**    OPERATION: SAVE_NewLPLR
**
*************************************************************************************************/
DIALOG OPERATION
SAVE_NewLPLR( VIEW ViewToWindow )

   VIEW TZCMWKSO    REGISTERED AS TZCMWKSO
   VIEW TZCMLPLO    REGISTERED AS TZCMLPLO
   VIEW KZAPPLOO    BASED ON LOD  KZAPPLOO
   STRING (513) szFileName
   STRING (513) szDirectoryName
   SHORT nRC

   // Make sure that a subdirectory is specified and then update and save the three objects above.
   /*IF TZCMULWO.Installation.ExecutableSubDirectory = ""
      MessageSend( ViewToWindow, "", "Save New LPLR",
                   "A Subdirectory value must be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END*/

   // Save the XLP object.
   // KJS 06/10/15 - Already done in CreateNewLPLR.
   /*
   szFileName = TZCMLPLO.LPLR.ExecDir + "\" + TZCMLPLO.LPLR.Name  + ".XLP"
   nRC = CommitOI_ToFile( TZCMLPLO, szFileName, zASCII )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save New LPLR",
                   "An error occurred when writing the TZCMLPLO file. You will have to repeat the function.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END
   // Save the TZCMWKSO object.
   SysGetEnvVar( szDirectoryName, "ZEIDON", 128 )
   szFileName = szDirectoryName + "\TZCMWKS8.POR"
TraceLineS( "*** WKS File: ", szDirectoryName )
   nRC = CommitOI_ToFile( TZCMWKSO, szFileName, zASCII )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save New LPLR",
                   "An error occurred when writing the TZCMWKSO file. You will have to repeat the function.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END
   // Make sure there is a correct APPLICATION entry for the new LPLR in the ZEIDON.APP object and save it.
   SysGetEnvVar( szDirectoryName, "ZEIDON", 128 )
   szFileName = szDirectoryName + "\ZEIDON.APP"
   nRC = ActivateOI_FromFile ( KZAPPLOO, "KZAPPLOO", ViewToWindow, szFileName, 512 )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Configuration Management",
                   "An error occurred when reading the ZEIDON.APP file.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      DropView( KZAPPLOO )
      RETURN -1
   ELSE
      NAME VIEW KZAPPLOO "KZAPPLOO"
   END
TraceLineS( "*** APP File: ", szDirectoryName )
   // Make sure the APPLICATION entry exists and is correct.
   SET CURSOR FIRST KZAPPLOO.APPLICATION WHERE KZAPPLOO.APPLICATION.APP_NAME = TZCMLPLO.LPLR.Name
   IF RESULT < zCURSOR_SET
      CREATE ENTITY KZAPPLOO.APPLICATION
      KZAPPLOO.APPLICATION.APP_NAME = TZCMLPLO.LPLR.Name
   END
   KZAPPLOO.APPLICATION.APP_DLL    = TZCMLPLO.LPLR.ExecDir
   KZAPPLOO.APPLICATION.APP_ADOBIN = TZCMLPLO.LPLR.ExecDir
   KZAPPLOO.APPLICATION.APP_LOCAL  = KZAPPLOO.ZEIDON.ZEIDON_LOC
   KZAPPLOO.APPLICATION.APP_SHARED = KZAPPLOO.ZEIDON.ZEIDON_SHR
   // Commit the ZEIDON.APP object.
   nRC = CommitOI_ToFile( KZAPPLOO, szFileName, zASCII )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save New LPLR",
                   "An error occurred when writing the ZEIDON.APP file. You will have to repeat the function.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END
*/
END


/*************************************************************************************************
**
**    OPERATION: IMPORT_LPLR
**
*************************************************************************************************/
DIALOG OPERATION
IMPORT_LPLR( VIEW ViewToWindow )

   VIEW TZCMWKSO    REGISTERED AS TZCMWKSO
   VIEW TZCMLPLO    BASED ON LOD  TZCMLPLO
   VIEW TZCMLPLONew BASED ON LOD  TZCMLPLO
   VIEW KZAPPLOO    BASED ON LOD  KZAPPLOO
   VIEW KZXMLPGO    BASED ON LOD  KZXMLPGO
   STRING ( 513 ) szMsg
   STRING ( 513 ) szXLPFileName
   STRING ( 513 ) szStr
   STRING ( 513 ) szFileName
   STRING ( 1 )   szSlash
   STRING ( 30 )  szOperatorArea
   SHORT nRC
   SHORT nLth

   szFileName = "*.*"
   IF ( OperatorPromptForFile( ViewToWindow,
                                szXLPFileName,
                                500,
                                "LLP files (*.LLP)||*.LLP||||",
                                "CSV",
                                9224 ) = 2 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END


   nRC = ActivateOI_FromFile ( TZCMLPLO, "TZCMLPLO", ViewToWindow, szXLPFileName, 512 )

   IF nRC < 0
      szMsg = "Could not open the LLP file specified: " + NEW_LINE + "  " + szXLPFileName + "."
      MessageSend( ViewToWindow, "", "Configuration Management", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      DropView( TZCMLPLO )
      RETURN -1
   END
   NAME VIEW TZCMLPLO "TZCMLPLO"

  nLth = zstrlen( szXLPFileName )
  // We want to get just the directory selected without the filename.
  nRC = zSearchSubString( szXLPFileName, "\"  , "b", nLth )
  //nRC = zSearchSubString( szXLPFileName, "\"  , "b", nRC - 1 )

  // Keep track of original MetSrcDir
  szStr = TZCMLPLO.LPLR.MetaSrcDir

  nRC = ZeidonStringCopy( szFileName, 1, 0, szXLPFileName, 1, nRC, 513 )

// KJS 06/05/15 - Probably not here, but if the user puts in a directory for the meta source that doesn't
// exist, do we want to create one for them?
  TZCMLPLO.LPLR.MetaSrcDir = szFileName
  TZCMLPLO.LPLR.wOrigMetaSrc = szFileName
  //TZCMLPLO.LPLR.wOrigExecSrc = TZCMLPLO.LPLR.ExecDir
  TZCMLPLO.LPLR.wOrigLPLRName = TZCMLPLO.LPLR.Name 
  TZCMLPLO.LPLR.wOrigJavaPackage = TZCMLPLO.LPLR.JavaPackageName

   // KJS 06/16/15 - Should we see if there is an ExecutableSubDirecory, and if not, create one based on the ExecDir.
   IF TZCMLPLO.LPLR.ExecDir != ""
      szFileName = TZCMLPLO.LPLR.ExecDir
      // Get the part of the filename that is different between the Meta and Exec dirs.
      zSearchAndReplace( szFileName, 513, szStr, "" )
      nRC = zSearchSubString( szFileName, "\"  , "f", 0 )
      IF nRC = 0
         // Now replace the starting "\" if there is one.
         nRC = ZeidonStringCopy( szFileName, 1, 0, szFileName, 2, 0, 513 )
      END
      // Do we need to get rid of the first /?
      TZCMLPLO.LPLR.wExecutableSubDirectory = szFileName
   END

   TZCMLPLO.LPLR.wOrigExecSrc = TZCMLPLO.LPLR.wOrigMetaSrc + "\" + TZCMLPLO.LPLR.wExecutableSubDirectory

  //zstrncpy( szFileName, szXLPFileName, nRC, nLth )

END

/*************************************************************************************************
**
**    OPERATION: GetZeidonApp
**
*************************************************************************************************/
LOCAL OPERATION
GetZeidonApp( VIEW ViewToWindow,
              VIEW vKZAPPLOO,
              STRING ( 32 ) szZeidonDirectory )
   STRING ( 513 ) szMsg
   INTEGER nRC
   INTEGER nLth

  SysGetEnvVar( szZeidonDirectory, "ZEIDON",  513 )
  nLth = zstrlen( szZeidonDirectory )
  nRC = zSearchSubString( szZeidonDirectory, "\"  , "f", nLth )

  szZeidonDirectory = szZeidonDirectory + "ZEIDON.APP"
  nRC = ActivateOI_FromFile ( vKZAPPLOO, "KZAPPLOO", ViewToWindow, szZeidonDirectory, 512)
   IF nRC < 0
      szMsg = "Could not open: " + szZeidonDirectory + "."
      MessageSend( ViewToWindow, "", "Configuration Management", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      DropView( vKZAPPLOO )
      RETURN -1
   END

END


/*************************************************************************************************
**    
**    OPERATION: CHANGE_ImportName
**    
*************************************************************************************************/
DIALOG OPERATION
CHANGE_ImportName( VIEW ViewToWindow )

   SetCtrlState( ViewToWindow, "edName", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( ViewToWindow, "edDesc", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( ViewToWindow, "edBaseDir", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( ViewToWindow, "edExecDir", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( ViewToWindow, "edJavaPackageName", zCONTROL_STATUS_ENABLED, TRUE )

END
