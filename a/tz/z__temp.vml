/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteCtrlsRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteCtrlsRecurs( VIEW vDialog      BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                        INTEGER           lFile,
                        STRING ( 10000 )  szWriteBuffer,
                        STRING ( 100 )    szIndent,
                        INTEGER           lTableRowCnt,
                        STRING ( 1 )      szNoPositioning,
                        INTEGER           lOffsetX,
                        INTEGER           lOffsetY )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vList    BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity  BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope   BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 64 )  szViewName
   STRING ( 32 )  szMapEntityName
   STRING ( 32 )  szMapAttributeName
   STRING ( 32 )  szActionName
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCtrlCtrlTag
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 32 )  szListCtrlTag
   STRING ( 100 ) szIndentGroup
   STRING ( 100 ) szIndentHold
   STRING ( 100 ) szPosition
   STRING ( 10 )  szColCount
   STRING ( 100 ) szSort
   STRING ( 256 ) szAbsoluteStyle
   STRING ( 20 )  szAbsoluteWidth
   STRING ( 256 ) szRelStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 50 )  ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 100 ) szSize
   STRING ( 100 ) szWidth
   STRING ( 100 ) szHeight
   STRING ( 32 )  szRadioGroupName
   STRING ( 256 ) szWidget
   STRING ( 256 ) szText
   STRING ( 64 )  szTerm
   STRING ( 20 )  szJustify
   STRING ( 50 )  szWebCtrlType
   STRING ( 35 )  szControlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 50 )  szGridView
   STRING ( 50 )  szGridOrigViewName
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLth
   STRING ( 200 ) szItemTableHeader
   STRING ( 50 )  szParentWebType
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 1 )   szSurveyGroupFlag
   STRING ( 1 )   szGridGroupingFlag
   STRING ( 1 )   szIncludeFileFlag
   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szToggleFlag
   STRING ( 1 )   sziFrameFlag
   STRING ( 1 )   szDashboardFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szFilterTable
   STRING ( 1 )   szFileTransferFlag
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szWCP_Multiline
   STRING ( 1 )   szWCP_EmailAddress
   STRING ( 1 )   szWCP_Hyperlink
   STRING ( 1 )   szWCP_AbsoluteWidth
   STRING ( 1 )   szWCP_FirstOccurrenceOnly
   STRING ( 1 )   szFirstTimeThrough
   STRING ( 1 )   szGridInGroup
   STRING ( 1 )   szTableExport
   STRING ( 100 ) szDisabled
   STRING ( 256 ) szStyle
   DECIMAL        dDLUnits
   INTEGER        LastY_Pos
   INTEGER        LastY_Height
   INTEGER        LastY_PosGroup
   INTEGER        LastX_Pos
   INTEGER        LastX_Width
   INTEGER        MaxY_HeightForLine
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        nbsp_count
   INTEGER        Size
   INTEGER        Width
   INTEGER        WidthPercent
   INTEGER        lSubtype
   INTEGER        lSubtypeX
   INTEGER        lSort
   INTEGER        lHeader
   INTEGER        lColCnt
   INTEGER        lCol
   INTEGER        lPushBtn
   INTEGER        lEditBox
   INTEGER        lStyleX
   INTEGER        lTemp
   INTEGER        lMaxStringLth
   SHORT          bResetToPlaceHolder
   SHORT          nRC

   PIX_PER_DU( vDialog, dDLUnits )

   // Generate the code for creating HTML statements for controls.
   // A major issue is determining which Controls are on the same row, as they need table entries
   // around them. Note that Groups must be handled differently from other Controls.

   // Make sure the Controls are ordered by row and column.

   szIndentHold = szIndent

   // These variables are for if we are not using absolute positioning.
   LastY_Pos      = 0
   LastY_Height   = 0
   LastY_PosGroup = 0
   LastX_Pos      = 0
   LastX_Width    = 0
   MaxY_HeightForLine = 0
   szFirstTimeThrough = "Y"

   // Process each Control
   FOR EACH vDialog.Control

      //zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
      //zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

      // If szNoPositioning = "Y" then we are not using absolute positioning.  We need to
      // create some divs or spans to make this look similar to what's in the painter.
      IF  szNoPositioning = "Y"

         // Need to reset the x positions
         IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND szFirstTimeThrough != "Y"
         //IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND LastY_Pos != 0
            szWriteBuffer = "</div>  <!-- End of a new line -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            LastX_Pos       = 0
            LastX_Width     = 0

            // If we are using relative positioning, then we have automatically put
            // float:left on any groupboxes.  Because of this, I think if we are onto
            // a new row, then we should put a "clear" div in.
            szWriteBuffer = "<div style=^clear:both;^></div>  <!-- Moving to a new line, so do a clear -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // We may have controls on the same line with varying heights.  When determining if there is
         // blank space in between these lines, make sure we are comparing the highest control.
         Y_Pos = LastY_Pos + LastY_Height
         IF  Y_Pos > MaxY_HeightForLine
            MaxY_HeightForLine = Y_Pos
         END

         // Determine if there is blank space in between the y coordinates of the last
         // control and the current control.  If so, then we need to put in a div as a spacer control.
         IF  Y_Pos < vDialog.Control.PSDLG_Y

               //TraceLineS("****  SPACE BETWEEN Ys *** ", vDialog.Control.Tag )
               //Y_Size = ( vDialog.Control.PSDLG_Y - ( LastY_Pos + LastY_Height ) ) * dDLUnits + lOffsetY
               Y_Size = ( vDialog.Control.PSDLG_Y - ( MaxY_HeightForLine ) ) * dDLUnits + lOffsetY
               X_Size = 100
               zIntegerToString( szHeight, 16, Y_Size )
               zIntegerToString( szWidth, 16, X_Size )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = " <!-- This is added as a line spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;^></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         // There should be a <div> surrounding each line.
         IF ( LastY_Pos < vDialog.Control.PSDLG_Y ) OR szFirstTimeThrough = "Y"

               LastY_Pos    = vDialog.Control.PSDLG_Y

               // KJS 08/01/08 - Seems as though I need to give this div a width, otherwise,
               // it many times places things on different lines.
               //KELLY8
               CreateViewFromView( vDialog2, vDialog )

               X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
               SET CURSOR  NEXT vDialog2.Control
               // Loop through all the controls that are at the same y pos and see how wide they
               // are.
               LOOP  WHILE RESULT >= zCURSOR_SET AND LastY_Pos = vDialog2.Control.PSDLG_Y

                  //X_Size = X_Size + vDialog2.Control.SZDLG_X
                  X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
                  SET CURSOR  NEXT vDialog2.Control

               END

               DropView(vDialog2)

               X_Size = X_Size * dDLUnits + lOffsetY
               // KJS 09/03/08 - does this help??
               X_Size = X_Size + 1
               zIntegerToString( szWidth, 16, X_Size )

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<div style=^width:" + szWidth + "px;^>  <!-- Beginning of a new line -->"
               szWriteBuffer = "<div>  <!-- Beginning of a new line -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         X_Pos = LastX_Pos + LastX_Width
         // If there is blank space to the left of a control put in a spacer control.
         IF X_Pos < vDialog.Control.PSDLG_X

            //TraceLineS("****  SPACE BETWEEN Xs *** ", vDialog.Control.Tag )
            X_Size = ( vDialog.Control.PSDLG_X  - ( LastX_Pos + LastX_Width ) ) * dDLUnits + lOffsetX
            Y_Size = vDialog.Control.SZDLG_Y * dDLUnits + lOffsetY
            zIntegerToString( szHeight, 16, Y_Size )
            zIntegerToString( szWidth, 16, X_Size )

            // KJS 11/19/08 - Currently we are placing a span with spacers in between controls that have space between them.
            // If there is a div control (or grid or tab) in a row and there is space before it, then we should really
            // put a floating div there instead of a span.  10/07/09 - Added RadioGrp as well.
            IF vDialog.ControlDef.Tag = "GroupBox" OR vDialog.ControlDef.Tag = "Grid" OR
               vDialog.ControlDef.Tag = "Tab" OR vDialog.ControlDef.Tag = "RadioGrp"
               //szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               // Taking out the height for this spacer since in IE this causes some issue.
               szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               nbsp_count = X_Size / 5
               //TraceLineI("**** nbsp_count ", nbsp_count )

               IF  nbsp_count > 0
                  szWriteBuffer = "<span style=^height:" + szHeight + "px;^>"
                  LOOP WHILE nbsp_count > 0
                      nbsp_count = nbsp_count - 1
                      szWriteBuffer = szWriteBuffer + "&nbsp"
                  END
                  szWriteBuffer = szWriteBuffer + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
            END

         END

         LastY_Pos    = vDialog.Control.PSDLG_Y
         LastY_Height = vDialog.Control.SZDLG_Y
         LastX_Pos    = vDialog.Control.PSDLG_X
         LastX_Width  = vDialog.Control.SZDLG_X
      END

      szFirstTimeThrough = ""
      szControlType = vDialog.ControlDef.Tag
      szWebCtrlType = vDialog.Control.WebCtrlType
      szIndent = szIndentHold + "   "
      szCtrlTag = vDialog.Control.Tag

      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END

         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         // There are times when the user wants to paint a div that has no height so it will grow with the
         // data within it.  This flags the div will have no height.
         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         // There are times when the user wants to paint a div that has no width so it will grow with the
         // data within it.  This flags the div will have no width.
         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

         // KJS 05/01/09
         // When the user paints a grid, they may not want this grid (and any leading header text) to show
         // during run-time if there is no data for the grid.  If the user puts this grid and any other
         // controls in a groupbox with the control property of "Table Grouping", we will not display anything
         // within this groupbox if the grid has no data during run-time.
         szGridGroupingFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Grid Grouping"
         IF RESULT >= zCURSOR_SET
            szGridGroupingFlag = "Y"
            // This div should not have any height or width.
            szNoHeightFlag = "Y"
            szNoWidthFlag = "Y"
         END

         // Set flag for RepeatingGroup either from old szWebCtrlType or new WebControlProperty.
         // Repeating Group is used for the situation where a Group of controls is to be repeated for each controlling
         // entity, very much as is done in Reports. An example in Zencas is the page of student pictures and basic
         // information for either a class or an advisor.
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            szRepeatingGroupFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END

         // Set flag for Survey Group, which is a repeating group for survey questions.
         szSurveyGroupFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
         IF RESULT >= zCURSOR_SET
            szSurveyGroupFlag = "Y"
         END

         // Set flag for FileTransfer, as all GroupBox and subcontrol processing is skipped for that case.
         szFileTransferFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "File Transfer to Server"
         IF RESULT >= zCURSOR_SET
            szFileTransferFlag = "Y"
         END

         szIncludeFileFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Include File"
         IF RESULT >= zCURSOR_SET
            szIncludeFileFlag = "Y"
         END

         // Wondering if somehow this should be different in the sense that a group box can only be
         // either div, include file, iframe, table etc. whereas the "No Height" etc. can go with
         // div but only div, "Include File" etc.  How would a user know?
         sziFrameFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "iFrame"
         IF RESULT >= zCURSOR_SET
            sziFrameFlag = "Y"
         END

         szDashboardFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Dashboard"
         IF RESULT >= zCURSOR_SET
            szDashboardFlag = "Y"
         END

         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END

         szToggleFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle"
         IF RESULT >= zCURSOR_SET
            szToggleFlag = "Y"
         END

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END

      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + "px;^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )
         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSP_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END

      // Inside this div there should be a grid control.  Look for the first grid control and check it's mapping.
      // During run-time, we will not display anything within this groupbox if the grid has no data.  If there is
      // other items in the group box don't worry about them.  Should we give an error message if this group box
      // has no grid?
      IF szControlType = "GroupBox" AND szGridGroupingFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szViewName = ""
         szMapEntityName = ""

         SetViewToSubobject( vDialog, "CtrlCtrl" )
         FOR EACH vDialog.Control
            IF vDialog.ControlDef.Tag = "Grid" AND szViewName = ""
               // Should I get grid mapping here?
               szViewName = vDialog.CtrlMapView.Name
               szMapEntityName = vDialog.CtrlMapLOD_Entity.Name
            END
         END
         ResetViewFromSubobject( vDialog )

         // If there was a grid with mapping, use these to check the existence of the entity and paint what's in the groupbox
         // if the entity exists.
         IF szViewName != "" AND szMapEntityName != ""

            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + szViewName + ".CheckExistenceOfEntity( strSessionId, ^" + szMapEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

             // Generate everything within this groupbox.
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0


            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            // Do I drop the view here?
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
            // Should I give a message here that there is no grid within this groupbox or
            // should I just ignore it?
         END
            szWriteBuffer = "</div>  <!--  " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND
         szGridGroupingFlag = "" AND szSurveyGroupFlag = ""


         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, X_Size, Y_Size )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div "+ szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF  szDashboardFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*******************************  DASHBOARD CODE   ******************************************************

            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardSource = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardMore = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szFunction = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDisplayFrame = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardMax = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardCnt = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxColumns = 3; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxInCol = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iNbrInCol = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColStartNbr = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColEndNbr = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iRemainder = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColNbr = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iSortOrder = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int i = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   nRC = vKZXMLPGO.GetView( strSessionId, ^KZXMLPGO^, vAppSubtask ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO.SetAttribute( strSessionId, ^Session^, ^DashboardFrameCount^, 1 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC > 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^DashboardFrameUser^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //Order by Sort Order "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //nRC = " + vDialog.CtrlMapView.Name + ".OrderEntityForView( strSessionId, " + vDialog.CtrlMapView.Name + ", ^DashboardFrameUser^, ^PresentationSortOrder A^); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //" + vDialog.CtrlMapView.Name + ".TraceLine(^*** nRC after OrderEntityForView *** ^, nRC ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".SetCursorFirst( strSessionId, ^DashboardFrameUser^, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         while ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            szDisplayFrame = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrameUser^, ^ActiveOnCurrentDashboard^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // When we've reached the max number of columns then "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // start at column one again.   "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if (iColNbr > iMaxColumns ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iColNbr = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // Set what column this frame will be positioned in. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".SetAttribute( strSessionId, ^DashboardFrameUser^, ^wColumnNbr^, iColNbr ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iDashboardMax++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColNbr++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            nRC =  " + vDialog.CtrlMapView.Name + ".SetCursorNext( strSessionId, ^DashboardFrameUser^, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iRemainder = iDashboardMax % iMaxColumns;  // mod function  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( iRemainder == 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns) + 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Loop through each frame that is in the first column, then those in the "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // second column etc.        "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         for  ( i=1; i <= iMaxColumns; i++ ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColNbr = i; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // If we are onto a new dashboard column, put the closing tag on the previous column "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( i != 1 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <div id=^column-<%=iColNbr%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // These variables are used in the Expand function. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColStartNbr = iDashboardCnt; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColEndNbr = (iColStartNbr + iMaxInCol) - 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (iColEndNbr > iDashboardMax ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColEndNbr = iDashboardMax; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name + ".SetCursorFirst( strSessionId, ^DashboardFrameUser^, ^wColumnNbr^, i, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               szDisplayFrame = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrameUser^, ^ActiveOnCurrentDashboard^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iSortOrder = " + vDialog.CtrlMapView.Name + ".GetInteger( strSessionId, ^DashboardFrameUser^, ^PresentationSortOrder^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( iSortOrder <= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iSortOrder = iDashboardCnt; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  " + vDialog.CtrlMapView.Name + ".TraceLine(^*** There is no sort order *** ^, iSortOrder ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".SetAttribute( strSessionId, ^DashboardFrameUser^, ^wFrameNbr^, iDashboardCnt ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //" + vDialog.CtrlMapView.Name + ".TraceLine(^*** Dashboard Column *** ^, iColNbr ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardSource = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrame^, ^DashboardDisplayURL^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardMore = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrame^, ^ExpandedDisplayURL^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szFunction = ^Expand(this, ^ + iDashboardCnt + ^, ^ + iColNbr + ^, ^ + iColStartNbr + ^, ^ + iColEndNbr + ^)^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  //" + vDialog.CtrlMapView.Name + ".TraceLine(^*** Expand Function *** ^, szFunction );         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     <div id=^rpt-display-<%=iDashboardCnt%>^ class=^region-display^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div class=^region-header^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-title-<%=iDashboardCnt%>^ class=^region-header-title^ >A Report <%=iSortOrder%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-expand-<%=iDashboardCnt%>^ class=^region-header-title-expand^ title=^Expand^ onclick=^<%=szFunction%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-open-<%=iDashboardCnt%>^ class=^region-header-title-open^ title=^More Detail...^ onclick=^OpenFrame(this,'<%=szDashboardMore%>' );^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div id=^rpt-display-content-<%=iDashboardCnt%>^ class=^region-body-content^ > "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          <iframe src=^<%=szDashboardSource%>^ width=^100%^ height=^100%^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          </iframe> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "    "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                   iDashboardCnt++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } // if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               nRC =  " + vDialog.CtrlMapView.Name + ".SetCursorNext( strSessionId, ^DashboardFrameUser^, ^wColumnNbr^, i, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } // While "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            //vComboBox2.DropView( strSessionId ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }  // For each i "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Now close the last column div. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = " "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } // if CheckExistenceOfEntity "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*****************************************  END OF DASHBOARD   ********************************************************

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         IF  sziFrameFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<iframe " + szAbsoluteStyle + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ src=^" + vDialog.Control.WebFileName + "^>  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<iframe class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "</iframe>  <!-- " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         // Div is the default group for now so we don't have to check IF szDivFlag = "Y" for the moment.
         //IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // If this is a div we want to toggle
            IF szToggleFlag = "Y"
            // szWriteBuffer = "<div style=^float:left;^>  <!-- Div surrounding toggle --> "
               // KJS 11/05/15 - Jeff asked for float to be changed to clear.
               szWriteBuffer = "<div style=^clear:left;^>  <!-- Div surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:20px;^><a href=^#^ onclick=^animatedcollapse.toggle('" + szCtrlTag + "');^ style=^^>" + vDialog.Control.Text + "</a></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END


            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Should we put reCAPTCHA code here???  Or should I have done this up above?
            IF szreCAPTCHAFlag = "Y"
               szWriteBuffer = "<script type=^text/javascript^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   src=^https://api-secure.recaptcha.net/challenge?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <iframe src=^https://api-secure.recaptcha.net/noscript?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       height=^300^ width=^500^ frameborder=^0^></iframe><br>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <textarea name=^recaptcha_challenge_field^ rows=^3^ cols=^40^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   </textarea>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <input type=^hidden^ name=^recaptcha_response_field^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       value=^manual_challenge^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            ELSE

            // KJS 09/19/08 - Adding the ability to include a file inside a div.  I am assuming that if there
            // is an include file, there will be nothing else inside the div so we dont' need to call
            // GenJSP_CrteCtrlsRecurs.
            IF szIncludeFileFlag = "Y"

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%@include file=^" + vDialog.Control.WebFileName + "^ %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
               // Only put this in if there was no web type.  We might want to change this later.
               IF szDivFlag = ""
                  IF vDialog.Control.Text != ""
                     szWriteBuffer = "<div " + szHTMLCtrlID + ">" + vDialog.Control.Text + "</div>"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
               END

               IF szToggleFlag = "Y"
                  szWriteBuffer = "<script type=^text/javascript^>animatedcollapse.addDiv('" + szCtrlTag + "', 'fade=400,hide=1,persist=1');animatedcollapse.init();</script>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
               CreateViewFromView( vGroupParent, vDialog )
               //TraceLineS("*** About to call recurs code from div *** ", vDialog.Control.Tag )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               szIndentGroup = szIndent
               GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                       lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
            END
            END

            IF szToggleFlag = "Y"
               szWriteBuffer = "</div> <!-- End Div for surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!--  " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END
         END

      ELSE  // Not a groupbox
         IF szControlType = "Text"  // TEXT
            TraceLineS("*** Creating Text *** ", szCtrlTag )
            GenJSP_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                             szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "EditBox"  // EDITBOX
            GenJSP_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "Calendar"  // CALENDAR
            GenJSP_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
            szRadioGroupName = szCtrlTag
            szWriteBuffer = "<% strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC <= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                               ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".CheckExistenceOfEntity( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strRadioGroupValue = " +
                               vDialog.CtrlMapView.Name + ".GetString( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
            //I'm going to do this like the way group box is (or was).  If there is text
            //to go on the box then we will create <fieldset.  If there is no text then
            //we will create a div.
            //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
            //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
            //an id and name but think it should.
            IF vDialog.Control.Text = ""
             //szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szAbsoluteStyle + ">"     Kelly 2012.06.15
               szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ style=^float:left;^>"
            ELSE
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSP_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                   szRadioGroupName, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            IF vDialog.Control.Text = ""
               szWriteBuffer = "</div>"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         IF szControlType = "CheckBox"  // CHECKBOX
            GenJSP_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "PushBtn"  // PUSH BUTTON
            szActionName = ""
            IF vDialog.EventAct EXISTS
               szActionName = vDialog.EventAct.Tag
               nRC = zstrcmpi( szActionName, "alt-f4" )
               IF nRC = 0
                  szActionName = "AltF4"
               END
            END

            CreateTabIndexString( vDialog, szTabIndex )
            szAbsoluteStyle = szAbsoluteStyle + szTabIndex
         // szWriteBuffer = "<button name=^" + szCtrlTag + "^ onclick=^" +
         //                 szActionName + "( )^ " + "value=^^" + szAbsoluteStyle +
         //                 ">" + vDialog.Control.Text + "</button>"

            szText = vDialog.Control.Text
            // Set Class as either null or with Class value.
            IF vDialog.Control.CSS_Class = ""
               szClass = ""
            ELSE
               szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
            END

            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialog.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END

            //KJS 10/19/07 - Added title.
            /*
            IF szWebCtrlType = "Button"
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""
            ELSE
               szWidget = "<input type=^submit^ " + szClass + szTitleHTML + "name=^"
               szTerm = ""
            END
            */
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""

            szParentWebType = ""
            IF vGroupParent != 0
               // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
               // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
               /*
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szParentWebType = "RelativePos"
               ELSE
                  szParentWebType = vGroupParent.Control.WebCtrlType
               END
               */
               szParentWebType = vGroupParent.Control.WebCtrlType
            END
            IF szParentWebType = "Div" OR szParentWebType = "DivScroll" OR
               szParentWebType = "Span"

               szWriteBuffer = "<p></p>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               CreateSizeString( vDialog, szSize )
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szActionName + "( )^ " + "style=^" + szSize + "^>" + szTerm
            ELSE
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szActionName + "( )^ " + szAbsoluteStyle + ">" + szTerm
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  //End of PushBtn

         IF szControlType = "ComboBox"  // COMBOBOX
            GenJSP_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndentGroup, szCtrlTag, "", szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP or JPG
            GenJSP_CrteJPG( vDialog, lFile, szWriteBuffer, szIndentGroup, szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "ListBox"  // LISTBOX
            GenJSP_CrteListBox( vDialog, lFile, szWriteBuffer, szIndentGroup, szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END  // IF szControlType = "ListBox"

         IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "Y"  // REPEATING GROUP

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP BEGIN */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Begin with JSP first cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                               vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC > 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
               ELSE
                  szScopingEntityName = ""
               END

               DropView( vDialog2 )

               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".SetCursorFirst( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process GroupBox begin.

            //KJS 09/11/08 - Now that we can generate using relative positioning, this
            // repeating group doesn't work right.  Instead of using fieldset, I will use the
            // div.
            IF  szNoPositioning = "Y"
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<div " + szAbsoluteStyle + "> <!-- div for repeating group --> "
               ELSE
                  szWriteBuffer = "<div class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- div for repeating group -->"
               END
            ELSE
               CreateRelStyleString( vDialog, szRelStyle, 0, 0, "" )
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<fieldset " + szRelStyle + ">"
               ELSE
                  szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szRelStyle + ">"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Process fields on GroupBox.
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            // Process GroupBox end.
            IF  szNoPositioning = "Y"
               szWriteBuffer = "</div>   <!-- end div for repeating group -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^clear:both;^></div> <!-- clear before each repeating group -->"
            ELSE
               szWriteBuffer = "</fieldset>"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Conclude with JSP next cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                               ".SetCursorNext( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP END */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END  // END OF REPEATING GROUP

         // SURVEY GROUP
         IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y" AND vDialog.CtrlMapView EXISTS

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div> <!-- surrounding div for survey --> "
            ELSE
               szWriteBuffer = "<div class=^" + szClass + "^>  <!-- surrounding div for survey -->"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionInGroupCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szQuestion = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTblMultChName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szCheckType = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnTwo = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnOne = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szGroupNbr = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // First begin with Question Group loop.
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                         vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END

            DropView( vDialog2 )

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".CheckExistenceOfEntity( strSessionId, ^SurveyQuestionGroup^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szGroupNbr = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionaire^, ^wCurrentSurveyGroup^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^SurveyQuestionGroup^" +
                         ", ^wOrder^, szGroupNbr, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szGroupName = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionGroup^, ^Name^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveygroup^> <!-- div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<span><%=szGroupName%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</div> <!-- end div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveygroupspacing^> <!-- div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
             szWriteBuffer = "</div> <!-- end div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Now go through question loop.
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END

            DropView( vDialog2 )

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Get the Question
            szWriteBuffer = "          iQuestionCount = iQuestionCount + 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Number^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          if ( szQuestion.length() > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "             szQuestion = szQuestion + ^. ^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = szQuestion + " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Question^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionID = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ID^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szType = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Type^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentFlag = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^AllowCommentFlag^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionIDName = ^QuestionID^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionTypeName = ^QuestionType^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szAllowCommentName = ^AllowComment^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szIsOptional = ^IsOptionalt^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szResponseIsOptional = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ResponseIsOptional^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // THIS IS WHERE WE WOULD CREATE THE VARIOUS QUESTIONS ETC>

            // We have a couple of hidden inputs to keep track of the question id and the type.
            szWriteBuffer = "   <input name=^<%=szQuestionIDName%>^ id=^<%=szQuestionIDName%>^ type=^hidden^ value=^<%=szQuestionID%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szQuestionTypeName%>^ id=^<%=szQuestionTypeName%>^ type=^hidden^ value=^<%=szType%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szAllowCommentName%>^ id=^<%=szAllowCommentName%>^ type=^hidden^ value=^<%=szCommentFlag%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szIsOptional%>^ id=^<%=szIsOptional%>^ type=^hidden^ value=^<%=szResponseIsOptional%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveyquestion^> <!-- div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span title=^<%=szQuestionHelp%>^ ><%=szQuestion%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div> <!-- end div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Create Question Text
            szWriteBuffer = "<div class=^surveyquestionanswers^>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Check if this is single answer or multiple choice
            szWriteBuffer = "   if ( szType.equals(^Text^) ) // Text Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Single Question code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: mleTextAnswer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTxtAnswerName = ^txtAnswer^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wTextAnswer^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div >  <!-- textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<textarea name=^<%=szTxtAnswerName%>^ id=^<%=szTxtAnswerName%>^ style=^width:700px;height:94px;border:'2px solid';border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div >  <!-- end textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // End of Single Question code

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else if ( szType.equals(^Yes/No^) ) // Yes/No Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Start of Multiple choice code
            szWriteBuffer = "      if ( szType.equals(^Multiple Choice Single Response^) ) // Multiple Choice Single Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^radio^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^checkbox^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szTblMultChName = ^tblMultChoice^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //Create table that will list multiple choice answers
               // Check if this should be a radio or checkbox.
            szWriteBuffer = "<table  cols=2 style=^^  name=^<%=szTblMultChName%>^ id=^<%=szTblMultChName%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      iTableRowCnt = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      int    lEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      String strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strTag;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerId = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strAnswerText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strQuestionChoiceID = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      zeidon.zView vtblMultChoice = new zeidon.zView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      vtblMultChoice.CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.SetCursorFirst( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC2 >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iTableRowCnt++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //szWriteBuffer = "         lEntityKey = vtblMultChoice.GetEntityKey( strSessionId, ^SurveyMultiChoiceOption^ );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strAnswerText = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^OptionText^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strQuestionChoiceID = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^ID^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         if ( szCheckType.equals(^radio^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswerId = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //szWriteBuffer = "         if ( strchkAnswer.equals( ^Y^ ) )"
            szWriteBuffer = "         if ( strchkAnswer.equals( strQuestionChoiceID ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^'  CHECKED >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^' >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "   <td style=^width:15px;^ nowrap><%=strchkAnswer%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <td nowrap><%=strAnswerText%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC2 = vtblMultChoice.SetCursorNext( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.DropView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // End of Multiple choice code

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // END OF CREATING VARIOUS QUESTIONS

            szWriteBuffer = "</div>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Does question allow a comment

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( szCommentFlag.equals(^Y^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szCommentText = " + vDialog.CtrlMapView.Name +
                 ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^RequestCommentText^, ^^, 0 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( szCommentText.equals(^^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCommentText = ^Comment^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div style=^height:24px^></div>  <!-- Spacer before comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div class=^surveyquestioncommenttext^>  <!-- div for comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<span><%=szCommentText%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</div>  <!-- End of comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div class=^surveyquestioncomment^>  <!-- div comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: MLEdit1"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String szCommentName = ^txtComment^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wComment^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<textarea name=^<%=szCommentName%>^ id=^<%=szCommentName%>^ style=^width:700px;height:94px;border:'2px solid';border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</div>  <!-- comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Question Comment


            // Spacing between questions
            szWriteBuffer = "<div class=^surveyquestionspacing^></div> <!-- spacing between survey questions -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Loop to next Question.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Loop to next Question Group.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestionGroup" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )



            // This is where we create the buttons at the bottom of the page.
            // Create Next and Prev buttons if necessary and when we are on the last page
            // create the Done button.  These assume that there are the following actions
            // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage
            szWriteBuffer = "         // This is where we create the buttons at the bottom of the page.  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Create Next and Prev buttons if necessary and when we are on the last page"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // create the Done button.  These assume that there are the following actions"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnNext' id='btnNext' value='' onclick='NEXT_SurveyPage( )'>Next-></button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnSubmit' id='btnSubmit' value='' onclick='SUBMIT_Survey( )'>Submit Survey</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   <input name=^SurveyQuestionCount^ id=^SurveyQuestionCount^ type=^hidden^ value=<%=iQuestionCount%>>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- end div for survey -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveybuttons^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnOne%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnTwo%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END  // END OF SURVEY GROUP

         // Generation of the Tab control
         IF szControlType = "Tab"

            IF  vDialog.Control.CSS_Class != ""
               szClass = "tab-pane " + vDialog.Control.CSS_Class
            ELSE
               szClass = "tab-pane"
            END

            // If we are using relative positioning, don't give the tab a height.
            IF  szNoPositioning = "Y"
               // We might not want the groupbox to have a height (so it grows)
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
            END

            // Create the parent tab control
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id=^" + szCtrlTag + "^ class=^" + szClass + "^ " + szAbsoluteStyle + "> <!-- Beginning of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //<script type="text/javascript">tp1 = new WebFXTabPane( document.getElementById( "tabPane1" ) );</script>
            szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + " = new WebFXTabPane( document.getElementById( ^" + szCtrlTag + "^ ) );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )

            // If we are using relative positioning, don't give each tab page a height.
            IF  szNoPositioning = "Y"
               szStyle = ""
            ELSE
               szStyle = "style=^height:" + szHeight + "px;^"
            END

            // Set to the ctrl subobject to loop thru the tabs on the tab control
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            OrderEntityForView( vDialog, "Control", "Type A" )

            FOR EACH vDialog.Control

               szCtrlCtrlTag = vDialog.Control.Tag

               IF  vDialog.Control.CSS_Class != ""
                  szClass = "tab-page " + vDialog.Control.CSS_Class
               ELSE
                  szClass = "tab-page "
               END

               // Currently there are three actions associated with the tab (premapoi, postmapoi and preleae) currently I can only see
               // onclick working so I am not going to worry about pre-leae yet.  Also, we are not differenciating between the
               // premapoi and postmapoi, just take the action if one of these exists.
               szActionName = ""
               FOR  EACH  vDialog.EventAct
                  IF  vDialog.Event.Type = "1" OR vDialog.Event.Type = "3"
                     szActionName = vDialog.EventAct.Tag
                     nRC = zstrcmpi( szActionName, "alt-f4" )
                     IF nRC = 0
                        szActionName = "AltF4"
                     END
                  END
               END

               szWriteBuffer = "<div id=^" + szCtrlCtrlTag + "^ class=^" + szClass + "^ " + szStyle + "> <!-- Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF  szActionName = ""
                  szWriteBuffer = "<h2 class=^tab^><span>" + vDialog.Control.Text +"</span></h2>"
               ELSE
                  szWriteBuffer = "<h2 class=^tab^><span onclick=^" + szActionName + "();^>" + vDialog.Control.Text +"</span></h2>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + ".addTabPage( document.getElementById( ^" + szCtrlCtrlTag + "^ ) );</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szIndentGroup = szIndent
               CreateViewFromView( vGroupParent, vDialog )
               //Set to ctrl subobject and generate the controls that are on this tab
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                       lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )

               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
               szWriteBuffer = "</div> <!-- End of Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

            ResetViewFromSubobject( vDialog )
            szWriteBuffer = "</div> <!-- End of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<script type=^text/javascript^>setupAllTabs();</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // End of tab control

//********************** START OF GRID ***********************************

         IF szControlType = "Grid"   // SPREADSHEET

            // For each table, we will create an export option that allows the user to
            // copy the contents of a table into excel.  The problem is that this only reflects
            // values of the table as the page is being built so if the table can be changed by
            // the user, those changes would not be seen unless the page was refreshed,  Don't create
            // this export option if "No Table Export" is a webcontrolproperty for the table.
            // Also don't create this export option if we are using absolute positioning.
            szTableExport = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table Export Option"
            IF RESULT >= zCURSOR_SET AND szNoPositioning = "Y"
               szTableExport = "Y"
            END

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            lTableRowCnt = lTableRowCnt + 1   // Set up iTableRowCnt variable suffix.
            szSuffix = lTableRowCnt
         // X_Size = vDialog.Control.SZDLG_X
         // Width = X_Size * 2
         // zIntegerToString( szWidth, 10, Width )

            //KJS 02/12/08 - We had been looping through CtrlCtrl instead of setting
            //the view to the subobject but if there is a hidden column, then
            //we don't want to count that column so we need to look at the web properties.
            SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            lColCnt = 0
            FOR EACH vDialog.Control
               SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
               //Don't count this if it is hidden.
               IF RESULT < zCURSOR_SET
                  lColCnt = lColCnt + 1
               END
            END
            ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

            //lColCnt = 0
            //FOR EACH vDialog.CtrlCtrl
            //   lColCnt = lColCnt + 1
            //END

            //KJS 7/26/07 - Previously the "cols=..." was only being added to the
            //table def if the headers were sortable.  In trying to get the absolute width
            //to work for individual columns, it seems I need this set so I am going to always
            //set "cols=...".
            szColCount = ""
            IF  lColCnt > 0
               zIntegerToString( szPosition, 10, lColCnt )
               szColCount = " cols=" + szPosition
            END

            szClass = vDialog.Control.CSS_Class
            //If there is no sorting of headers...
            IF lSort = 0
               IF szClass = ""
                  szSort = ""
               ELSE
                  szSort = "class=^" + szClass + "^"
               END
            // TraceLineS( "Table not sorted: ", vDialog.Control.Tag )
            ELSE
            //Headers are being sorted
            // TraceLineS( "Table sorted: ", vDialog.Control.Tag )
               IF szClass = ""
                  szSort = "class=^sortable^ "
               ELSE
                  szSort = "class=^sortable " + szClass + "^ "
               END
            END

            // Reset szPosition from using is above as the column count.
            szPosition = ""

            // If szNoPositioning is null then we are using absolute positioning.
            IF  szNoPositioning = ""
               // Set up "top" and "left" positions for absolute positioning.
               CreateAbsolPosStringTable( vDialog, szPosition, 0, 0 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Trying to set up a system for displaying a table's values as output so the user
               // can cut and paste this into excel.  The textarea we will create should be as wide as the grid.
               szWriteBuffer = "<div class=^tableexport^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<img src=^./images/btn_expand.gif^ name=^btmp" + szCtrlTag + "^ id=^btmp" + szCtrlTag + "^ " +
                               "onclick=^" + szCtrlTag + "ExportOnClick( )^ style=^width:16px;height:14px;^ alt=^ExportBmp^ >"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>export table data</span>"
               szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>Click here to display data for export</span>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szWriteBuffer = "<div name=^gb" + szCtrlTag + "^ id=^gb" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:70px;display:none;^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<textarea name=^o" + szCtrlTag + "^ id=^o" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:50px;border:'2px solid';border-style:'groove';^ wrap=^wrap^></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END


            // If Absolute Width is requested, add Width to szPosition.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
            IF RESULT >= zCURSOR_SET
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szPosition = szPosition + "width:" + szWidth + "px;"
               // The width in percent of the table will be the pixel width divided by 400. Multiplying by 100 gives
               // an integer value of the percent.
               //WidthPercent = (Width * 100) / 400
               //szWidth = WidthPercent
            END

            szClass = vDialog.Control.CSS_Class

            szWebCtrlType = ""
            IF vGroupParent != 0
               // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
               // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
               /*
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szWebCtrlType = "RelativePos"
               ELSE
                  szWebCtrlType = vGroupParent.Control.WebCtrlType
               END
               */
               szWebCtrlType = vGroupParent.Control.WebCtrlType
            END

            // KJS 6/19/08 - We want to add filtering on a table.  If the user chooses the web control property "Filter Rows" then
            // they need to have an attribute on the table entity called wHideTableRow.  If this attribute is set to "Y" then
            // that entity will not be displayed in the table.
            szFilterTable = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Filter Rows (wHideTableRow='Y')"
            IF RESULT >= zCURSOR_SET
               szFilterTable = "Y"
            END

            // KJS 05/06/09 - I am placing this div around the <table> being generated so that if there is a
            // WebGridNoDataMessage, I can create this message under the table lined up with the table.  Otherwise,
            // I need to save any spacing that happens before this grid.
            // KJS 12/23/15 - I am not going to do this if we are not generating with any style. Jeff's group has an outer div
            // with a css and with this div, then css doesn't work correctly. I use this in older code so keeping in.
            IF vDialog.Control.WebNoGridDataMessage != "" AND szNoPositioning != "S"
               szWriteBuffer = "<div style=^float:left^>  <!-- Div around the table, this is for the message if no data -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            szScrollingTable = ""
            //KJS 04/10/08 - Want to try and add a scrolling table with stationary headings.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrolling Table"
            IF RESULT >= zCURSOR_SET
               szScrollingTable = "Y"
               szWriteBuffer = "<div class=^tableScroll^ "
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
               // For the scrollable table we need to give the table a height.
               szPosition = szPosition + "height:" + szHeight + "px;"

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer= szWriteBuffer + " style=^position:relative;width:" + szWidth + "px;height:" + szHeight + "px;^>"
               ELSE
                  szWriteBuffer= szWriteBuffer + " style=^" + szPosition + "^>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<table name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ cellspacing=0 " + szSort + szColCount + "  >"
            ELSE

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^position:relative^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               ELSE
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^" + szPosition + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process Grid Headings, unless "NoHeadings" is requested.
            // Create a Class statement for each column in the list.
            lSubtype = vDialog.Control.Subtype
            lHeader = IsFlagSequenceSet( lSubtype, 262144 ) // zSS_HIDEROWHEADER = zCONTROL_SPECIFIC_1
            IF lHeader = 0     // NoHeader was not set
               IF lSort = 0
                  szWriteBuffer = "<thead><tr>"
               ELSE
                  // KJS 12/08/16 - Not sure why we are setting the bgcolor=green. It's causing issue when Aadit is using
                  // some other styles so taking out for now since I couldn't see a difference with grids without this.
                  //szWriteBuffer = "<thead bgcolor=green><tr>"
                  szWriteBuffer = "<thead><tr>"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0

               //Loop through each field in the grid and create the headers
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  //KJS 2/12/2008
                  SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"

                  //Don't ceate a header if this control is hidden
                  IF RESULT < zCURSOR_SET

                     IF szCtrlCtrlType = "PushBtn"  // PUSH BUTTON
                        lPushBtn = 1
                     ELSE
                        lPushBtn = 0
                     END

                     //KJS 7/26/07 - If we want "Absolute Width" for this control, we should put the
                     //width on the <th> as well as on the <td>.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested.
                     szAbsoluteWidth = ""
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szAbsoluteWidth = "width:" + szWidth + "px;"
                     END

                     // Set Grid Title either from static text or variable.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Variable Header"
                     IF RESULT >= zCURSOR_SET
                        //Yes, there is a variable header.
                        IF szWriteBuffer != "   }"
                           // The last entry was NOT a variable text, so create the "<%" statement.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                        szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                                        ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      nRC =  " + vDialog.CtrlMapView.Name +
                                     ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                        IF lMaxStringLth <= 0
                           szMaxStringLth = "254"
                        ELSE
                           szMaxStringLth = lMaxStringLth
                        END

                        szWriteBuffer = "         strErrorMapValue =  " + vDialog.CtrlMapView.Name +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^^, " + szMaxStringLth + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "          strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "    else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( strErrorMapValue.length( ) > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "%>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF  szAbsoluteWidth = ""
                           szWriteBuffer = "   <th><%=strErrorMapValue%></th>"
                        ELSE
                           szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^><%=strErrorMapValue%></th>"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "<%"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           szWriteBuffer = "      strTblOutput = strTblOutput + strErrorMapValue + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        // The Title is a constant.
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // If this is sortable and this is a pushbutton on the grid...
                        IF lSort != 0 AND lPushBtn != 0
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th class=^gridheading^>" + vDialog.Control.Text
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^ class=^gridheading^>" + vDialog.Control.Text
                           END
                        ELSE
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th"
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^"
                           END

                           //If this column is for a checkbox with no header text, we are creating a checkbox so that
                           //the user can "select all" for this column.  Because of this, we do not want this
                           //column to be able to sort.  Put on the class "gridheading" which keeps this column
                           //from sorting.
                           IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                              szWriteBuffer = szWriteBuffer + " class=^gridheading^"
                           END

                           //Put the ending on the tag and the text if there is any.
                           szWriteBuffer = szWriteBuffer + ">" + vDialog.Control.Text
                        END

                        //KJS 10/19/07 - If there is no Text and the control is a checkbox, then we want to create a
                        //checkbox in the header with an onclick to "CheckAllInGrid"
                        //Need to put class="gridheading" on <th>.
                        //I shouldn't have to do this for the variable headers (code up above) because we are only doing this
                        //if there is no header text.
                        IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                           szWriteBuffer = szWriteBuffer + "<input type=^checkbox^ onclick=^CheckAllInGrid(this,'" + vDialog.Control.Tag +"')^>"
                        ELSE
                           szWriteBuffer = szWriteBuffer + ""
                        END

                        szWriteBuffer = szWriteBuffer + "</th>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           // If this is simply a checkbox for checking values in the table then we don't want to include this
                           // in the strTblOutput string.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           IF vDialog.Control.Text != ""
                              szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.Text + "^ + ^\t^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           ELSE
                           IF vDialog.Control.Text = "" AND vDialog.ControlDef.Tag != "GridCheckCtl" AND vDialog.ControlDef.Tag != "CheckBox"
                              szWriteBuffer = "   strTblOutput = strTblOutput + ^\t^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           END
                           END
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                     END

                  END //End of checking if the current control is hidden.

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END

               END  //End of looping through each field in the grid and creating the headers.

               // If the last entry was a variable text, create the "" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr></thead>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szScrollingTable = "Y"
               // Make tbody's height 50px (this might not always be right) less than the div height.  Otherwise you get a
               // scrollbar within the scrollbar.
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits - 50 )
               szWriteBuffer = "<tbody height=^" + szHeight + "px;^>"
            ELSE
               szWriteBuffer = "<tbody>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapView EXISTS

               // szWriteBuffer = "   zeidon.zView " + vDialog.CtrlMapView.Name + " = new zeidon.zView( strSessionId );"
               // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               szWriteBuffer = "   iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC > 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      int    lEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strButtonName;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strOdd;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strTag;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF szFilterTable = "Y"
                  szWriteBuffer = "      String strFilter;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               //szWriteBuffer = "      iTableRowCnt = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls

               // Create a work variable for each column in the list.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl"
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + ";"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // Checkboxes need the extra work value.
                        szWriteBuffer = "      String str" + vDialog.Control.Tag + "Value;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END
                  END

                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "      String str" + szListCtrlTag + "ErrorColor;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // KJS 05/06/09 - First Occurrence Only is when the user wants to show only the first occurrence of a value in
                  // a table column.  We need to keep track of the last value for the column so we need to create a variable to
                  // hold the last value.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                  IF RESULT >= zCURSOR_SET
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "LV = ^^;  // Last value of this column "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // If the Grid entry requests URL Mapping, generate the variable definition here.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                  IF RESULT >= zCURSOR_SET
                     // Define variable for URL Mapping.
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "_URL;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid
               szWriteBuffer = "      "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 5/1/08 - Jeff is a pain in the butt so I need to add this code.
               // We are creating a temporary view to the table view so that when we loop through the
               // entities to create this grid, we do not lose the original entity position.
               // If you have several grids on one page mapped to the same entity path, when one grid was
               // being painted, that messed up the position of the other grids.
               szGridView = "v" + vDialog.Control.Tag
               szGridOrigViewName = vDialog.CtrlMapView.Name

               szWriteBuffer = "      zeidon.zView " + szGridView + " = new zeidon.zView( strSessionId );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + ".CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      nRC2 = " + szGridView +
                                  ".SetCursorFirst( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                                  "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "      nRC2 = " + szGridView +
                                  ".SetCursorScopeOI( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^, 1 ); // first" // zPOS_FIRST
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC2 >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Create an "IF" statement to filter rows if one of the web control properties was "Filter Rows"
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         strFilter = " + szGridView +
                               ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^wHideTableRow^, ^^, 1 );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  szWriteBuffer = "         // If the attribute wHideTableRow is null then we want to show this row."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( strFilter.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

               //szWriteBuffer = "         strOdd = (iTableRowCnt" + szSuffix + " % 2) != 0 ? ^ class='odd'^ : ^^;"
               szWriteBuffer = "         strOdd = (iTableRowCnt % 2) != 0 ? ^ class='odd'^ : ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "         iTableRowCnt" + szSuffix + "++;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix" + szSuffix + " = Integer.toString( iTableRowCnt" + szSuffix + " );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         lEntityKey = " + szGridView +
                               ".GetEntityKey( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strButtonName = ^SelectButton^ + strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process the subcontrols for mapping.
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            // szIndentGroup = szIndent + "   "

               // Get the mapping attributes for each column in the table.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szJustify = ""
                  lSubtype = vDialog.Control.Subtype
                  lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_CENTERJUSTIFY )
                  IF lTemp != 0
                     szJustify = " align=^center^"
                  ELSE
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_RIGHTJUSTIFY )
                     IF lTemp != 0
                        szJustify = " align=^right^"
                     END
                  END

                  // Position on display mapping value, which is CtrlMap named "Displayed Text" or unnamed CtrlMap.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                                WHERE vDialog.CtrlMap.Tag = ""
                  END

                  // Grid Control Mapping
                  // We don't generate mapping for Push Button or if there wasn't mapping.
                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "BitmapBtn" AND
                     szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl" AND
                     RESULT >= zCURSOR_SET
                     // Regular text

                     szListCtrlTag = vDialog.Control.Tag
                     szControlTag = "str" + szListCtrlTag
                     szWriteBuffer = "         " + szControlTag + " = ^^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     //IF RESULT >= zCURSOR_SET OR vDialog.Control.WebCtrlType = "Edit"
                     IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                        lEditBox = 1
                        szWriteBuffer = "         " + szControlTag + "ErrorColor = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        lEditBox = 0
                     END

                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "         nRC = " + szGridView +
                                  ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF lEditBox = 1

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strTag = ^" + szListCtrlTag + "::^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strErrorMapValue = vAppSubtask.CheckError( strSessionId, strTag, strErrorTitle );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( strErrorMapValue.length( ) > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "ErrorColor = ^ style='color: red'^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + " = strErrorMapValue;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                        IF lMaxStringLth <= 0
                           szMaxStringLth = "254"
                        ELSE
                           szMaxStringLth = lMaxStringLth
                        END

                        szWriteBuffer = "               " + szControlTag + " = " + szGridView +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"

                     ELSE

                        lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                        IF lMaxStringLth <= 0
                           szMaxStringLth = "254"
                        ELSE
                           szMaxStringLth = lMaxStringLth
                        END

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, strDateFormat, " + szMaxStringLth + " );"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                        END
                     END
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     // KJS 05/06/09 - Check if the user wants this column to show only the first occurrence of the column value.
                     // All other occurrences of a value are null.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                     IF RESULT >= zCURSOR_SET
                           szWriteBuffer = "            // Only show the first occurrence of this column value."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( " + szControlTag + ".equals(" + szControlTag + "LV" + ") )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + " = ^^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // If the value of the checkbox for not being checked is anything but null, the
                        // .length( ) wouldn't work properly.  All checkboxes would be checked.  Changing this...
                        szWriteBuffer = "         if ( " + szControlTag + ".equals( ^" + vDialog.Control.RadioOrCheckboxValue + "^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        IF szTableExport = "Y"
                           // KJS 09/29/10 - for table output
                           szWriteBuffer = "         strTblOutput = strTblOutput + " + szControlTag + " + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         if ( " + szControlTag + ".length( ) == 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"

                        //KJS 10/19/07 - We want to add "title" to controls and should I add class here as well?

                        //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                        szTitleHTML = ""
                        szTitle = vDialog.Control.DIL_Text
                        IF szTitle != ""
                           szTitleHTML = " title='" + szTitle + "' "
                        END

                        //KJS 7/26/07 - Added disabled option for the checkbox.
                        CreateDisabledString( vDialog, szDisabled )

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 11/16/10 - adding an action to the checkbox inside a grid. Currently the GridCheckbox
                        // doesn't allow an action but we can copy in a normal checkbox which has an action.
                        IF vDialog.EventAct EXISTS
                           szText = " onclick='" + vDialog.EventAct.Tag + "( this.id )'"
                        ELSE
                           szText = ""
                        END

                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox'  CHECKED " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        //szWriteBuffer = "            " + szControlTag + " = ^<input name='^ + " + szControlTag +
                        //                "Value + ^' value='Y' type='checkbox' CHECKED " + szDisabled + szTitleHTML + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is checked so put in the checked value.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.RadioOrCheckboxValue + "^ + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox' " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is not checked (there is no value) so just add the tab.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y" OR szCtrlCtrlType = "Calendar" OR
                           szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                           szWriteBuffer = "            " + szControlTag + " = ^^;"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = ^&nbsp^;"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // If the Grid entry requests URL Mapping, generate the code here.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                     IF RESULT >= zCURSOR_SET
                        szControlTag = "str" + vDialog.Control.Tag + "_URL"
                        szWriteBuffer = "         " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         nRC = " + szGridView +
                                     ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                        IF lMaxStringLth <= 0
                           szMaxStringLth = "254"
                        ELSE
                           szMaxStringLth = lMaxStringLth
                        END

                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END
                        szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                        ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                        "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid
            // szWriteBuffer = "         strEntityID = " + szGridView +
            //                 ".GetString( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^, ^ID^ );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Create the table entries with values.
               szWriteBuffer = "<tr<%=strOdd%>>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0
               FOR EACH vDialog.Control   // Loop to create table columns.

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // Set up "<td" constant with optional Class.
                  // !!! KJS 01/16/09

                  // KJS 01/16/09 - I am putting in "WRAP" as a Web Control Property because I think it's confusing
                  // to have the Wrap option on a different screen (under "Common" button).  I would think you would
                  // choose, "Absolute Width" and then choose "WRAP" if you want your field to wrap.  Should I instead
                  // have a web property of "Absolute Width Wrap"??  so you only have to add one property instead of
                  // two?
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "WRAP"
                  IF RESULT >= zCURSOR_SET
                     szItemTableHeader = "<td"
                  ELSE
                     // Under the "Common" button there is a checkbox for "Wrap".  Need to check this as well as
                     // the webcontrol property.
                     IF vDialog.Control.WebWrap = "Y"
                        szItemTableHeader = "<td"
                     ELSE
                        szItemTableHeader = "<td nowrap"
                     END

                  END

                  CreateDisabledString( vDialog, szDisabled )

                  // The id attribute is a unique identification for an HTML element.
                  // The id attribute is often used with CSS or JavaScript (using the HTML DOM)
                  // to style or change the HTML element with the specified unique id.
                  // The id must be unique within the HTML document, this means that you can only
                  // use the id once on a page, but re-use it on another page.
                  //
                  // Naming rules:
                  //  - Must begin with a letter A-Z or a-z
                  //  - Can be followed by: letters (A-Za-z), digits (0-9), hyphens ("-"),
                  //    underscores ("_"), colons (":"), and periods (".")
                  //  - Values are case-sensitive
                  //
                  // dks 2008.12.10 - Because of the above statements regarding valid id's for HTML
                  // elements, I believe the following Hidden generation should produce invalid HTML.

                  //KJS 2/12/2008 - If this control is a hidden control, then we do not care what other web controls
                  //properties there might be.  Create this as a hidden field. This does not have <td> tags.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
                  IF RESULT >= zCURSOR_SET
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "<input type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ " +
                                            "name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^>"

                  ELSE
                     //Not a hidden control.

                     //KJS 7/25/07 - Look for values in the WebControlProperties.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Multiline"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Multiline = "Y"
                     ELSE
                        szWCP_Multiline = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "EmailAddress"
                     IF RESULT >= zCURSOR_SET
                        szWCP_EmailAddress = "Y"
                     ELSE
                        szWCP_EmailAddress = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested, add Width to szItemTableHeader.
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                     END

                     //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                     szTitleHTML = ""
                     szTitle = vDialog.Control.DIL_Text
                     IF szTitle != ""
                        szTitleHTML = " title=^" + szTitle + "^ "
                     END

                     szClass = vDialog.Control.CSS_Class
                     IF szClass != "" AND szCtrlCtrlType != "PushBtn"  // Don't add Class here for Push Button.
                        szItemTableHeader = szItemTableHeader + " class=^" + szClass + "^"
                     END

                     //KJS 10/19/07 - Added title
                     IF szTitle != "" AND szCtrlCtrlType != "PushBtn"  // Don't add title here for Push Button.
                        szItemTableHeader = szItemTableHeader + szTitleHTML
                     END

                     IF szCtrlCtrlType = "PushBtn"
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // Push Button
                        szActionName = ""
                        IF vDialog.EventAct EXISTS
                           szActionName = vDialog.EventAct.Tag
                        END

                        // Set Class as either null or with Class value.
                        IF vDialog.Control.CSS_Class = ""
                           szClass = ""
                        ELSE
                           szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
                        END

                        //KJS 7/26/07 - Added DISABLED option.
                        //KJS 10/19/07 - Added title

                        // KJS 06/22/09 - I am noticing that there is no width for a push button
                        // in a grid.  I'm thinking there should be so I am going to get the
                        // width here (buttons don't have a WebControlProperty of Absolute Width).
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szStyle = " style=^width:" + szWidth + "px;^ "

                     // szWriteBuffer = "   " + szItemTableHeader + "><input type=^submit^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                     //                 "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ value=^" + vDialog.Control.Text + "^" + szDisabled + "></td>"
                        szWriteBuffer = "   " + szItemTableHeader + "><button type=^button^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                                        "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        vDialog.Control.Text + "</button></td>"
                     ELSE
                        szListCtrlTag = vDialog.Control.Tag

                        // If Title is variable mapping, only create entries for columns with titles.
                        CreateViewFromView( vDialog2, vDialog )
                     // SET CURSOR NEXT vDialog2.CtrlMap WHERE vDialog2.CtrlMap.Tag = "Variable Header"
                     // IF RESULT >= zCURSOR_SET AND vDialog2.CtrlMapLOD_Attribute EXISTS
                     //    szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                     //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // ELSE
                        IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"

                           //IF szWCP_AbsoluteWidth = "Y"
                              PIX_PER_DU( vDialog, dDLUnits )
                              zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                              //szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                           //END

                           //szViewName = vDialog.CtrlMapView.Name
                           szViewName = szGridView
                           szMapEntityName = vDialog.CtrlMapRelatedEntity.Name
                           szMapAttributeName = vDialog.CtrlMapER_Attribute.Name

                           szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                           IF vDialog.Event EXISTS
                              IF vDialog.Event.Type = 1
                                 szSelectAction   = "onchange"
                                 szSelectFunction = "OnChange"
                              ELSE
                                 szSelectAction   = "onblur"
                                 szSelectFunction = "OnBlur"
                              END
                           ELSE
                              szSelectAction   = "onchange"
                              szSelectFunction = "OnChange"
                           END

                           //Can be a domain combo box or a table combo box
                           lSubtype = vDialog.Control.Subtype
                           nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                           IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                              //Domain combo box

                           // szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                           // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              //KELLY - Do I need to add DISABLED here?

                              //032609

                              IF szClass = ""
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," +
                                                szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              END

                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"

                              // This view should be the same as the view we are getting for the grid so we don't need to retrieve
                              // it again.  Set nRC = 1 so that we go into the IF statement (should really take that out).
                              szWriteBuffer = "      nRC = 1;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      if ( nRC > 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         int    nRowCnt= 0;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         Vector ComboVector;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                              IF lMaxStringLth <= 0
                                 szMaxStringLth = "254"
                              ELSE
                                 szMaxStringLth = lMaxStringLth
                              END
/***** 04/26/11 */
                              szWriteBuffer = "         nRC = " + szViewName +
                                       ".CheckExistenceOfEntity( strSessionId, ^" +
                                       szMapEntityName + "^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( nRC >= 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
/*****/
                              szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".GetStringFromAttributeByContext( strSessionId, ^" + szMapEntityName + "^, ^" +
                                              szMapAttributeName + "^, ^^, " + szMaxStringLth + " );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         ComboVector = " + szViewName + ".GetTableListForAttribute( strSessionId, ^" + szMapEntityName + "^, ^" + szMapAttributeName + "^, ^^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         nRowCnt = (int) ComboVector.size( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         int k;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         int nFirst;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( nRowCnt > 0 ) "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              IF vDialog.CtrlMapER_Attribute.NotNull = "Y"
                                 // Generate code when attribute IS required.
                                 szWriteBuffer = "            // Code for required attribute, which doesn't allow a blank entry."
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            nFirst = (ComboVector.elementAt( 0 ) == ^^) ? 1 : 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              ELSE
                                 // Generate code when attribute is NOT required.
                                 szWriteBuffer = "            // Code for NOT required attribute, which makes sure a blank entry exists."
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( ComboVector.elementAt( 0 ) != ^^ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               if ( strComboCurrentValue == ^^ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  <option selected=^selected^ value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  <option value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 szWriteBuffer = "            nFirst = 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              END

                              szWriteBuffer = "            for ( k = nFirst; k < nRowCnt; k++ )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               strErrorMapValue = (String) ComboVector.elementAt( k );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               if ( strErrorMapValue.length( ) != 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  if ( strComboCurrentValue.equals( strErrorMapValue ) )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                     <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  else"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                     <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      } //if ( nRowCnt > 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           // szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           ELSE

                              // Select type combo box
                              CreateViewFromViewForTask( vList, vDialog, 0 )
                              SET CURSOR NEXT vList.CtrlMap
                              CreateViewFromViewForTask( vEntity, vList, 0 )
                              SET CURSOR NEXT vEntity.CtrlMap
                              CreateViewFromViewForTask( vScope, vEntity, 0 )
                              SET CURSOR NEXT vScope.CtrlMap

                              // The Select Action is either onblur or onchange depending on the following.
                              // 1. If no Action, use onchange because this allows using keystrokes in the control.
                              // 2. If Action is SelectChange, use onchange.
                              // 3. If Action is SelectEnd, use onfocusout.
                              IF vDialog.Event EXISTS
                                 IF vDialog.Event.Type = 1
                                    szSelectAction   = "onchange"
                                    szSelectFunction = "OnChange"
                                 ELSE
                                    szSelectAction   = "onblur"
                                    szSelectFunction = "OnBlur"
                                 END
                              ELSE
                                 szSelectAction = "onchange"
                                 szSelectFunction = "OnChange"
                              END


                              szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                              IF szClass = ""
                              // szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " +
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," +
                                                szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              END
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              IF vDialog.CtrlMapView EXISTS
                                 szWriteBuffer = "   nRC = " + vList.CtrlMapView.Name +
                                                 ".GetView( strSessionId, ^" + vList.CtrlMapView.Name + "^, vAppSubtask );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   if ( nRC > 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         strComboCurrentValue = ^^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      zeidon.zView v" + szListCtrlTag + " = new zeidon.zView( strSessionId );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // If mapping is specified, set up the value to be used in selecting
                                 // the correct entry.
                                 IF vDialog.CtrlMapLOD_Attribute EXISTS
                                    IF vDialog.CtrlMapView.Name = szGridOrigViewName
                                       szWriteBuffer = "      nRC = 1;"
                                       szViewName = szGridView
                                    ELSE
                                       szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                                                       ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name +
                                                       "^, vAppSubtask );"
                                       szViewName = vDialog.CtrlMapView.Name
                                    END
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( nRC > 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         nRC = " + szViewName + ".CheckExistenceOfEntity( strSessionId, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                                    IF lMaxStringLth <= 0
                                       szMaxStringLth = "254"
                                    ELSE
                                       szMaxStringLth = lMaxStringLth
                                    END

                                    szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".GetStringFromAttributeByContext( strSessionId, ^" +
                                             vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                                             vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                 ELSE
                                    szWriteBuffer = "      strComboCurrentValue = ^^;"
                                 END
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // See if a list entity has been specified, and if so, use it.
                                 IF vEntity.CtrlMapLOD_Entity EXISTS
                                    szListEntityName = vEntity.CtrlMapLOD_Entity.Name
                                 ELSE
                                    szListEntityName = vList.CtrlMapRelatedEntity.Name
                                 END

                                 // See if a scoping entity has been specified, and if so, use it.
                                 lSubtype = vDialog.Control.Subtype
                                 lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
                                 IF lSubtype = 0
                                    IF vScope.CtrlMapLOD_Entity EXISTS
                                       szScopingEntityName = vScope.CtrlMapLOD_Entity.Name
                                    ELSE
                                       szScopingEntityName = ""
                                    END
                                 END

                                 szWriteBuffer = "      v" + szListCtrlTag + ".CreateViewFromView( strSessionId, " + vList.CtrlMapView.Name + " );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      ComboCount = 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      strComboSelectedValue = ^0^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // Auto Include
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    szWriteBuffer = ""
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      // For Auto Include, process null entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      ComboCount++;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( strComboCurrentValue == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option selected=^selected^ value=^^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option value=^^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 END

                                 IF lSubtype = 0
                                    szWriteBuffer = "      nRC = v" + szListCtrlTag + ".SetCursorFirst( strSessionId, ^" +
                                                                 szListEntityName + "^, ^" + szScopingEntityName + "^ );"
                                 ELSE
                                    szWriteBuffer = "      nRC = v" + szListCtrlTag + ".SetCursorScopeOI( strSessionId, ^" + szListEntityName + "^, 1 ); // first" // zPOS_FIRST
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      while ( nRC >= 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vList.CtrlMapLOD_Attribute EXISTS
                                    IF vList.CtrlMapContext EXISTS
                                       szContextName = vList.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    lMaxStringLth = vList.CtrlMapER_Domain.MaxStringLth
                                    IF lMaxStringLth <= 0
                                       szMaxStringLth = "254"
                                    ELSE
                                       szMaxStringLth = lMaxStringLth
                                    END

                                    szWriteBuffer = "         strErrorMapValue = v" + szListCtrlTag +
                                                    ".GetStringFromAttributeByContext( strSessionId, ^" +
                                                    vList.CtrlMapRelatedEntity.Name + "^, ^" +
                                                    vList.CtrlMapER_Attribute.Name + "^, ^" +
                                                    szContextName + "^, " + szMaxStringLth + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 szWriteBuffer = "         ComboCount++;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF lSubtype = 0
                                    szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                                                    ".SetCursorNext( strSessionId, ^" + szListEntityName +
                                                    "^, ^" + szScopingEntityName + "^ );"
                                 ELSE
                                    szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                                                    ".SetCursorScopeOI( strSessionId, ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 DropView( vList )
                                 DropView( vEntity )
                                 DropView( vScope )
                              END

                              szWriteBuffer = "      }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              szWriteBuffer = "      v" + szListCtrlTag + ".DropView( strSessionId );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "   }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           END  //IF vDialog.Control.Subtype < 12000 (domain combobox)
                           szWriteBuffer = "   </td>"

                        ELSE
                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "   " + szItemTableHeader + ">"
                           //KJS 7/26/07 - Added DISABLED option.
                           szWriteBuffer = szWriteBuffer + "<input name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ "
                           szWriteBuffer = szWriteBuffer + "style=^width:80px^ type=^text^" + szDisabled + " value=^<%=str" + szListCtrlTag + "%>^ />"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              <img src=^images/scw.gif^  name=^" + szListCtrlTag + "Img::<%=strEntityKey%>^ id=^" + szListCtrlTag + "Img::<%=strEntityKey%>^ title=^Select Date^ alt=^Select Date^ " + szDisabled + " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              onclick=^scwShow( document.getElementById( '" + szListCtrlTag + "::<%=strEntityKey%>' ), this );^ /></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                           X_Size = vDialog.Control.SZDLG_X
                           Size = X_Size / 3
                           zIntegerToString( szSize, 10, Size )
                           //KJS 7/26/07 - Added DISABLED option.
                           //KJS 10/19/07 - Added title
                           szWriteBuffer = "   " + szItemTableHeader + "><input size=^" + szSize + "^ value=^<%=str" + szListCtrlTag + "%>^<%=str" + szListCtrlTag +
                                                  "ErrorColor%> name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szTitleHTML + szDisabled + "></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Multiline" OR szWCP_Multiline = "Y"
                           // KJS 09/26/2008 - Taking out the <pre> because it makes the grid too large (can't do a "WRAP" on the
                           // <td>.  I don't think in a grid that we would want that.
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        // szWriteBuffer = "   " + szItemTableHeader + "><pre><%=str" + szListCtrlTag + "%></pre></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "EmailAddress" OR szWCP_EmailAddress = "Y"
                           szWriteBuffer = "   " + szItemTableHeader + " class=^Email^><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                        //KJS 11/18/2007 - Adding Bitmap as a grid control
                        IF szCtrlCtrlType = "Bitmap"

                           szText = ""
                           IF vDialog.Control.Text != ""
                              szText = " alt=^" + vDialog.Control.Text + "^ "
                           END
                           IF vDialog.EventAct EXISTS
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ^onclick=^" +
                                              vDialog.EventAct.Tag + "( this.id )^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" +
                                              vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           END
                        ELSE
                        //DKS 02/01/2008 - Adding BitmapBtn as a grid control
                        IF szCtrlCtrlType = "BitmapBtn"

                           IF vDialog.Control.Text != ""
                              szText = "alt=^" + vDialog.Control.Text + "^"
                           ELSE
                              szText = ""
                           END

                           IF vDialog.EventAct EXISTS
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ onclick=^" + vDialog.EventAct.Tag +
                                                 "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + " /></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^  name=^" + szListCtrlTag +
                                                 "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + " /></a></td>"
                           END

                        ELSE
                        IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                           // KJS 11/16/10 - I needed to add this because if I copy a CheckBox into a grid that
                           // has an EventAct (action) then previously it was creating an <a href.  GridCheckCtl
                           // does not have EventActs but normal Checkboxes do..
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                           IF vDialog.EventAct EXISTS
                              // Right now the only EventAct on a regular grid subcontrol is HotText (now there is Bitmap and BitmapBtn)
                              // Process HotText Action the same as for the Text Control.
                              // KJS 11/16/10 - A normal checkbox copied into a grid can have an EventAct.
                              //KJS 10/19/07 - added title
                              IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
                                 // For a Hyperlink in a Grid, we assume there is ALWAYS both "Displayed Text" mapping and
                                 // "Hyperlink URL" mapping, which have been set above.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^<%=str" + szListCtrlTag + "_URL%>^ " + szTitleHTML + " target=^_blank^><%=str" + szListCtrlTag + "%></a></td>"
                              ELSE
                                 // This is HotText mapping to an Action.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ onclick=^" + vDialog.EventAct.Tag + "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^" + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              END
                           ELSE
                              // Regular default Grid subcontrol.
                              szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                           END
                        END // szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        END // szCtrlCtrlType = "BitmapBtn"
                        END // szCtrlCtrlType = "Bitmap"
                        END // WebCtrlType = "EmailAddress"
                        END // WebCtrlType = "Multiline"
                        END // WebCtrlType = "Edit"
                        END // szCtrlCtrlType = "Calendar"
                        END // szCtrlCtrlType = "ComboBox"
                        //END
                        DropView( vDialog2 )
                     END // End ELSE of PushButton
                  END // End ELSE of checking if this is a hidden field
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END  // Loop to create table columns.

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               // If the last entry was a variable text, create the "<%" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //If on this table we are filtering rows, we need to add the closing bracket for the "if ( strFilter.length == 0 ) statement
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               IF lSubtypeX = 0
                  szWriteBuffer = "         nRC2 = " + szGridView +
                                  ".SetCursorNext( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                                  "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "         nRC2 = " + szGridView +
                                  ".SetCursorScopeOI( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^,  3 ); // next" // zPOS_NEXT
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC2 = " + szGridView + ".DropView( strSessionId );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Put ending div for the scrollable table with stationary headings
            IF  szScrollingTable = "Y"
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Hidden text area that will hold table values as output.  I have two of these because I am assuming the
               // user would want to see the output in a text area above the table but because we build the output string as we
               // build the table, then we need to store this value after the table.  We will copy the values from this table
               // to the text area created above.  Or could I simply build javascript code here that would copy strTblOutput to
               // the correct textarea?
               szWriteBuffer = "<textarea name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ style=^display:none;^ ><%=strTblOutput%></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<script type=^text/javascript^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "document.getElementById(^o"+ szCtrlTag + "^).value = document.getElementById(^h"+ szCtrlTag + "^).value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            // If the user has entered a WebGridNoDataMessage for this grid, then create
            // code to check if there was no data and if so, display this message to the
            // user in a <span>.
            // I believe I would need to know if there is a spacer in front of the grid, if
            // so, then I would assume I would put that spacer in front of this message
            // as well.
            // What if I put this message as part of the table?  Do a colspan and then
            // put this message in?  But then I wouldn't have the class.
            IF vDialog.Control.WebNoGridDataMessage != ""

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( iTableRowCnt == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF vDialog.Control.WebNoGridDataMsgClass = ""
                  szWriteBuffer = "<span style=^^>" + vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "<span class=^" + vDialog.Control.WebNoGridDataMsgClass + "^ style=^^>" +
                                   vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 05/06/09 - I am putting a div with style float:left around the tables so that if there
               // is a message to display if the table has no data, then this message will line up with the
               // table.  Not sure if placing this div will affect how the tables are painted but I hope not.
               IF  szNoPositioning != "S"
                  szWriteBuffer = "</div>  <!-- End of div around table -->"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

         END  // IF szControlType = "Grid"

//********************** END OF GRID ***********************************

         IF szControlType = "MLEdit"  // MLEDIT
            SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
            IF RESULT >= zCURSOR_SET
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   strErrorMapValue = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                               vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC <= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name + ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szContextName = ""
               IF vDialog.CtrlMapContext EXISTS
                  szContextName = vDialog.CtrlMapContext.Name
               END

               lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
               IF lMaxStringLth <= 0
                  szMaxStringLth = "254"
               ELSE
                  szMaxStringLth = lMaxStringLth
               END

               szWriteBuffer = "         strErrorMapValue = " +
                               vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^, " + szMaxStringLth + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
               szWriteBuffer = "         if ( strErrorMapValue == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            strErrorMapValue = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"

               lStyleX = vDialog.Control.ExtendedStyle
               lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
               IF lTemp != 0
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               X_Size = vDialog.Control.SZDLG_X
               Size = X_Size / 4
               zIntegerToString( szSize, 10, Size )
               Y_Size = vDialog.Control.SZDLG_Y
               Size = Y_Size / 12
               zIntegerToString( szHeight, 10, Size )

               IF vDialog.Control.VisibleBorder = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "border:'4px solid';border-style:'groove';", "style=", "^" )
               ELSE
                  zAppendQuotedString( szAbsoluteStyle, "border:'2px solid';border-style:'groove';", "style=", "^" )
               END

               SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
               IF RESULT >= zCURSOR_SET
                  szTinyMCEFlag = "Y"
               END

               IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

                  szClass = vDialog.Control.CSS_Class
                  IF szClass = ""
                     szClass = "mceSimple"  // "mceSimple" is TinyMCE default
                  END

                  nRC = zSearchSubString( szClass, "mceSimpleZeidon", "f", 0 )
                  IF nRC >= 0
                     szWriteBuffer = "<div style=^background-color:#eec;border:1px solid #011;width:" + szSize + "px;height:" + szHeight + "px;position:absolute;left:0px;top:0px;^>"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "<div class=^" + szClass + "^ " + szTitleHTML + " style=^width:" + szSize + "px;height:" + szHeight + "px;position:absolute;left:0px;top:0px;^><%=strErrorMapValue%></div></div>"
                  ELSE
                     szWriteBuffer = "<textarea name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ class=^" + szClass + "^ " + szTitleHTML +
                                     szAbsoluteStyle + ">" + "<%=strErrorMapValue%></textarea>"
                  END
               ELSE
                  szClass = ""
                  szClass = vDialog.Control.CSS_Class
                  CreateTabIndexString( vDialog, szTabIndex )
                  szWriteBuffer = "<textarea name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szTitleHTML +
                                  "class=^" + szClass + "^ " + szAbsoluteStyle + szTabIndex + " wrap=^wrap^>" +
                                  "<%=strErrorMapValue%></textarea>"

               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END   //IF szControlType = "MLEdit"
      END
   END // FOR EACH

   // I am creating a div for every new y position.  Need to close this.  This will not be correct if there are no controls.
   // If szFirstTimeThrough = "Y", that means we were on a groupbox that doesn't have any controls inside it.  If that's true,
   // we didn't create the beginning <div so don't create the closing div.
   // Only do this if we are positioning with relative positioning.
   IF  szNoPositioning = "Y"
      IF szFirstTimeThrough = ""
         szWriteBuffer = "</div>  <!-- End of a new line -->"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // szIndent = szIndentHold
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_InputMapRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_InputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                       STRING ( 32 )    ViewName,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       INTEGER          lTableRowCnt )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vDialog3 BASED ON LOD TZWDLGSO
   STRING ( 32 ) szContextName
   STRING ( 32 ) szScopingEntityName
   STRING ( 32 ) szListMappingEntityName
   STRING ( 50 ) szViewName
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlCtrlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szCheckBoxValue
   STRING ( 1 )  szFlag
   STRING ( 2 )  szSuffix
   STRING ( 10 ) szMaxStringLth
   STRING ( 1 )  szWCP_Edit
   STRING ( 1 )  szhFlag
   STRING ( 1 )  szXSSEncode
   STRING ( 1 )  szSurveyGroupFlag
   INTEGER       lEditBox
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lTemp
   INTEGER       lMaxStringLth
   SHORT         nViewNameLth
   SHORT         bResetToPlaceHolder
   SHORT         nRC
   TraceLineS("*** DoInputMapping for view *** ",ViewName)

   // Handle mapping for the named view (ViewName) that was passed in.
   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.  // not true!!!! // dks 2008.04.04
   FOR EACH vDialog.Control
      szControlType = vDialog.ControlDef.Tag
      TraceLineS("*** DoInputMapping looping through controls *** ",szControlType)

      // To prevent cross-scripting attacks, we will run what was entered in the editbox field through some code that will
      // convert certain characters so that they are not html compatible (like "<" to "&lt;").  This is only for edit fields
      // where this is specified with XSS control property.
      szXSSEncode = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "XSS Encode"
      IF RESULT >= zCURSOR_SET
         szXSSEncode = "Y"
      END

      szSurveyGroupFlag = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
      IF RESULT >= zCURSOR_SET
         szSurveyGroupFlag = "Y"
      END

      lSubtype = vDialog.Control.Subtype
      lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
      IF lTemp != 0
         // Disabled entries are skipped.
      ELSE
         szCtrlTag = vDialog.Control.Tag
         // On 6/25/07, DonC eliminated the code that kept hidden fields from being mapped on input. Thus, hidden
         // fields are being mapped on both output and input.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
                    WHERE vDialog.CtrlMapView.Name = ViewName
         IF RESULT >= zCURSOR_SET //AND vDialog.Control.WebCtrlType != "Hidden"

            szControlType = vDialog.ControlDef.Tag
            IF szControlType = "Text"     OR
               szControlType = "EditBox"  OR
               szControlType = "ComboBox"

               szFlag = "8"   // SetAttribute.. will be by default Context.
            ELSE
               szFlag = "0"   // SetAttribute.. will NOT be by default Context.
            END

            IF szControlType = "EditBox"  OR
               szControlType = "CheckBox" OR
               szControlType = "MLEdit"   OR
               szControlType = "RadioGrp"

               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  IF vDialog.CtrlMapContext EXISTS
                     szContextName = vDialog.CtrlMapContext.Name
                     //If the user specifies a context name then we will use this
                     //and not the default context.
                     szFlag = "0"
                  ELSE
                     szContextName = ""
                  END

                  szViewName = vDialog.CtrlMapView.Name
                  nViewNameLth = zstrlen( szViewName )

                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName +
                                                  ".CheckExistenceOfEntity( strSID, ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  IF szControlType = "EditBox" AND szXSSEncode = "Y"
                     szWriteBuffer = "         strMapValue = ReplaceXSSValues( strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
                  szWriteBuffer = "         nRC = " + szViewName +
                                                  ".SetAttributeFromVariable( strSID, ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name +
                                                  "^, ^" +
                                                  vDialog.CtrlMapER_Attribute.Name + "^,"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  zReplicate( " ", nViewNameLth, szWriteBuffer, 32 )
                  szWriteBuffer = szWriteBuffer +
                                  "                                          strMapValue, 'S', 0, " +
                                  "^" + szContextName + "^, " + szFlag + " );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( nRC < 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = nRC;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            strError += ^" + szCtrlTag +
                                  "^ + ^\t^ + strMapValue + ^\t^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               END
            ELSE
            IF szControlType = "ComboBox"

               nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
               IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                  // This is currently the same as Editbox above.
                  SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                  IF RESULT >= zCURSOR_SET
                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                        //If the user specifies a context name then we will use this
                        //and not the default context.
                        szFlag = "0"
                     ELSE
                        szContextName = ""
                     END

                     szViewName = vDialog.CtrlMapView.Name
                     nViewNameLth = zstrlen( szViewName )

                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      nRC = " + szViewName +
                                                  ".CheckExistenceOfEntity( strSID, ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( ^h" +
                                     szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     szWriteBuffer = "         // If "
                     szWriteBuffer = "         if ( strMapValue != null )"
                     szWriteBuffer = "         {"
                     szWriteBuffer = "         }"  // Kelly ... purpose of these lines???

                     szWriteBuffer = "         nRC = " + szViewName +
                                                     ".SetAttributeFromVariable( strSID, ^" +
                                                     vDialog.CtrlMapRelatedEntity.Name +
                                                     "^, ^" +
                                                     vDialog.CtrlMapER_Attribute.Name + "^,"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     zReplicate( " ", nViewNameLth, szWriteBuffer, 32 )
                     szWriteBuffer = szWriteBuffer +
                                     "                                          strMapValue, 'S', 0, " +
                                     "^" + szContextName + "^, " + szFlag + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC < 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = nRC;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            strError += ^" + szCtrlTag +
                                     "^ + ^\t^ + strMapValue + ^\t^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  END
               ELSE
                  // Combobox with Auto Include or Set Position Only
                  // Note that this code is not executed if the view being
                  // passed is for the list mapping, instead of the edit
                  // mapping. Otherwise, the code would be generated twice,
                  // once when this routine is called for the edit view and
                  // once for the list view.
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR PREVIOUS vDialog2.CtrlMap
                  IF RESULT < zCURSOR_SET
                     // We were positioned on the first CtrlMap, which means we
                     // were being called for the edit view.
                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // Position on second CtrlMap, which is for list mapping Attribute.
                     SET CURSOR NEXT vDialog2.CtrlMap

                     // Position on third CtrlMap, which is for list mapping Entity.
                     // If it is null, the list mapping entity is from the prior CtrlMap.
                     CreateViewFromView( vDialog3, vDialog2 )
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                     END

                     // Position on fourth CtrlMap, which is for scoping Entity.
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog3 )

                     IF vDialog2.CtrlMapView EXISTS
                        szWriteBuffer = "      nRC = " + vDialog2.CtrlMapView.Name +
                                        ".GetView( strSID, ^" + vDialog2.CtrlMapView.Name + "^, vAS );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         strMapValue = request.getParameter( ^h" + szCtrlTag + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( strMapValue != null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            nRelPos = java.lang.Integer.parseInt( strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // For Auto Include, we must decrement nRelPos for blank entry.
                           szWriteBuffer = "            nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "            nRC = " + vDialog2.CtrlMapView.Name +
                                        ".SetCursorFirst( strSID, ^" + szListMappingEntityName + "^, ^" + szScopingEntityName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + vDialog2.CtrlMapView.Name +
                                        ".SetCursor( strSID, ^" + szListMappingEntityName + "^, nRelPos, ^" + szScopingEntityName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                           //Set Foreign Key
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Set Foreign Key Code "
                           //Check the existence of the edit mapping entity
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                                           ".CheckExistenceOfEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF vDialog2.CtrlMapContext EXISTS
                              szContextName = vDialog2.CtrlMapContext.Name
                              //If the user specifies a context name then we will use this
                              //and not the default context.
                              szFlag = "0"
                           ELSE
                              szFlag = "8"
                              szContextName = ""
                           END

                           lMaxStringLth = vDialog2.CtrlMapER_Domain.MaxStringLth
                           IF lMaxStringLth <= 0
                              szMaxStringLth = "254"
                           ELSE
                              szMaxStringLth = lMaxStringLth
                           END

                           szWriteBuffer = "            strMapValue = " + vDialog2.CtrlMapView.Name +
                           ".GetStringFromAttributeByContext( strSID, ^" +
                           vDialog2.CtrlMapRelatedEntity.Name + "^, ^" +
                           vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                              //If the user specifies a context name then we will use this
                              //and not the default context.
                              szFlag = "0"
                           ELSE
                              szFlag = "8"
                              szContextName = ""
                           END

                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                           ".SetAttributeFromVariable( strSID, ^" +
                           vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                           vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, 'S', 0, ^" + szContextName + "^, " + szFlag + " );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // IF Auto Include
                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // Auto Include only.
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Auto Include Code "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If the value is ^0^ then the user has selected the null entry, we do not want to do an include."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If there is an entity, we want to exclude it. "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         if ( !strMapValue.equals(^0^))"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                                           ".CheckExistenceOfEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                           //Entity, so then we would not want to exclude and include.  Seems like this is only
                           //going to matter if this combo box is in a grid.
                           //KELLY121008
                           szWriteBuffer = "               // Only do the automatic include if this is a different entity"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               strTemp = " + vDialog.CtrlMapView.Name + ".GetString( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "               if ( !strTemp.equals( " + vDialog2.CtrlMapView.Name +
                                           ".GetString( strSID, ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name + "^, ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".ExcludeEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zREPOS_NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".IncludeSubobjectFromSubobject( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^, " +
                                           vDialog2.CtrlMapView.Name + ", ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zPOS_AFTER );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".IncludeSubobjectFromSubobject( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^, " +
                                           vDialog2.CtrlMapView.Name + ", ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zPOS_AFTER );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                                           ".CheckExistenceOfEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".ExcludeEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zREPOS_NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        szWriteBuffer = "      }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     ELSE
                        MessageSend( vDialog, "", "XSL Generation",
                                     "Missing List Mapping.",
                                     zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                  END

                  DropView( vDialog2 )

               END
            ELSE
            IF szControlType = "ListBox"
               szScopingEntityName = ""
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
               END

               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               //                ".SetAllSelectStatesForEntity( strSID, ^" +
               //                vDialog.CtrlMapLOD_Entity.Name +
               //                "^, (short) 0, ^" + szScopingEntityName + "^ );"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               //                ".SetCursorFirst( strSID, ^" +
               //                vDialog.CtrlMapLOD_Entity.Name +
               //                "^, ^" + szScopingEntityName + "^ );"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      strMapValue = request.getParameter( ^h" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( strMapValue != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRelPos = java.lang.Integer.parseInt( strMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                               ".SetCursorFirst( strSID, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                               ".SetCursor( strSID, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, nRelPos, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //szWriteBuffer = "         " + vDialog.CtrlMapView.Name +
               //                ".SetSelectStateOfEntity( strSID, ^" +
               //                vDialog.CtrlMapLOD_Entity.Name + "^, (short) 1 );"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               DropView( vDialog2 )

            ELSE
            IF szControlType = "Calendar"
               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szViewName = vDialog.CtrlMapView.Name
                  szWriteBuffer = "      nRC = " + szViewName +
                                         ".CheckExistenceOfEntity( strSID, ^" +
                                         vDialog.CtrlMapRelatedEntity.Name + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                                  ".SetAttributeFromVariable( strSID, ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^,"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  zReplicate( " ", nViewNameLth, szWriteBuffer, 32 )
                  szWriteBuffer = szWriteBuffer +
                                  "                                          strMapValue, 'S', 0, strDateFormat, 0 );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( nRC < 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = nRC;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            strError += ^" + szCtrlTag +
                                  "^ + ^\t^ + strMapValue + ^\t^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  WL_QC( vDialog, lFile, "", "^", 0 )

               END
            ELSE
            IF szControlType = "Grid"

               szCtrlTag = vDialog.Control.Tag
               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 5/1/08 - Create a temp view to the grid view and loop through that creating the mapping.
               // That way, if there are other grids on the page using the same view, we have not messed up
               // the positioning for their mapping.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vGridTmp.CreateViewFromView( strSID, " + vDialog.CtrlMapView.Name + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      nRC = vGridTmp.SetCursorFirst( strSID, ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "      nRC = vGridTmp.SetCursorScopeOI( strSID, ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^, 1 ); // first" // zPOS_FIRST
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKey = " +
                                         "vGridTmp.GetEntityKey( strSID, ^" + vDialog.CtrlMapLOD_Entity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix = Integer.toString( iTableRowCnt );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process each subcontrol.
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag

                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szCtrlTag = vDialog.Control.Tag
                  IF szCtrlCtrlType = "EditBox" OR
                     szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridEditCtl" OR
                     szCtrlCtrlType = "GridComboCtl"
                     szFlag = "8"   // SetAttribute... will be by default Context.
                  ELSE
                     szFlag = "0"   // SetAttribute... will NOT be by default Context.
                  END

                  IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                     //If this is a combobox, then we get our request.GetParameter from the
                     //hidden field (ex: hComboBox1)
                     szhFlag = "h"
                  ELSE
                     szhFlag = ""
                  END

                  //KELLY - Would I want to make an "IF" statement here to check if this control id
                  //is disabled.  If so, I assume I don't want to create any of the mapping code.

                  IF  vDialog.Control.Disabled != "Y"

                  //KJS 7/25/07 - Check if this control should be an edit control
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  // If this is an edit box, then set the mapping code.
                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"

                     lEditBox = 1

                     szContextName = ""
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                     IF RESULT >= zCURSOR_SET
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END
                     END

                     //szWriteBuffer = "         strTag = ^@" + szCtrlTag + "#^ + strEntityKey;"
                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "::^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // If strMapValue is null, then that means that this row of the grid is being hidden and so
                     // no value was assigned.  If this is the case, then we do not want to process this row so ignore.
                     szWriteBuffer = "         if ( strMapValue != null ) "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
                     IF lMaxStringLth <= 0
                        szMaxStringLth = "254"
                     ELSE
                        szMaxStringLth = lMaxStringLth
                     END

                     szWriteBuffer = "            strTemp = vGridTmp.GetStringFromAttributeByContext( strSID, ^" +
                                                          vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                                          "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( strTemp.compareTo( strMapValue ) != 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               nRC = vGridTmp.SetAttributeFromVariable( strSID, ^" +
                                                           vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                                           "^, strMapValue, 'S', 0, ^" + szContextName + "^, " + szFlag + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               if ( nRC < 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  nMapError = nRC;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  strError += strTag + ^\t^ + strMapValue + ^\t^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                  ELSE
                     lEditBox = 0
                  END

                  IF ( szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox" ) AND vDialog.Control.Disabled != "Y" //DonC added 7/25/07

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue" + szSuffix + " = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( strMapValue" + szSuffix + " != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCheckBoxValue = vDialog.Control.RadioOrCheckboxValue
                     szWriteBuffer = "            vGridTmp.SetAttributeFromVariable( strSID, ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^" + szCheckBoxValue + "^, 'S', 0, ^^, 0 );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "'", 0 )
                     szWriteBuffer = "            vGridTmp.SetAttributeFromVariable( strSID, ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^^, 'S', 0, ^^, 0 );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  END

                  IF szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridComboCtl"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END

                        lSubtype = vDialog.Control.Subtype
                        nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                        IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                           szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         if ( strMapValue != null ) "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF szCtrlCtrlType = "Calendar"
                              szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         nRC = vGridTmp" +
                                        ".SetAttributeFromVariable( strSID, ^" +
                                        vDialog.CtrlMapRelatedEntity.Name +
                                        "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                        "^, strMapValue, 'S', 0, strDateFormat, 0 );"
                           ELSE
                              szWriteBuffer = "         nRC = vGridTmp" +
                                        ".SetAttributeFromVariable( strSID, ^" +
                                        vDialog.CtrlMapRelatedEntity.Name +
                                        "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                        "^, strMapValue, 'S', 0, " +
                                        "^" + szContextName + "^, " + szFlag + " );"
                           END
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC < 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nMapError = nRC;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            strError += ^" + szCtrlTag +
                                           "^ + ^\t^ + strMapValue + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            break;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           // WL_QC( vDialog, lFile, "", "^", 0 )
                        ELSE

                           // Combobox with Auto Include or Set Position Only
                           // Note that this code is not executed if the view being
                           // passed is for the list mapping, instead of the edit
                           // mapping. Otherwise, the code would be generated twice,
                           // once when this routine is called for the edit view and
                           // once for the list view.
                           CreateViewFromView( vDialog2, vDialog )
                           SET CURSOR PREVIOUS vDialog2.CtrlMap
                           IF RESULT < zCURSOR_SET
                              // We were positioned on the first CtrlMap, which means we
                              // were being called for the edit view.
                              szWriteBuffer = "         // " + szControlType + ": " + szCtrlTag
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // Position on second CtrlMap, which is for list mapping Attribute.
                              SET CURSOR NEXT vDialog2.CtrlMap

                              // Position on third CtrlMap, which is for list mapping Entity.
                              // If it is null, the list mapping entity is from the prior CtrlMap.
                              CreateViewFromView( vDialog3, vDialog2 )
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                              END

                              // Position on fourth CtrlMap, which is for scoping Entity.
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szScopingEntityName = ""
                              END

                              DropView( vDialog3 )

                              IF vDialog2.CtrlMapView EXISTS
                                 szWriteBuffer = "         nRC = " + vDialog2.CtrlMapView.Name +
                                                 ".GetView( strSID, ^" + vDialog2.CtrlMapView.Name + "^, vAS );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( nRC > 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 //szWriteBuffer = "      // " + vDialog2.CtrlMapView.Name +
                                 //                ".SetAllSelectStatesForEntity( strSID, ^" +
                                 //                vDialog2.CtrlMapRelatedEntity.Name +
                                 //                "^, (short) 0, ^" + szScopingEntityName + "^ );"
                                 //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "            strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strMapValue = request.getParameter( strTag );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strMapValue != null )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strMapValue );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // For Auto Include, we must decrement nRelPos for blank entry.
                                    szWriteBuffer = "                  nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END
                                 szWriteBuffer = "               nRC = " + vDialog2.CtrlMapView.Name +
                                                 ".SetCursorFirst( strSID, ^" + szListMappingEntityName + "^, ^" + szScopingEntityName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               if ( nRC >= 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  " + vDialog2.CtrlMapView.Name +
                                                 ".SetCursor( strSID, ^" + szListMappingEntityName + "^, nRelPos, ^" + szScopingEntityName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                                    //Set Foreign Key
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Set Foreign Key Code "
                                    //Check the existence of the edit mapping entity
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = vGridTmp" +
                                                    ".CheckExistenceOfEntity( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    IF vDialog2.CtrlMapContext EXISTS
                                       szContextName = vDialog2.CtrlMapContext.Name
                                       //If the user specifies a context name then we will use this
                                       //and not the default context.
                                       szFlag = "0"
                                    ELSE
                                       szFlag = "8"
                                       szContextName = ""
                                    END

                                    lMaxStringLth = vDialog2.CtrlMapER_Domain.MaxStringLth
                                    IF lMaxStringLth <= 0
                                       szMaxStringLth = "254"
                                    ELSE
                                       szMaxStringLth = lMaxStringLth
                                    END

                                    szWriteBuffer = "               strMapValue = " + vDialog2.CtrlMapView.Name +
                                    ".GetStringFromAttributeByContext( strSID, ^" +
                                    vDialog2.CtrlMapRelatedEntity.Name + "^, ^" +
                                    vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLth + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                       //If the user specifies a context name then we will use this
                                       //and not the default context.
                                       szFlag = "0"
                                    ELSE
                                       szFlag = "8"
                                       szContextName = ""
                                    END

                                    szWriteBuffer = "               nRC = vGridTmp" +
                                    ".SetAttributeFromVariable( strSID, ^" +
                                    vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                                    vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, 'S', 0, ^" + szContextName + "^, " + szFlag + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END



                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // Auto Include only.
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Auto Include Code inside grid."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = vGridTmp" + 
                                                    ".CheckExistenceOfEntity( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                                    //Entity, so then we would not want to exclude and include.  Seems like this is only
                                    //going to matter if this combo box is in a grid.
                                    //KELLY3
                                    szWriteBuffer = "               //Only do the automatic include if this is a different entity"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               strTemp = vGridTmp.GetString( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "               if ( !strTemp.equals( " + vDialog2.CtrlMapView.Name +
                                                    ".GetString( strSID, ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name + "^, ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp" +
                                                    ".ExcludeEntity( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name +
                                                    "^, vGridTmp.zREPOS_NONE );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp" +
                                                    ".IncludeSubobjectFromSubobject( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^, " +
                                                    vDialog2.CtrlMapView.Name + ", ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^, vGridTmp.zPOS_AFTER );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              ELSE  //IF vDialog2.CtrlMapView EXISTS
                                 MessageSend( vDialog, "", "XSL Generation",
                                              "Missing List Mapping.",
                                              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                              END  //IF vDialog2.CtrlMapView EXISTS
                           END  //IF RESULT < zCURSOR_SET

                        END
                     END
                  END

                  IF szCtrlCtrlType = "GridEditBox"  OR
                     szCtrlCtrlType = "Calendar"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END

                        szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         if ( strMapValue != null ) "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = vGridTmp" +
                                     ".SetAttributeFromVariable( strSID, ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, 'S', 0, strDateFormat, 0 );"
                        ELSE
                           szWriteBuffer = "         nRC = vGridTmp" +
                                     ".SetAttributeFromVariable( strSID, ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, 'S', 0, " +
                                     "^" + szContextName + "^, " + szFlag + " );"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC < 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            nMapError = nRC;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strError += ^" + szCtrlTag +
                                        "^ + ^\t^ + strMapValue + ^\t^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            break;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // WL_QC( vDialog, lFile, "", "^", 0 )
                     END
                  END
                  END //IF vDialog.Control.Disabled != "Y"

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

            // szWriteBuffer = ""
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF lSubtypeX = 0
                  szWriteBuffer = "         nRC = " +
                                  "vGridTmp.SetCursorNext( strSID, ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "         nRC = " +
                                  "vGridTmp.SetCursorScopeOI( strSID, ^" +
                                  vDialog.CtrlMapLOD_Entity.Name + "^,  3 ); // next" // zPOS_NEXT
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "      vGridTmp.DropView(strSID);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y"
               // This is the survey group. Creating input mapping for this...
               // **********************************************************
               szWriteBuffer = "      String strQuestionCount;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionType=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionName=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionAnswer=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionChoiceID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strAllowComment=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strQuestionCount = request.getParameter( ^SurveyQuestionCount^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      int iQuestionCount=Integer.parseInt(strQuestionCount);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      for (int i=1; i<=iQuestionCount; i++)"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionID^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionID = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionType^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionType= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^AllowComment^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strAllowComment= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* strQuestionType: ^, strQuestionType );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* strQuestionID:   ^, strQuestionID );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + ViewName + ".SetCursorFirst( strSID, ^SurveyQuestion^, ^ID^, strQuestionID, ^SurveyQuestionaire^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Text^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Text   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyQuestion^, ^wTextAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                        strQuestionAnswer, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else if ( strQuestionType.equals(^Yes/No^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              strTemp = ^chkAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Multiple Choice Single Response^) || strQuestionType.equals(^Multiple Choice Multiple Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              if ( strQuestionType.equals(^Multiple Choice Single Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // radio buttons"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strTemp = ^chkAnswer^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Radio Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Radio Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyQuestion^, ^wTextAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                           strQuestionAnswer, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // check boxes"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Checkbox   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                nRC = " + ViewName + ".SetCursorFirst( strSID, ^SurveyMultiChoiceOption^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 while ( nRC == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionChoiceID = " + ViewName + ".GetString( strSID, ^SurveyMultiChoiceOption^, ^ID^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strTemp = ^chkAnswer^ + strQuestionChoiceID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Checkbox Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Checkbox Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    //if ( !strQuestionAnswer.equals(^^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    if ( strQuestionAnswer != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                                strQuestionChoiceID, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
              szWriteBuffer = "                      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                                ^^, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    nRC = " + ViewName + ".SetCursorNext( strSID, ^SurveyMultiChoiceOption^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    " + ViewName + ".TraceLine( ^DoInputMapping SetCursorNext RC: ^, nRC );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Map Comment if it exists
               szWriteBuffer = "            if ( strAllowComment.equals(^Y^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtComment^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyQuestion^, ^wComment^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                        strQuestionAnswer, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // *************************************************************
            END // IF szControlType = "GroupBox"
            END // IF szControlType = "Grid"
            END // IF szControlType = "Calendar"
            END // IF szControlType = "ListBox"
            END // IF szControlType = "ComboBox"
            END // IF szControlType = "EditBox" OR "CheckBox" OR "MLEdit" OR "RadioGrp"
         ELSE
            IF vDialog.CtrlCtrl EXISTS
               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSP_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, lTableRowCnt )
               ResetViewFromSubobject( vDialog )
            END
         END
      END
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_OutputMapRecurs
//
//  Comboboxes and listboxes need to do some mapping before the action
//  is called, so create separate javascript functions for actions that
//  are called from comboboxes or listboxes.
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_OutputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 255 )   szFormName )

   VIEW          vDialogParent
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szActionName
   STRING ( 10 ) szSelectFunction
   STRING ( 10000 ) szJavaScript
   STRING ( 1 )  szCodeCreated
   SHORT         nGridParent
   INTEGER       lSubtype
   SHORT         nRC

   // "ONCHANGE" FUNCTION GENERATION FOR COMBOBOX CONTROLS

   // Identify if this Control is inside a Grid by setting nGridParent.
   // Note by DonC on 9/7/07: I don't see why the following code is necessary as we know the
   // combobox is in a Grid because its type is "GridComboCtl".
   /*nGridParent = 0
   nRC = 0
   CreateViewFromView( vDialogParent, vDialog )
   LOOP WHILE nGridParent = 0 AND nRC = 0
      nRC = ResetViewFromSubobject( vDialogParent )
      IF nRC = 0 AND vDialogParent.ControlDef EXISTS
         szControlType = vDialogParent.ControlDef.Tag
         IF szControlType = "Grid"
            nGridParent = 1
         END
      END
   END
   DropView( vDialogParent )*/

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag

      // Set up Action data for combo boxes.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectFunction = "OnChange"
         ELSE
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectFunction = "OnChange"
      END

      // Process Combobox entries
      IF szControlType = "ComboBox" OR szControlType = "GridComboCtl"
         // The function statements for Combobox entries are primarily driven by:
         // 1. Whether the Combobox is Domain or select entity type.
         // 2. Whether there is an Action triggered by the combobox.
         // 3. Whether the Combobox is part of a Grid.

         //Is this combobox in a grid?  You'd think you could just tell by the name "GridComboCtl but
         //I can create a combobox outside the listbox and then move it into the grid and the type will
         //still be "ComboBox".
         nGridParent = 0
         nRC = 0
         CreateViewFromView( vDialogParent, vDialog )
         nRC = ResetViewFromSubobject( vDialogParent )
         IF nRC = 0 AND vDialogParent.ControlDef EXISTS
            szControlType = vDialogParent.ControlDef.Tag
            IF szControlType = "Grid"
               nGridParent = 1
            END
         END
         DropView( vDialogParent )

         //KJS 12/7/07 - We are going to add autoinclude and set foreign key comboboxes.
         //so we will need to change the below statements.

         // function statement
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
            // szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control, strEntityKey )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0
               // Select Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Select Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "      // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      isWindowClosing = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If Action is SelectEnd, generate code to skip submit on tab.
         IF vDialog.EventAct EXISTS AND vDialog.Event.Type = 256
            szWriteBuffer = "   if (isChangedComboBox(document." + szFormName + "." + szCtrlTag + ") == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         // ACTION EXISTS
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "      hControl.value = Control.value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0
               //NOT in Grid
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               //IN Grid
               szWriteBuffer = "      hControl.value = Control.selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         // Action Processing
         IF vDialog.EventAct EXISTS

            // KJS 08/14/2009 - There may be times when we simply want to run the javascript code without submitting
            // this form.  The only problem is if this combobox is an auto include or a "set foreign key" then we have
            // to submit to allow this to happen.  If the combobox is not one of those and the action type is
            // zWAB_StayOnWindow and there is javascript code, then do not want to do the submit.

            szCodeCreated = "N"

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)
               // "Auto include" or "set foreign key" combo box.  Do nothing.
            ELSE
               // Not an "auto include" or "set foreign key" combobox and there is javascript code for
               // the action.
               IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""

                  // Create only the javascript code without the form submit.
                  szCodeCreated = "Y"
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

            // The code for szWAB_StayOnWindow with Javascript code was not created so build this
            // the normal way with the action .submit.
            IF szCodeCreated = "N"
               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 10/28/10 - Testing this to see how using an hourglass would work while
               // the user is waiting for something to happen.
               szWriteBuffer = "      document.body.style.cursor = ^wait^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.  If the user wants to skip the
               //generated code, the inserted code should end with a return.
               IF  szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            //There is no action but because this is an automatic include or a
            //set foreign key combobox, there should be an action and a submit.
            //We will call a generic one
            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)

               szActionName = "ZEIDON_ComboBoxSubmit"
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
      IF szControlType = "ListBox"

         //szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
         szWriteBuffer = "function " + szCtrlTag +  "OnClick( )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                         "document." + szFormName + "." + szCtrlTag + ".selectedIndex"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Action Processing
         IF vDialog.EventAct EXISTS

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""

               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE

               // KJS 10/28/10 - Testing this to see how using an hourglass would work while
               // the user is waiting for something to happen.
               szWriteBuffer = "      document.body.style.cursor = ^wait^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
         // This is not a combobox, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            GenJSP_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName )
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a listbox
      END  // End of checking if this is a combobox

   END // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATIONS : Local Style manipulations
//
/////////////////////////////////////////////////////////////////////////////

GLOBAL OPERATION
PIX_PER_DU( VIEW vDialog BASED ON LOD TZWDLGSO, DECIMAL dDLUnits )
   dDLUnits = 2.0
END

GLOBAL OPERATION
FixStyleString( STRING ( 1024 ) szStyle,
                STRING ( 100 ) szS1,   // position usually
                STRING ( 100 ) szS2,   //
                STRING ( 100 ) szSE )

   szStyle = "style=^" + szS1 + szS2 + szSE + "^"
END


GLOBAL OPERATION
CreateDisabledString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 100 ) szDisabled )

   INTEGER        lSubtype
   INTEGER        lTemp

   lSubtype = vDialog.Control.Subtype
   lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
   IF lTemp != 0
      szDisabled = " disabled "
   ELSE
      szDisabled = ""
   END

END

GLOBAL OPERATION
CreateAbsolStyleString( VIEW vDialog BASED ON LOD TZWDLGSO,
                        STRING ( 1024 ) szStyle,
                        INTEGER X_BASE,
                        INTEGER Y_BASE,
                        STRING ( 100 ) szStyleExtraParm )

   STRING ( 100 )  szPosition
   STRING ( 100 )  szSize
   CreateSizeString( vDialog, szSize )
   CreateAbsolPosString( vDialog, szPosition, X_BASE, Y_BASE )

   FixStyleString( szStyle, szSize, szPosition, szStyleExtraParm )
END

GLOBAL OPERATION
CreateRelStyleString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 1024 ) szStyle,
                      INTEGER X_BASE,
                      INTEGER Y_BASE,
                      STRING ( 100 ) szStyleExtraParm )

   STRING ( 100 )  szPosition
   STRING ( 100 )  szSize
   CreateSizeString( vDialog, szSize )
   CreateRelPosString( vDialog, szPosition, X_BASE, Y_BASE )

   FixStyleString( szStyle, szSize, szPosition, szStyleExtraParm )
END

/*************************************************************************************************
**
**    OPERATION: CreateNoPosStyleString
**    Creates the style with the control size but no positioning.
**
*************************************************************************************************/
GLOBAL OPERATION
CreateNoPosStyleString( VIEW vDialog BASED ON LOD TZWDLGSO,
                        STRING ( 1024 ) szStyle,
                        STRING ( 100 ) szStyleExtraParm )

   STRING ( 100 )  szSize

   CreateSizeString( vDialog, szSize )
   FixStyleString( szStyle, szSize, "", szStyleExtraParm )
END


GLOBAL OPERATION
CreateSizeString( VIEW vDialog BASED ON LOD TZWDLGSO,
                  STRING ( 1024 ) szStyle )

   STRING ( 20 )  szWidth
   STRING ( 20 )  szHeight
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   
   zIntegerToString( szWidth, 20, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 20, vDialog.Control.SZDLG_Y * dDLUnits )
   szStyle = ""

   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
   IF RESULT < zCURSOR_SET
      szStyle = szStyle + "width:" + szWidth + "px;"
   END
   
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
   IF RESULT < zCURSOR_SET
      szStyle = szStyle + "height:" + szHeight + "px;"
   END

   //szStyle = "width:" + szWidth + "px;height:" + szHeight + "px;"
END

GLOBAL OPERATION
CreateAbsolPosString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 1024 ) szStyle,
                      INTEGER X_BASE,
                      INTEGER Y_BASE )

   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
   zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

   szStyle = "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;"
END

GLOBAL OPERATION
CreateAbsolPosStringTable( VIEW vDialog BASED ON LOD TZWDLGSO,
                           STRING ( 1024 ) szStyle,
                           INTEGER X_BASE,
                           INTEGER Y_BASE )

   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
   zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

   szStyle = "position:absolute;" +
             "top:" + szY_Pos + "px;" +
             "left:" + szX_Pos + "px;"

END

GLOBAL OPERATION
CreateRelPosString( VIEW vDialog BASED ON LOD TZWDLGSO,
                    STRING ( 1024 ) szStyle,
                    INTEGER X_BASE,
                    INTEGER Y_BASE )

   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
   zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

   szStyle = "position:relative;" +
             "left:" + szX_Pos + "px;" +
             "top:" + szY_Pos + "px;"
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_Action
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_Action( VIEW vDialog     BASED ON LOD TZWDLGSO,
               VIEW vDialogRoot BASED ON LOD TZWDLGSO,
               INTEGER          lFile,
               STRING ( 10000 ) szWriteBuffer,
               STRING ( 255 )   szFormName,
               STRING ( 34 )    szActionName,
               INTEGER          lTraceLevel )

   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   VIEW vDialogCtrl BASED ON LOD TZWDLGSO
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szContextName
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szDownloadViewName
   STRING ( 32 )    szUploadViewName
   STRING ( 10 )    szMaxStringLth
   STRING ( 50 )    szPrivateKey
   STRING ( 50 )    szPublicKey
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szCommentAdded
   STRING ( 1 )     szUploadTransferFileFlag
   STRING ( 1 )     szPosDataCreated
   INTEGER          lControl
   INTEGER          lMaxStringLth
   INTEGER          lActionType
   SHORT            nViewNameLth
   SHORT            nGridParent
   SHORT            nRC

   // KJS 12/16/16 - I switched "WL_QC( vDialog" to "WL_QC( vDialogRoot".
   // The reason is because sometimes we call this operation when looking at resusable actions from a different dialog.
   // If so, vDialog (gotten from ActivateMetaOI_ByZKey) is not always associated with the open file that we are generating to. Because of this, the actions don't
   // get created. So changing to vDialogRoot which was build off of the original vDialog.

   InsertBlankFlag = "N"

   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^" + szActionName + "^ ) )"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      session.setAttribute( ^ZeidonAction^, ^" + szActionName + "^ );" // Kelly wants this one? Not sure why - dks 2011.11.09
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

//**********************************

      // KJS 11/05/09
      // If we unregister zeidon at the end of building this window, then when the user clicks an action,
      // we need to call any Prebuild/Posbuild operations (that would build objects used on this page) before we
      // call the action selected.
   IF vDialogRoot.Window.WEB_UnregisterZeidonWindow = "Y"
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      szCommentAdded = "N"
      FOR EACH vDialogTemp.Action
         FOR EACH vDialogTemp.ActWndEvent
            IF vDialogTemp.ActWndEvent.Type = 1 OR
               vDialogTemp.ActWndEvent.Type = 2

               IF vDialogTemp.ActOper EXISTS

                  // Don't want to add this comment twice if there is an operation for both prebuild and posbuild.
                  IF szCommentAdded = "N"
                     szWriteBuffer = "      // Prebuild/Posbuild Operations."
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // These are called because we Unregister Zeidon when this page is finished loading, so"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // these operations need to be called before any action code (for recreating objects etc)."
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szCommentAdded = "Y"
                  END


                  szWriteBuffer = "      nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^" +
                                  vDialogTemp.Dialog.Tag + "^, ^" +
                                  vDialogTemp.ActOper.Name + "^, 1 );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nOptRC == 2 )"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         break;"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END
      END
      DropView ( vDialogTemp )

   END

//***********************************

   // Keep position on the Control that triggers the Action, if it exists.
   CreateViewFromView( vDialogCtrl, vDialog )
   NAME VIEW vDialogCtrl "vDialogCtrl"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogCtrl, "EventAct", "Tag", lControl, szActionName, "", "", 0, "Window", "" )
   IF nRC < zCURSOR_SET
      DropView( vDialogCtrl )
      vDialogCtrl = 0
   END

   lActionType = vDialog.Action.Type
   IF lActionType = zWAB_StartBrowserHTML_Page
      szWriteBuffer = "      strURL = vAppSubtask.MakeWebFileName( strSessionId, 0 ) + ^.html^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      vAppSubtask.DropName( strSessionId, strURL );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF lActionType = zWAB_ProcessDownloadFile
         // Download File constants
         szWriteBuffer = "      String sDownloadFile = null;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sSourceFileNameOnly = null;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sExtension = null;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int l;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int x;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

         // Download File mapping view: Mapping must be specified for download processing.
         IF vDialogCtrl = 0
            MessageSend( vDialog, "", "Download File Generation",
                                     "The Control with 'Download File' action could not be located.",
                                     zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         ELSE
            IF vDialogCtrl.CtrlMapER_Attribute DOES NOT EXIST
               MessageSend( vDialog, "", "Download File Generation",
                                        "The Control with 'Download File' action must specify mapping for the source file name.",
                                        zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            ELSE
               szDownloadViewName = vDialogCtrl.CtrlMapView.Name
               szWriteBuffer = "      zeidon.zView " + szDownloadViewName + " = new zeidon.zView( strSessionId );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            END
         END
      END
   END

   // We need to determine if this Action is on a Group for File Transfer to Server, because we will not
   // generate the call to DoInputMapping in that case.
   szUploadTransferFileFlag = ""
   IF vDialogCtrl > 0
      CreateViewFromView( vDialogTemp, vDialogCtrl )
      ResetViewFromSubobject( vDialogTemp )
      SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
      IF RESULT >= zCURSOR_SET
         szUploadTransferFileFlag = "Y"
      END
      DropView( vDialogTemp )
   END

   // If this Action is for an Upload to Server File Transfer, we won't do normal input mapping, but we will map in the full target file name so
   // that we can process it, since we may not know the suffix from the source or even the file name from the source.
   IF szUploadTransferFileFlag = "Y"

      //If there is mapping on the edit ("file") control, we want to put the
      //filename that is being uploaded into that mapping.

      CreateViewFromView( vDialogTemp, vDialogCtrl )

         // Aadit, wants there to be an upload file limit, so that for email attachment, the file isn't too big to bring
         // down the mail server. This really needs to be an updatable field...
         /*********************************************/
         szWriteBuffer = "      if ( iFileLth > 10485760 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )


         szWriteBuffer = "         strErrorMsg = ^Y\tFile\t\tAttachment File is too large!\t^;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         session.setAttribute( ^FileUploadError^, strErrorMsg );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "         vAppSubtask.TraceLine( ^File TOO big ERROR =======>> ^, strErrorMsg );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nRC = -1;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

/*
         szWriteBuffer = "         int iView = vAppSubtask.GetIntegerFromView( strSessionId );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         vAppSubtask.TraceLine( ^File TOO big ERROR =======>> ^, ^^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nRC = vMsgQ.GetView( strSessionId, ^__MSGQ^, vAppSubtask );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         if ( nRC > 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            zeidon.zView v = new zeidon.zView( strSessionId );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            v.CreateViewFromView( strSessionId, vMsgQ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            nRC = v.SetCursorFirst( strSessionId, ^Task^, ^Id^, iView, ^^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            if ( nRC == 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               nRC = v.SetCursorFirst( strSessionId, ^QMsg^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               if ( nRC == 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "                  v.SetAttributeFromVariable( strSessionId, ^QMsg^, ^Title^, ^Attachment File is too large!^, 'S',"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "                                              24, ^^, 8 );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               nRC = 0;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            v.DropView( strSessionId);"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            nRC = -1;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
  */
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         /*********************************************/

      //I wanted to do the "SET CURSOR..." but because Control doesn't really have a parent
      //the c code that gets generated is only looking for ControlDef under Control (not all controls) and so
      //it is not finding it.
      //SET CURSOR FIRST vDialogTemp.Control WHERE vDialogTemp.ControlDef.Tag = "EditBox"
      FOR EACH vDialogTemp.Control

         IF vDialogTemp.ControlDef.Tag = "EditBox"
                                        //256
           //Get the mapping
            SET CURSOR FIRST vDialogTemp.CtrlMapLOD_Attribute WITHIN vDialogTemp.Control
            IF RESULT >= zCURSOR_SET
               szUploadViewName = vDialogTemp.CtrlMapView.Name
               szWriteBuffer = "      zeidon.zView " + szUploadViewName + " = new zeidon.zView( strSessionId );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      nRC = " + vDialogTemp.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialogTemp.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC <= 0 )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogTemp.CtrlMapView.Name +
                        ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialogTemp.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRC = " +
                      vDialogTemp.CtrlMapView.Name +
                      ".SetAttribute( strSessionId, ^" +
                      vDialogTemp.CtrlMapRelatedEntity.Name + "^, ^" +
                      vDialogTemp.CtrlMapER_Attribute.Name + "^, strInputFileName );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            END
         END
      END
      DropView( vDialogTemp )

   ELSE
      // Input Mapping Option
      IF vDialog.Action.NoMap != "Y"
         szWriteBuffer = "      // Input Mapping"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC < 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // Check if this is an action for reCAPTCHA.  If so, add the code...
   IF lActionType = 35 OR lActionType = 55
      // We need to get the control for this action so we can retrieve the private and public keys.
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      szCtrlTag = "reCAPTCHA"
      IF SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" ) >= zCURSOR_SET
         szPublicKey = vDialogTemp.Control.WebreCAPTCHAPublicKey
         szPrivateKey = vDialogTemp.Control.WebreCAPTCHAPrivateKey

      END
      DropView( vDialogTemp )

      // create recaptcha without <noscript> tags
      szWriteBuffer = "      ReCaptcha captcha = ReCaptchaFactory.newReCaptcha(^" + szPublicKey + "^, ^" + szPrivateKey + "^, false);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      ReCaptchaResponse response2 = captcha.checkAnswer(request.getRemoteAddr(), request.getParameter(^recaptcha_challenge_field^), request.getParameter(^recaptcha_response_field^));"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (response2.isValid())"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vAppSubtask.TraceLine(^reCAPTCHA Success^, ^^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // The user has not entered in the correct response, do not go further."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorTitle = ^INCORRECT RECAPTCHA^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMsg = ^You typed the reCaptcha image incorrectly.  Please try again.^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // No redirection, we are staying on this page."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 0;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END

   //KJS 11/15/07 - If there is a button or hottext on a grid, then we should position on the correct
   //entity whether or not there is an operation.

   //We don't want to create the code to position on the correct
   //list entity twice.  So keep track...
   szPosDataCreated = "N"

   //Loop through each ActCtrl to see if there is a button or hot text
   //on a grid that calls this action.  If so, then we need to
   //get position on the correct item in the list.  This is the
   //code to set position.  If there is more than one button/hottext
   //in this list that calls the same action, make sure we don't
   //create this code twice.
   FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

      szCtrlTag = vDialog.ActCtrl.Tag
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      NAME VIEW vDialogTemp "vDialogTemp"

      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      IF SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                          szCtrlTag, "", "", 0,
                          "Window", "" ) >= zCURSOR_SET AND
         (vDialogTemp.ControlDef.Tag = "PushBtn" OR vDialogTemp.ControlDef.Tag = "GridEditCtl" OR
          vDialogTemp.ControlDef.Tag = "Bitmap" OR vDialogTemp.ControlDef.Tag = "BitmapBtn" OR
          vDialogTemp.ControlDef.Tag = "ComboBox" OR vDialogTemp.ControlDef.Tag = "GridComboCtl" )
          //032609
         //vDialogTemp.ControlDef.Key = 1020

         // Identify if this Control is inside a Grid.
         nRC = 0
         nGridParent = 0
         LOOP WHILE nRC = 0 AND nGridParent = 0
            nRC = ResetViewFromSubobject( vDialogTemp )
            IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
               IF vDialogTemp.ControlDef.Tag = "Grid"
               // vDialogTemp.ControlDef.Key = 2010
                  // The parent of the this control is a Grid, so indicate for later.
                  nGridParent = 1
               END
            END
         END

         //If we successfully reset from the subcontrols and we are on a grid.
         IF nGridParent = 1

            IF vDialogTemp.CtrlMapView EXISTS AND
               vDialogTemp.CtrlMapLOD_Entity EXISTS AND szPosDataCreated = "N"

               szPosDataCreated = "Y"
               szWriteBuffer = "      // Position on the entity that was selected in the grid."
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               // We have a "select button" or HotText in a list, so we need to set
               // up the code to set position on the proper list item.
               szViewName = vDialogTemp.CtrlMapView.Name
               szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
               szWriteBuffer = "      String strEntityKey = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               //If this action is for the download button or for the upload button, we may have already created
               //a view for this view name.  Don't create the view unless it's for a different view name.
               IF  ( szViewName != szDownloadViewName AND szViewName != szUploadViewName )
                  szWriteBuffer = "      zeidon.zView " + szViewName + " = new zeidon.zView( strSessionId );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      if ( nRC > 0 )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         vAppSubtask.TraceLine( ^Got " + szViewName + " View Key: ^, strEntityKey );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         nRC = " + szViewName + ".SetCursorEntityKey( strSessionId, ^" + szEntityName + "^, strEntityKey );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         if ( nRC < 0 )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         // This is temp code because SetCursorEntityKey doesn't work on subobjects."
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRCk = " + szViewName + ".SetCursorFirst( strSessionId, ^" + szEntityName + "^, ^^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            while ( nRCk >= 0 )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               lEKey = " + szViewName + ".GetEntityKey( strSessionId, ^" + szEntityName + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strKey = Integer.toString( lEKey );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               if ( strKey.equals( strEntityKey ) )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // Stop while loop because we have positioned on the correct entity."
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  nRCk = -1;"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  nRCk = " + szViewName + ".SetCursorNext( strSessionId, ^" + szEntityName + "^, ^^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "      else"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         vAppSubtask.TraceLine( ^Did not get " + szViewName + " View Key: ^, strEntityKey );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF nGridParent = 1
      END  // IF SetEntityCursor ...

      DropView( vDialogTemp )

   END  //FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

   // Operation Option
   IF vDialog.ActOper EXISTS

      szWriteBuffer = "      // Action Operation"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //FOR EACH Dialog.ActCtrl.Tag code from about was here.

      szWriteBuffer = "      nRC = 0;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      vAppSubtask.TraceLine( ^CallDialogOperation: " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "  ^, ^^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^" +
                      vDialog.Dialog.Tag + "^, ^" +
                      vDialog.ActOper.Name + "^, 0 );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      // Handle any Next Window processing from Operation.
      szWriteBuffer = "      if ( nOptRC == 2 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

      IF  lActionType = zWAB_StartBrowserPDF_Page
         // If we are copying to pdf, then we need to have a wait routine, otherwise, the jsp tries to open
         // the pdf file before it's actually created.
         szWriteBuffer = "      try {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         Thread.sleep(5000); "
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      } catch(InterruptedException ie) {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         out.println(^error^); "
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END

      // I know that if we are starting a pdf or html window then we do not need to do this.
      // There are probably more like Popup windows...
      IF  lActionType != zWAB_StartBrowserHTML_Page AND lActionType != zWAB_StartBrowserPDF_Page

         // Handle any Next Window processing from Operation.
         szWriteBuffer = "      // Dynamic Next Window"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = vKZXMLPGO.CheckExistenceOfEntity( strSessionId, ^NextDialogWindow^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC >= 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strDialogName = vKZXMLPGO.GetString( strSessionId, ^NextDialogWindow^, ^DialogName^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strWindowName = vKZXMLPGO.GetString( strSessionId, ^NextDialogWindow^, ^WindowName^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strNextJSP_Name = strDialogName + strWindowName + ^.jsp^;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         vKZXMLPGO.DeleteEntity( strSessionId, ^NextDialogWindow^, nRepos );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strURL = response.encodeRedirectURL( strNextJSP_Name );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

         //KJS Trace
         IF (lTraceLevel = 1)
            szWriteBuffer = "         vAppSubtask.TraceLine( ^Next Window Redirect to: ^, strURL );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         END

         // Handle creation of return page for Function Call StartSubwindow.
         szWriteBuffer = "         nRC = vKZXMLPGO.CheckExistenceOfEntity( strSessionId, ^NextDialogWindow^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         if ( nRC >= 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strFunctionCall = vKZXMLPGO.GetString( strSessionId, ^NextDialogWindow^, ^FunctionCall^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strFunctionCall = ^^;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "         if ( strFunctionCall.equals( ^StartSubwindow^ ) )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            vKZXMLPGO.CreateEntity( strSessionId, ^PagePath^, vKZXMLPGO.zPOS_AFTER );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            vKZXMLPGO.SetAttribute( strSessionId, ^PagePath^, ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "         nRC = 1;  // do the redirection"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END

   END  //End of calling an operation

   IF lActionType = zWAB_StartBrowserHTML_Page
      szWriteBuffer = "      vAppSubtask.SetName( strSessionId, strURL );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
      // That resubmitted the current page and I assume this was done thinking this was how
      // the report page would be called but since the report popup is determined in AfterPageLoaded, we
      // don't need to resubmit the page.  Just keep building this current page.
      //szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/15/10 - Now I want to do the redirect to the current page so that I don't get a "Resend" prompt
      // from the browser when I hit the "refresh" button.
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

      IF lActionType = zWAB_StartBrowserPDF_Page
      // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
      // That resubmitted the current page and I assume this was done thinking this was how
      // the report page would be called but since the report popup is determined in AfterPageLoaded, we
      // don't need to resubmit the page.  Just keep building this current page.
      //szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/15/10 - Now I want to do the redirect to the current page so that I don't get a "Resend" prompt
      // from the browser when I hit the "refresh" button.
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Next Window Option
   IF lActionType = zWAB_StartModelessSubwindow          OR
      lActionType = zWAB_StartModalSubwindow             OR
      lActionType = zWAB_ReplaceWindowWithModelessWindow OR
      lActionType = zWAB_ReplaceWindowWithModalWindow    OR
      lActionType = 35                                   OR  //reCAPTCHA StartModalSubwindow
      lActionType = 55  //reCAPTCHA ReplaceModalWindow
      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         InsertBlankFlag = "N"
      END

      szWriteBuffer = "      // Next Window"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      IF lActionType = zWAB_StartBrowserHTML_Page
         szWriteBuffer = "      vAppSubtask.SetName( strSessionId, strURL );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strURL = response.encodeRedirectURL( strURL );"
      ELSE
         szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" +
                         vDialog.Action.DialogName + vDialog.Action.WindowName + ".jsp^ );"
      END
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      vAppSubtask.TraceLine( ^Next Window Redirect to: ^, strURL );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartModelessSubwindow OR
         lActionType = zWAB_StartModalSubwindow    OR
         lActionType = 35 //reCAPTCHA StartModalSubwindow
         // Next Window is subwindow. Set up current window for return.
         szWriteBuffer = "      vKZXMLPGO.CreateEntity( strSessionId, ^PagePath^, vKZXMLPGO.zPOS_AFTER );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      vKZXMLPGO.SetAttribute( strSessionId, ^PagePath^, ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      ELSE
         szWriteBuffer = "      nRC = 1;  // do the redirection"
      END
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   END  //End of Next Window Option

   // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
   IF ( lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = ""
      //This gets the value for the popup window so that in AfterPageLoaded, we can get this
      //value and pop up the window.
      szWriteBuffer = "      strOpenPopupWindow = request.getParameter( ^zOpenPopupWindow^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZX = request.getParameter( ^zPopupWindowSZX^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZY = request.getParameter( ^zPopupWindowSZY^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 0;  // No redirection, we want to open the popup"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Same Window Refresh option
   IF lActionType = zWAB_StayOnWindowWithRefresh
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Return From Window Option
   IF lActionType = zWAB_ReturnToParent OR
      lActionType = zWAB_ReturnToParentWithRefresh

      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      // Return to Last Window"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = vKZXMLPGO.CheckExistenceOfEntity( strSessionId, ^PagePath^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = vKZXMLPGO.GetString( strSessionId, ^PagePath^, ^LastPageName^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vKZXMLPGO.DeleteEntity( strSessionId, ^PagePath^, vKZXMLPGO.zREPOS_PREV );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = strLastPage + ^.jsp^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = ^" + szFormName + ".jsp^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "      strURL = response.encodeRedirectURL( strLastPage );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      vAppSubtask.TraceLine( ^Return Redirect to: ^, strURL );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END
   // szWriteBuffer = "      return;"
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Download File option.
   IF lActionType = zWAB_ProcessDownloadFile

      // Note that we need vDialogCtrl to be positioned on Control that triggers the Action to get the attribute mapping from that Control.
      // This was evaluated earlier.

      IF vDialogCtrl > 0
         IF vDialogCtrl.CtrlMapER_Attribute EXISTS

            szWriteBuffer = "  "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      // Download File Processing"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            /*
            szWriteBuffer = "      sBrowser = request.getHeader(^User-Agent^);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isFirefox = ( sBrowser != null && sBrowser.indexOf( ^Firefox/^ ) != -1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isMSIE = ( sBrowser != null && sBrowser.indexOf( ^MSIE^ ) != -1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isOpera = ( sBrowser != null && sBrowser.indexOf( ^Opera^ ) != -1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            */

            szWriteBuffer = "      nRC = " + vDialogCtrl.CtrlMapView.Name + ".GetView( strSessionId, ^" + vDialogCtrl.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC > 0 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialogCtrl.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            lMaxStringLth = vDialogCtrl.CtrlMapER_Domain.MaxStringLth
            IF lMaxStringLth <= 0
               szMaxStringLth = "254"
            ELSE
               szMaxStringLth = lMaxStringLth
            END

            szWriteBuffer = "            sDownloadFile = " + vDialogCtrl.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^" +
                            vDialogCtrl.CtrlMapRelatedEntity.Name + "^, ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^, ^^, " + szMaxStringLth + " );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".TraceLine( ^Download File Name: ^, sDownloadFile );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".TraceLine( ^Entity does not exist: ^, ^" +
                                                vDialogCtrl.CtrlMapView.Name + "." +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "      else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogCtrl.CtrlMapView.Name + ".TraceLine( ^Invalid View: ^, ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         // Replace any quotes."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         sDownloadFile = sDownloadFile.replaceAll(^\^^,^^);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         l = sDownloadFile.lastIndexOf(^.^);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         x = sDownloadFile.lastIndexOf(^\\^);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         // If x > l then the filename has no extension and"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // there must be a period in the directory name."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Right now we are not using sExtension but just"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in case we want to change the encType I want"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // to capture this."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if (x > l)"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = ^^;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = sDownloadFile.substring(l+1);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Get the filename only without directories."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         sSourceFileNameOnly = sDownloadFile.substring(x + 1);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         File InputFile = new File(sDownloadFile);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         FileInputStream fis = new FileInputStream(InputFile); "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         try"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            vAppSubtask.TraceLine( ^Download File: ^, ^Setting outputStream and attaching file^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "            String contenttype = ^application/octet-stream^;  "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setContentType(contenttype);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setHeader(^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            ServletOutputStream outStream = response.getOutputStream();"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            int c = 0;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ((c=fis.read())!=-1)"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               outStream.write(c); "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.flush(); "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.close();"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         catch (Exception e) "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (InputFile!=null && InputFile.exists()) "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //TraceLine"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               vAppSubtask.TraceLine( ^Error downloading file: ^, sDownloadFile );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "            fis.close();"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            // The end of the Action is the same as "Same Window Refresh" above.
            szWriteBuffer = "         // Stay on Window with Refresh"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      }"
            //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END // Download File option.

   szWriteBuffer = "      break;"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   IF vDialogCtrl > 0
      DropView( vDialogCtrl )
   END

END

/*************************************************************************************************
**
**    OPERATION: GenJSP_TableExport
**    This function loops through all the tables on the page and creates a javascript function for each
**    that allows the user to view the table export data (tab delimited data from the table for exporting
**    g into excel that is created in a <textarea>).
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSP_TableExport( VIEW vDialog BASED ON LOD TZWDLGSO,
                    INTEGER lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 1 ) szNoPositioning )

   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag

      // Process Combobox entries
      IF szControlType = "Grid"

         // For each table, we will create an export option that allows the user to
         // copy the contents of a table into excel.  The problem is that this only reflects
         // values of the table as the page is being built so if the table can be changed by
         // the user, those changes would not be seen unless the page was refreshed,  Don't create
         // this export option if "No Table Export" is a webcontrolproperty for the table.
         // Also don't create this export option if we are using absolute positioning.
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table Export Option"
         IF RESULT >= zCURSOR_SET AND szNoPositioning = "Y"

            szWriteBuffer = "function " + szCtrlTag + "ExportOnClick( )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      // This is for indicating whether the user hit the window close box."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      isWindowClosing = false;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // _IsDocDisabled code.
            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      if (document.getElementById(^btmp" + szCtrlTag + "^).src.indexOf(^btn_expand^) >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^gb" + szCtrlTag + "^).style.display = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^o" + szCtrlTag + "^).value = document.getElementById(^h" + szCtrlTag + "^).value;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^o" + szCtrlTag + "^).select();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById('btmp" + szCtrlTag + "').src=^./images/btn_contract-o.gif^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^hide export data^;"
            szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^Copy and paste content to excel^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^gb" + szCtrlTag + "^).style.display = ^none^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById('btmp" + szCtrlTag + "').src=^./images/btn_expand.gif^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^export table data^; "
            szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^Click here to display data for export^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

      ELSE
         // This is not a grid, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            GenJSP_TableExport( vDialog, lFile, szWriteBuffer, szNoPositioning )
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a grid

   END // FOR EACH vDialog.Control

END
