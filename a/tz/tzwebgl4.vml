//
//  generating JOE JSP
//
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildSideNavSection
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
BuildSideNavSectionJ( VIEW vDialog,
                      VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                      INTEGER lFile,
                      STRING (1) szReusableMenu,
                      VIEW vDialogMenu BASED ON LOD TZWDLGSO )

   STRING ( 10000 ) szWriteBuffer
   STRING ( 500 )   szNavigationTitle
   STRING ( 500 )   szText
   STRING ( 256 )   szTextID
   STRING ( 5 )     szSrch
   STRING ( 50 )    szHTML_Name
   STRING ( 50 )    szDialogName
   STRING ( 50 )    szOptionTag
   STRING ( 50 )    szMenuName
   //STRING ( 34 )    szActionName
   STRING ( 100 )   szActionName
   STRING ( 1 )     szStyleIsjMobile
   STRING ( 1 )     szStyleIsBootstrap
   STRING ( 256 )   szClass
   STRING ( 256 )   szClass2
   INTEGER          ActionType
   SHORT            nRC
   // SIDE NAVIGATION BAR
   //TraceLineS( "*** BuildSideNavSection Window *** ", vDialog.Window.Tag )
   
   szStyleIsjMobile = ""
   IF vDialog.WndStyle.Tag = "jMobile Window" OR vDialog.Window.WEB_JSPGenerationPositioning = "J" OR 
      ( vDialogRoot.Dialog.WEB_JSPGenerationPositioning = "J" AND vDialog.Window.WEB_JSPGenerationPositioning = "" )
      szStyleIsjMobile = "Y"
   END      
   szStyleIsBootstrap = ""
   IF vDialog.Window.WEB_JSPGenerationPositioning = "B" OR 
      ( vDialogRoot.Dialog.WEB_JSPGenerationPositioning = "B" AND vDialog.Window.WEB_JSPGenerationPositioning = "" )
      szStyleIsBootstrap = "Y"
   END 
        
   IF vDialogRoot.Menu EXISTS 
      szMenuName = vDialogRoot.Menu.Tag 
      IF vDialogRoot.Menu.CSS_Class != ""
         szClass = " class=^" + vDialogRoot.Menu.CSS_Class + "^ " 
      END
   END

   szWriteBuffer = ""
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   IF szStyleIsBootstrap = ""
      szWriteBuffer = "<div id=^leftcontent^>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "<!-- Side Navigation *********************** -->"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<div id=^sidenavigation^" + szClass + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   ELSE
      szWriteBuffer = "<nav id=^sidebar^ class=^sidebar^>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<%@ include file=^./include/sidemenubootstrap.inc^ %>"    
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<div class=^sidebar-content^>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "<div class=^sidebar-user^>"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "</div>"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   IF szStyleIsjMobile = "Y" 
      szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
   ELSE
   IF szStyleIsBootstrap = "Y"
      szWriteBuffer = "   <ul  id=^available-apps^ class=^sidebar-nav^>"
   ELSE
      szWriteBuffer = "   <ol id=^" + szMenuName + "^ name=^" + szMenuName + "^>"
   END
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


   //FOR EACH vDialogRoot.OptAct WITHIN vDialogRoot.Menu
   FOR EACH vDialogRoot.Option WITHIN vDialogRoot.Menu
   
      //szNavigationTitle = vDialogRoot.Option.Text
      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText = vDialogRoot.Option.Text
         szTextID = vDialogRoot.Option.LangID
         zSearchAndReplace( szText, 500, "\", "\\" )
         szSrch = "\" + QUOTES 
         zSearchAndReplace( szText, 500, QUOTES, szSrch )
         IF szTextID = ""
            szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^)%>" 
         ELSE 
            szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^, ^" + szTextID + "^)%>" 
         END
         //szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^)%>" 
      ELSE
         szNavigationTitle = vDialogRoot.Option.Text
      END

      IF vDialogRoot.OptAct EXISTS      
         szDialogName = vDialogRoot.OptAct.DialogName
      ELSE
         szDialogName = ""
      END
      IF szDialogName = ""
         szDialogName = "NoDialogName"
      END

      IF szReusableMenu = "Y"
         szMenuName = "sm" + vDialogRoot.Option.Tag
      ELSE
         szMenuName = vDialogRoot.Option.Tag
      END

   // szHTML_Name = szDialogName + vDialogRoot.OptAct.WindowName + ".jsp"
      IF vDialogRoot.OptAct EXISTS

         // Because the menu actions can be created on separate windows from the control
         // actions, we need to make sure these actions are unique.  We will prefix a
         // "m" to the main menu actions and prefix a "sm" to the side menu actions.
         IF szReusableMenu = "Y"
            szActionName = "onclick=^" + "sm" + vDialogRoot.OptAct.Tag + "()^"
            //szActionName = "sm" + vDialogRoot.OptAct.Tag
         // lLth = zstrlen( szActionName )
         // IF lLth > 32
         //    MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
         //                 szActionName,
         //                 zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         // END
         ELSE
            szActionName = "onclick=^" + vDialogRoot.OptAct.Tag + "()^"
            //szActionName = vDialogRoot.OptAct.Tag
         END
         ActionType = vDialogRoot.OptAct.Type
      ELSE
         szActionName = ""
         ActionType = 0
      END

      // If the window we are currently generating is the same window that this
      // side menu points to, then we want to set a class on this option.  The
      // reason is so that we can tell which side menu option the user has selected.
      IF vDialogRoot.OptAct EXISTS AND vDialogRoot.OptAct.WindowName = vDialog.Window.Tag     
      //IF vDialogRoot.OptAct.WindowName = vDialog.Window.Tag
         szClass2 = " class=^sideselected^ "
      ELSE
         szClass2 = ""
      END
      
      IF vDialogRoot.Option.CSS_Class != "" 
         szClass = " class=^" + vDialogRoot.Option.CSS_Class + "^"
      ELSE
         szClass = ""
      END

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szOptionTag = vDialogRoot.Option.Tag
      szWriteBuffer = "   csrRC = vKZXMLPGO.cursor( ^DisableMenuOption^ ).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !csrRC.isSet() ) //if ( nRC < 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF szStyleIsBootstrap = ""
         //szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
         szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " " + szActionName + ">" + szNavigationTitle + "</a></li>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      ELSE
         IF vDialogRoot.Option.WebHTML5Attribute != ""
            szText = "<i class=^align-middle mr-2 fas fa-fw " + vDialogRoot.Option.WebHTML5Attribute  + "^></i>"
         ELSE
            szText = ""
         END
         szWriteBuffer = "       <li class=^sidebar-item^ id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
         //szWriteBuffer = szWriteBuffer + "<a class=^sidebar-link^ href=^#^ " +  " onclick=^" + szActionName + "()^><i class=^align-middle mr-2 fas fa-fw " + szText  + "^></i> <span class=^align-middle^>" + szNavigationTitle + "</span></a></li>"
         szWriteBuffer = szWriteBuffer + "<a class=^sidebar-link^ href=^#^ " +  " " + szActionName + ">" + szText + " <span class=^align-middle^>" + szNavigationTitle + "</span></a></li>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   // This is for building a default menu?
   // Trying to get this file to compile.
   IF vDialogMenu != 0
      CreateViewFromViewForTask( vDialogMenu, vDialogMenu, 0 )
      SET CURSOR FIRST vDialogMenu.Menu WHERE vDialogMenu.Menu.ZKey = vDialogMenu.DfltMenu.ZKey
      FOR EACH vDialogMenu.OptAct WITHIN vDialogMenu.Menu
         //szNavigationTitle = vDialogMenu.Option.Text
         // KJS 09/30/16 - Language Conversion.
         // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
         // So for now, I am always using, if the flag is set.
         IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
            szText = vDialogMenu.Option.Text
            szTextID = vDialogMenu.Option.LangID
            zSearchAndReplace( szText, 500, "\", "\\" )
            szSrch = "\" + QUOTES 
            zSearchAndReplace( szText, 500, QUOTES, szSrch )
            IF szTextID = ""
               szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^)%>" 
            ELSE 
               szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^, ^" + szTextID + "^)%>" 
            END
            //szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^)%>" 
         ELSE
            szNavigationTitle = vDialogMenu.Option.Text
         END
         szDialogName = vDialogMenu.OptAct.DialogName
         IF szDialogName = ""
            szDialogName = "NoDialogName"
         END

      // szHTML_Name = szDialogName + vDialogMenu.OptAct.WindowName + ".jsp"
         IF vDialogMenu.OptAct EXISTS
            szActionName = "onclick=^" + vDialogMenu.OptAct.Tag + "()^"
            //szActionName = vDialogMenu.OptAct.Tag
            ActionType = vDialogMenu.OptAct.Type
         ELSE
            szActionName = ""
            ActionType = 0
         END

         //szMenuName = vDialogRoot.Option.Tag         
         szMenuName = vDialogMenu.Option.Tag         

         // If the window we are currently generating is the same window that this
         // side menu points to, then we want to set a class on this option.  The
         // reason is so that we can tell which side menu option the user has selected.
         IF vDialogMenu.OptAct.WindowName = vDialog.Window.Tag
            szClass2 = "class=^sideselected^ "
         ELSE
            szClass2 = ""
         END
      
         IF vDialogMenu.Option.CSS_Class != "" 
            szClass = "class=^" + vDialogMenu.Option.CSS_Class + "^"
         ELSE
            szClass = ""
         END

         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szOptionTag = vDialogMenu.Option.Tag
         szOptionTag = vDialogMenu.Option.Tag
         szWriteBuffer = "   csrRC = vKZXMLPGO.cursor( ^DisableMenuOption^ ).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( !csrRC.isSet( ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF szStyleIsBootstrap = ""
            //szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
            szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " " + szActionName + ">" + szNavigationTitle + "</a></li>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
            //szText = vDialogMenu.Option.WebHTML5Attribute
            IF vDialogMenu.Option.WebHTML5Attribute != ""
               szText = "<i class=^align-middle mr-2 fas fa-fw " + vDialogMenu.Option.WebHTML5Attribute  + "^></i>"
            ELSE
               szText = ""
            END
            szWriteBuffer = "       <li class=^sidebar-item^ id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
            //szWriteBuffer = szWriteBuffer + "<a class=^sidebar-link^ href=^#^ " +  " onclick=^" + szActionName + "()^><i class=^align-middle mr-2 fas fa-fw " + szText + "^></i> <span class=^align-middle^>" + szNavigationTitle + "</span></a></li>"
            szWriteBuffer = szWriteBuffer + "<a class=^sidebar-link^ href=^#^ " +  " " + szActionName + ">" + szText + " <span class=^align-middle^>" + szNavigationTitle + "</span></a></li>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
         END

         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

      DropView( vDialogMenu )
   END

   // Division ending for Navigation Bar.
   IF szStyleIsjMobile = "Y" OR szStyleIsBootstrap = "Y"
      szWriteBuffer = "   </ul>"
   ELSE
      szWriteBuffer = "   </ol>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   IF szStyleIsBootstrap = ""
      szWriteBuffer = "</div> <!-- sidenavigation -->"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END
   IF vDialogRoot.Dialog.WEB_LeftSideInclude != ""
      //szWriteBuffer = "<%@include file=^./include/leftcontent.inc^ %>"
      szWriteBuffer = "<!-- left content include file -->"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<%@include file=^" + vDialogRoot.Dialog.WEB_LeftSideInclude + "^ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END
   szWriteBuffer = "</div>  <!-- leftcontent -->"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   IF szStyleIsBootstrap = "Y"
      szWriteBuffer = "</nav>  <!-- collapse side nav -->"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = ""
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   /*
   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      // Begin the division for the main body content.
      szWriteBuffer = "<div id=^content^>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END
   */
END
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildSideNavSection
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
BuildMenuListJ( VIEW vDialog BASED ON LOD TZWDLGSO,
                VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                INTEGER lFile,
                STRING (50) szMenuName )

   STRING ( 10000 ) szWriteBuffer
   STRING ( 500 )   szNavigationTitle
   STRING ( 500 )   szText
   STRING ( 256 )   szTextID
   STRING ( 5 )     szSrch
   STRING ( 50 )    szHTML_Name
   STRING ( 50 )    szDialogName
   STRING ( 50 )    szOptionTag
   //STRING ( 50 )    szMenuName
   STRING ( 34 )    szActionName
   STRING ( 256 )   szClass
   STRING ( 256 )   szClass2
   STRING ( 256 )   szHTML5Attr
   INTEGER          ActionType
   SHORT            nRC

   IF vDialogRoot.Menu EXISTS 
      szMenuName = vDialogRoot.Menu.Tag 
      IF vDialogRoot.Menu.CSS_Class != ""
         szClass = " class=^" + vDialogRoot.Menu.CSS_Class + "^ " 
      END
   END
   szHTML5Attr = ""
   IF vDialogRoot.Menu.WebHTML5Attribute != ""
      szHTML5Attr = " " + vDialogRoot.Menu.WebHTML5Attribute + " "
   END

   // KJS 11/05/18 - To be ADA compliant, we are supposed to use <ol not <ul. But when using jMobile and "data-role", we need to
   // use <ul>. Does not render correctly using <ol>.
   IF vDialogRoot.WndStyle.Tag = "jMobile Window"
      szWriteBuffer = "<div data-role=^listview^ id=^div" + szMenuName + "^" + szClass + ">"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szHTML5Attr + ">"
   ELSE
      szWriteBuffer = "<div id=^div" + szMenuName + "^" + szClass + ">"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <ol id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szHTML5Attr + ">"
   END      
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   
   //szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
   //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   FOR EACH vDialogRoot.OptAct WITHIN vDialogRoot.Menu
      //szNavigationTitle = vDialogRoot.Option.Text
      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText = vDialogRoot.Option.Text
         szTextID = vDialogRoot.Option.LangID
         zSearchAndReplace( szText, 500, "\", "\\" )
         szSrch = "\" + QUOTES 
         zSearchAndReplace( szText, 500, QUOTES, szSrch )
         IF szTextID = ""
            szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^)%>" 
         ELSE 
            szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^, ^" + szTextID + "^)%>" 
         END
         //szNavigationTitle = "<%=LangConv.getLanguageText(^" + szText + "^)%>" 
      ELSE
         szNavigationTitle = vDialogRoot.Option.Text
      END
      szDialogName = vDialogRoot.OptAct.DialogName
      IF szDialogName = ""
         szDialogName = "NoDialogName"
      END

      //IF szReusableMenu = "Y"
      //   szMenuName = "sm" + vDialogRoot.Option.Tag
      //ELSE
         szMenuName = vDialogRoot.Option.Tag
      //END

   // szHTML_Name = szDialogName + vDialogRoot.OptAct.WindowName + ".jsp"
      IF vDialogRoot.OptAct EXISTS

         szActionName = vDialogRoot.OptAct.Tag
         ActionType = vDialogRoot.OptAct.Type
      ELSE
         szActionName = ""
         ActionType = 0
      END

      // If the window we are currently generating is the same window that this
      // side menu points to, then we want to set a class on this option.  The
      // reason is so that we can tell which side menu option the user has selected.
      //IF vDialogRoot.OptAct.WindowName = vDialog.Window.Tag
      //   szClass2 = " class=^sideselected^ "
      //ELSE
         szClass2 = ""
      //END
      
      IF vDialogRoot.Option.CSS_Class != "" 
         szClass = " class=^" + vDialogRoot.Option.CSS_Class + "^"
      ELSE
         szClass = ""
      END
      
      szHTML5Attr = ""
      IF vDialogRoot.Option.WebHTML5Attribute != ""
         szHTML5Attr = " " + vDialogRoot.Option.WebHTML5Attribute + " "
      END

      szWriteBuffer = "<%"
      szOptionTag = vDialogRoot.Option.Tag
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   csrRC = vKZXMLPGO.cursor( ^DisableMenuOption^ ).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !csrRC.isSet() ) //if ( nRC < 0 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //szWriteBuffer = "       <li><a href=^#^ " + szClass + " onclick=^" + szActionName + "( )^>" + szNavigationTitle + "</a></li>"
      // In the case of jmobile, I am putting the HTML5 and class on the <a href
      IF vDialogRoot.WndStyle.Tag = "jMobile Window"
         szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^><a href=^#^ " + szHTML5Attr + szClass + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      ELSE
         szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szHTML5Attr + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      END
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "<%"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END

   // Division ending for Navigation Bar.
   IF vDialogRoot.WndStyle.Tag = "jMobile Window"
      szWriteBuffer = "   </ul>"
   ELSE
      szWriteBuffer = "   </ol>"
   END
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</div> <!-- menu list end -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCalendar
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCalendar( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format a CALENDAR control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 256 ) szStyle
   STRING ( 256 ) szStyleCalendar
   STRING ( 256 ) szClass
   STRING ( 256 ) szContextName
   STRING ( 100 ) szDisabled
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 16 )  szTabIndex
   STRING ( 50 )  szActionName
   STRING ( 50 )  szKeyPressCode
   STRING ( 500 ) szActionCode
   STRING ( 500 ) szCloseUpCode
   DECIMAL        dDLUnits
   INTEGER nRC

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorColor = ^color:red;^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorColor = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
         
      GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
         
      // KJS 03/13/18 - If the view is read only, then we want to set the combo box to disabled.
      // We only do this if the zeidon.ini has UseZeidonControlActionsView
      IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y" 
   
         szWriteBuffer = "               strDisabled = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //szWriteBuffer = "                  strCtrlActionsView = strCtrlActionsView + ^" + szCtrlTag + ",Disable,^;"
         //szWriteBuffer = "                  strCtrlActions = strCtrlActions + ^" + szCtrlTag + ",Disable,^;"
         szWriteBuffer = "                  strDisabled = ^disabled^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
      END
      
      IF vDialog.CtrlMapContext EXISTS
         szContextName = "^" + vDialog.CtrlMapContext.Name + "^"
      ELSE
         szContextName = "strDateFormat"
      END      
      szWriteBuffer = "            strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( " + szContextName + " );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      //**************** Get control event actions *********/
      
      // KJS 11/07/16 - Not sure when this was put in, but I don't think it's working and I'm not exactly sure where
      // we get the Event.Type numbers because they are what we have in cheetah, but not what we have in zencas (or anywhere
      // else). Do we have any calendar actions in windows, because then I can't just change the event.type...
      // I'm going to try using the name for right now instead of number?????
      // Also... For some reason if I have the CloseUp action AND a context on the date (which then calls the scwShowWFormat action
      // as opposed to the scwShow action) then clicking on the calendar image doesn't work. :(
      szActionCode = ""
      szCloseUpCode = ""
      FOR EACH vDialog.Event
         IF vDialog.EventAct EXISTS
            szActionName = vDialog.EventAct.Tag
            IF vDialog.Event.Type = 80 // Event was GetFocus but I have deleted that because it wasn't working correctly.
               szActionCode = szActionCode + " onfocus=^" + szActionName + "( )^ "
            ELSE
            IF vDialog.Event.Type = 48  // Event is LoseFocus 
               szActionCode = szActionCode + " onblur=^" + szActionName + "( )^ "
            ELSE
            IF vDialog.Event.Type = 96 OR vDialog.Event.Type = 64 // Event is CloseUp
               szCloseUpCode = szCloseUpCode + "scwNextAction=" + szActionName + ".runsAfterSCW(this);"
            END
            END
            END
         END
      END
      //***************************************************

      // We will set the height to the constant 32 px.
      PIX_PER_DU( vDialog, dDLUnits )
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
      szHeight = "32"
      szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"

      // If szNoPositioning is null then we are using absolute positioning when creating controls.
      IF szNoPositioning = ""

         zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
         zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
         szStyle = szStyle + "position:absolute;left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
         szStyleCalendar = " style=^width:80px^"
      ELSE
         szStyle = szStyle + "^ "
         szStyleCalendar = " style=^width:80px^"
      END

      IF szNoPositioning = "S"
         szStyle = "" // No style information
         szStyleCalendar = ""
      END

      CreateTabIndexString( vDialog, szTabIndex )

      CreateDisabledString( vDialog, szDisabled )
      
      // If there is a Default button for the window, we must add some characters
      // to the end of the input statement.
      szKeyPressCode = ""
      CreateViewFromView( vDialogRoot, vDialog )
      nRC = ResetViewFromSubobject( vDialogRoot )
      LOOP WHILE nRC = 0
         nRC = ResetViewFromSubobject( vDialogRoot )
      END
      IF vDialogRoot.Window.DfltButton != ""
         szKeyPressCode = szKeyPressCode + " onkeypress=^return _OnEnter( event )^"
      END      
      

      // Multiple class names must be separated by white space characters.
      szClass = vDialog.Control.CSS_Class

      szWriteBuffer = "<span " + szStyle + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF szClass = ""
         szWriteBuffer = "   <input name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szDisabled +
                             szActionCode + szStyleCalendar + " type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + szKeyPressCode + " />"
      ELSE
         szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szDisabled +
                             szActionCode + szStyleCalendar + " type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + szKeyPressCode + " />"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      // KJS 03/13/18 - If the view is read only, then we want to set the combo box to disabled.
      // We only do this if the zeidon.ini has UseZeidonControlActionsView
      IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y" 
         szWriteBuffer = "   <% if (strDisabled == ^^) { %>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
      szWriteBuffer = "   <img src=^images/scw.gif^  name=^" + szCtrlTag + "Img" + szRepeatGrpKey + "^ id=^" + szCtrlTag + "Img" + szRepeatGrpKey + "^ <%=strDisabled%> title=^Select Date^ alt=^Select Date^"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 03/16/16 - Added scwShowWFormat to scw.js file so that if we have a format on the calendar, then we use that. If no context, I am just calling scwShow, even
      // though I could call scwShowWFormat with zDateFormat... which would do that same thing. This is compatible for any jsp pages that are older and don't use a context.
      IF vDialog.CtrlMapContext EXISTS
         szWriteBuffer = "        onclick=^" + szCloseUpCode + "scwShowWFormat( document.getElementById( '" + szCtrlTag + szRepeatGrpKey + "' ), this, '" + vDialog.CtrlMapContext.Name + "' );^ " + szTabIndex + " />"
      ELSE
         szWriteBuffer = "        onclick=^" + szCloseUpCode + "scwShow( document.getElementById( '" + szCtrlTag + szRepeatGrpKey + "' ), this );^ " + szTabIndex + " />"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y" 
         szWriteBuffer = "   <% } %>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "</span>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCheckBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCheckBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format an CHECKBOX control.
   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 100 ) szDisabled
   STRING ( 300 ) szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 20 )  szSpaces
   STRING ( 256 ) szBlob
   STRING ( 256 ) szUnChecked
   STRING ( 500 ) szText
   STRING ( 500 ) szText2
   STRING ( 256 ) szTextID
   STRING ( 5 )   szSrch
   INTEGER lTemp
   INTEGER lLen
   
   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
   
   // See if the checkbox has an unchecked value. The checked value is in attrib RadioOrCheckboxValue but we 
   // don't have an attrib for the unchecked value.
   /*
   lTemp = 256
   GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
   lLen = zstrlen( szBlob )
   szUnChecked = ""
   IF lTemp > ( lLen + 2 )
      ZeidonCopyWithinString( szBlob, 1, lLen + 2, 256 )
      szUnChecked = szBlob
   END
  */
   
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strErrorMapValue = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   IF vDialog.CtrlMapView EXISTS
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y"
         szWriteBuffer = "      strDisabled = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //szWriteBuffer = "                  strCtrlActionsView = strCtrlActionsView + ^" + szCtrlTag + ",Disabled,^;"
         //szWriteBuffer = "                  strCtrlActions = strCtrlActions + ^" + szCtrlTag + ",Disable,^;"
         szWriteBuffer = "         strDisabled = ^disabled^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strRadioGroupValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "   if ( StringUtils.equals( strRadioGroupValue, ^" +
                   vDialog.Control.RadioOrCheckboxValue + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   CreateTabIndexString( vDialog, szTabIndex )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   IF vDialog.Control.VisibleBorder = "Y"
      szPosition = szPosition + "border:solid;border-width:2px;border-style:groove;"
   END

   szStyle = "style=^" + szPosition + "^" + szTabIndex

   IF szNoPositioning = "S"
      szStyle = "" // No style
   END

   CreateDisabledString( vDialog, szDisabled )

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle = ""
      szTitleHTML = ""
   ELSE
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   IF vDialog.EventAct EXISTS
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + " onclick=^" + vDialog.EventAct.Tag + "( )^>"
   ELSE
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + ">"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<input type=^hidden^ name=^zhidden" + szCtrlTag + szRepeatGrpKey + "^ id=^zhidden" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szDisabled + " value=^^ >"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
      // If we aren't putting in absolute positioning, make sure that there is a little space between
      // the checkbox and the text.
      szSpaces = "&nbsp "
   ELSE
   IF szNoPositioning = "S"
      szStyle = ""  // No style information.
      szSpaces = ""
   ELSE
      CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      szSpaces = ""
   END
   END
   szClass = vDialog.Control.CSS_Class
   

   // KJS 09/30/16 - Language Conversion.
   // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
   // So for now, I am always using, if the flag is set.
   IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
      szText2 = vDialog.Control.Text
      szTextID = vDialog.Control.LangID
      zSearchAndReplace( szText2, 1000, "\", "\\" )
      szSrch = "\" + QUOTES 
      zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
      szSrch = ""
      IF szTextID = ""
         szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
      ELSE 
         szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
      END
      //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
   ELSE
      szText = vDialog.Control.Text
   END   

   IF szClass = ""
      szWriteBuffer = "<span name=^span" + szCtrlTag + szRepeatGrpKey + "^ id=^span" + szCtrlTag + szRepeatGrpKey + "^ " + szTitleHTML + szStyle + ">" + szSpaces + szText + "</span>"
   ELSE
      szWriteBuffer = "<span name=^span" + szCtrlTag + szRepeatGrpKey + "^ id=^span" + szCtrlTag + szRepeatGrpKey + "^ class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szSpaces + szText + "</span>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteComboBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteComboBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Combo boxes on OUTPUT

   // There are two kinds of combo boxes on output.
   // 1. Domain combo boxes, which need to get the individual table values
   //    from core calls.
   // 2. Select combo boxes (e.g.  Automatic Include, Set Foreign Key, etc.)
   //    which read the data values from an object, the same as a list box.
   // These two conditions are handled quite separately below, even though
   // the resulting HTML is basically the same.

   VIEW vList   BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 100 ) szCtrlTagRG
   STRING ( 100 ) szInListCtrlTag
   STRING ( 50 )  szKeyPressCode
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 100 ) szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   SHORT          nRC

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = "class=^" + vDialog.Control.CSS_Class + "^"
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   szHeight = "20"
   // The height used to be hard coded but we took that out!!!
   //szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"
   szStyle = "style=^width:" + szWidth + "px;"

   // If szNoPositioning is null then we are using absolute positioning.
   IF szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )

      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
      // CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
      szStyle = szStyle + "^ "
   END

   IF szNoPositioning = "S"
      szStyle = "" // No style information
   END
   szStyle = szStyle + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^; "
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0)

   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
      
   // KJS 03/13/18 - If the view is read only, then we want to set the combo box to disabled.
   // We only do this if the zeidon.ini has UseZeidonControlActionsView
   IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y" AND vDialog.CtrlMapView EXISTS

      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                   "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "       strDisabled = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "       if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "                  strCtrlActionsView = strCtrlActionsView + ^" + szCtrlTag + ",Disable,^;"
      //szWriteBuffer = "                  strCtrlActions = strCtrlActions + ^" + szCtrlTag + ",Disable,^;"
      szWriteBuffer = "          strDisabled = ^disabled^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   END
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )


   lSubtype = vDialog.Control.Subtype
   nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
   IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

      // Domain type combo box

      //szWriteBuffer = "<input name=^h" + szCtrlTag + szRepeatGrpKey + "^ id=^h" + szCtrlTag + szRepeatGrpKey + "^ type=^hidden^ value=^0^ >"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // The Select Action is either onfocusout or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onblur
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction   = "onchange"
         szSelectFunction = "OnChange"
      END
      
      // If there is a Default button for the window, we must add some characters
      // to the end of the input statement.
      szKeyPressCode = ""
      GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
      //CreateViewFromView( vDialogRoot, vDialog )
      //nRC = ResetViewFromSubobject( vDialogRoot )
      //LOOP WHILE nRC = 0
      //   nRC = ResetViewFromSubobject( vDialogRoot )
      //END
      IF vDialogRoot.Window.DfltButton != ""
         szKeyPressCode = szKeyPressCode + " onkeypress=^return _OnEnter( event )^"
      END            

      CreateDisabledString( vDialog, szDisabled )
      IF szRepeatGrpKey = ""
         szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> size=^1^ " +
                         szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( )^ " + szKeyPressCode + ">"
      ELSE
         szCtrlTagRG = szRepeatGrpKey
         //TraceLineS("***** szRepeatGrpKey -----> ", szRepeatGrpKey )
         zSearchAndReplace( szCtrlTagRG, 100, "::", "" )
         //TraceLineS("***** szCtrlTagRG    -----> ", szCtrlTagRG )
         szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " +
                         szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( 'h" + szCtrlTag  + szRepeatGrpKey + "', this, '" + 
                         szCtrlTagRG + "' )^ " + szKeyPressCode + ">"
                         //szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( 'h" + szCtrlTag  + szRepeatGrpKey + ', this, <%=strEntityKeyRG%> )^" + ">"
      END

/*
      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " +
                         szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( )^" + ">"
      END
*/      
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         // KJS 10/22/14 - If the value from the database is not part of the domain anymore, we will put that option in but
         // we will set it as disabled.
         szInListCtrlTag = "inList" + szCtrlTag

         szWriteBuffer = "   boolean " + szInListCtrlTag + " = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
         // If the view is readOnly, then we want to disable this control.
         /*
         GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
         IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y"
            szWriteBuffer = "               if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "                  strCtrlActionsView = strCtrlActionsView + ^" + szCtrlTag + ",Disable,^;"
            szWriteBuffer = "                  strCtrlActions = strCtrlActions + ^" + szCtrlTag + ",Disable,^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         */
         

         // We get each table value from a core call.
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            szWriteBuffer = "      List<TableEntry> list = JspWebUtils.getTableDomainValues( " + vDialog.CtrlMapView.Name + " , ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Get the current value of the combo box.
            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
                     // KJS 10/22/14 - Right now we are not adding the context name, we only want the default, which
                     // I am currently assuming has ALL the values (old and new) of this domain. When we get DGs domain fix
                     // I think we need to put this back!!!!!!!
                     //vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "         if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            IF vDialog.CtrlMapER_Attribute.NotNull != "Y"
               // Generate code when attribute is NOT required.
               szWriteBuffer = "      // Code for NOT required attribute, which makes sure a blank entry exists."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( strComboCurrentValue == ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         " + szInListCtrlTag + " = true;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         <option selected=^selected^ value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         <option value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      for ( TableEntry entry : list )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         String internalValue = entry.getInternalValue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         String externalValue = entry.getExternalValue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Perhaps getInternalValue and getExternalValue should return an empty string, "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // but currently it returns null.  Set to empty string. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( externalValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            internalValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            externalValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // The following if statement eliminates a null value, which would be the second null in the combo box.
            szWriteBuffer = "         if ( !StringUtils.isBlank( externalValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( StringUtils.equals( strComboCurrentValue, externalValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "               " + szInListCtrlTag + " = true;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // KJS 03/08/18 - The old way was setting value to externalValue but we are now setting to internalValue.
            // This is better for language conversion and javascript. Not to mention that if the external name changes... 
            szWriteBuffer = "               <option selected=^selected^ value=^<%=internalValue%>^><%=externalValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // KJS 03/08/18 - The old way was setting value to externalValue but we are now setting to internalValue.
            // This is better for language conversion and javascript. Not to mention that if the external name changes... 
            szWriteBuffer = "               <option value=^<%=internalValue%>^><%=externalValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }  // for ( TableEntry entry"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            // KJS 10/22/14 - Add this value as disabled.
            szWriteBuffer = "      // The value from the database isn't in the domain, add it to the list as disabled."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( !" + szInListCtrlTag + " )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         <option disabled selected=^selected^ value=^<%=strComboCurrentValue%>^><%=strComboCurrentValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      }  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            
         END
      END

      szWriteBuffer = "   }  // if view != null"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + szRepeatGrpKey + "^ id=^h" + szCtrlTag + szRepeatGrpKey + "^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   ELSE  
      // Select type combo box
      CreateViewFromViewForTask( vList, vDialog, 0 )
      SET CURSOR NEXT vList.CtrlMap
      CreateViewFromViewForTask( vEntity, vList, 0 )
      SET CURSOR NEXT vEntity.CtrlMap
      CreateViewFromViewForTask( vScope, vEntity, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      // The Select Action is either onblur or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onfocusout.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction = "onchange"
         szSelectFunction = "OnChange"
      END
      
      szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> size=^1^" +
                      szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( )^" + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         szWriteBuffer = "   " + vList.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vList.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vList.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If mapping is specified, set up the value to be used in selecting
         // the correct entry.
         IF vDialog.CtrlMapLOD_Attribute EXISTS
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name +
                            "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END
            szWriteBuffer = "            strComboCurrentValue = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "            if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // See if a list entity has been specified, and if so, use it.
         IF vEntity.CtrlMapLOD_Entity EXISTS
            szListEntityName = vEntity.CtrlMapLOD_Entity.Name
         ELSE
            szListEntityName = vList.CtrlMapRelatedEntity.Name
         END

         // See if a scoping entity has been specified, and if so, use it.
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            ELSE
               szScopingEntityName = ""
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vList.CtrlMapView.Name + ".newView( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboSelectedValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Auto Include
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // For Auto Include, we are automatically putting a blank entry as the first entry in the
            // combobox.  With this in mind, there is code in DoInputMapping that assumes the first
            // entry in a combobox is null (or blank).  What if the user doesn't want a blank entry?
            // and wants to use the "No null in list" checkbox in the painter.  I would need to
            // change this code but I'm not sure how because I can't tell from DoInputMapping what
            // the value of combobox.selectedindex[0] is, I only know they selected the index 0.
            szWriteBuffer = "      // For Auto Include, always add a null entry to the combo box."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      ComboCount++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( StringUtils.isBlank( strComboCurrentValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option selected=^selected^></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF lSubtype = 0
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( csrRC.isSet() )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vList.CtrlMapLOD_Attribute EXISTS
            IF vList.CtrlMapContext EXISTS
               szContextName = vList.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag + ".cursor( ^" +
                            vList.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                            vList.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "         if ( strErrorMapValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // KJS 05/20/14 - There were some issues for auto include when the "list view" already had a blank entry, then
         // two blank entries were in the list and this caused errors. For auto include check if one of these entries is
         // blank, don't add it if it is.
         /*
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = "      // For Auto Include, we have already created a blank entry for the combobox, check to make"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // we don't add another blank entry. That will cause errors. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
          */
         szWriteBuffer = "         if ( StringUtils.equals( strComboCurrentValue, strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         /*
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = "         } // if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         */
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // IF lSubtype = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
            szWriteBuffer = "         csrRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( );"
                            //"^ ).setNext( " + szScopingEntityName + " );"
      // ELSE
      //    szWriteBuffer = "         nRC =  v" + szCtrlTag +
      //                    ".cursor( ^" + szListEntityName + "^ ).setNextWithinOi( );"
      // END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vList )
         DropView( vEntity )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + szRepeatGrpKey + "^ id=^h" + szCtrlTag + szRepeatGrpKey + "^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCtrlsRadio
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCtrlsRadio( VIEW vDialog BASED ON LOD TZWDLGSO,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       STRING ( 50 )    szIndent,
                       STRING ( 32 )    szRadioGroupName,
                       STRING ( 1 )     szNoPositioning,
                       INTEGER          lOffsetX,
                       INTEGER          lOffsetY,
                       STRING ( 100 )   szRepeatGrpKey )

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szCtrlTag
   STRING ( 256 ) szTitleHTML
   STRING ( 500 ) szText
   STRING ( 500 ) szText2
   STRING ( 256 ) szTextID
   STRING ( 300 ) szAbsoluteStyle
   STRING ( 5 )   szSrch
   STRING ( 100 ) szDisabled
   STRING ( 100 ) szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szActionName
   STRING ( 1 )   szFirstTimeThru
   INTEGER        nRC
   INTEGER        LastY_Pos
   
   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   

      IF vDialog.Control.CSS_Class != "" 
         szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
      ELSE
         szClass = ""
      END

         // Initialize the szAbsoluteStyle variable with X and Y values.
         //CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
      IF szNoPositioning = "S"
         szStyle = "" // No style information.
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
      END
      END

            //szRadioGroupName = szCtrlTag
            szWriteBuffer = "<% strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                            
               // KJS 03/13/18 - If the view is read only, then we want to set the combo box to disabled.
               // We only do this if the zeidon.ini has UseZeidonControlActionsView
               IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y" 
                  szWriteBuffer = "      strDisabled = ^^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strDisabled = ^disabled^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strRadioGroupValue = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
            //I'm going to do this like the way group box is (or was).  If there is text
            //to go on the box then we will create <fieldset.  If there is no text then
            //we will create a div.
            //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
            //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
            //an id and name but think it should.
            IF vDialog.Control.Text = ""
               //szWriteBuffer = "<div id=^gb" + szRadioGroupName + szRepeatGrpKey + "^ name=^gb" + szRadioGroupName + szRepeatGrpKey + "^ " + szClass + szStyle + ">"
               // Going to set the "id" of this outer div to the radiogrp tag, since each individual button has an id of the button tag and the NAME of the radio group tag.
               // This makes hiding/disabling easier.
               szWriteBuffer = "<div id=^" + szRadioGroupName + szRepeatGrpKey + "^ name=^gb" + szRadioGroupName + szRepeatGrpKey + "^ " + szClass + szStyle + ">"
            ELSE
               //szWriteBuffer = "<fieldset id=^gb" + szRadioGroupName + szRepeatGrpKey + "^ name=^gb" + szRadioGroupName + szRepeatGrpKey + "^ " + szClass + szStyle + ">"
               // Going to set the "id" of this outer div to the radiogrp tag, since each individual button has an id of the button tag and the NAME of the radio group tag.
               // This makes hiding/disabling easier.
               szWriteBuffer = "<fieldset id=^" + szRadioGroupName + szRepeatGrpKey + "^ name=^gb" + szRadioGroupName + szRepeatGrpKey + "^ " + szClass + szStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
         IF vDialog.Control.Text != ""
            // KJS 09/30/16 - Language Conversion.
            // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
            // So for now, I am always using, if the flag is set.
            IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
               // Seems like we need to check the text, and if the text has " then we shouldn't use the getLanguageText. Because one example we have
               // is where the text is <img src="./images/admi..." border="0".
               szText2 = vDialog.Control.Text
               szTextID = vDialog.Control.LangID
               zSearchAndReplace( szText2, 1000, "\", "\\" )
               szSrch = "\" + QUOTES 
               zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
               szSrch = ""
               IF szTextID = ""
                  szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
               ELSE 
                  szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
               END
               //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
            ELSE
               szText = vDialog.Control.Text
            END
            szWriteBuffer = "<div>" + szText + "</div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndent = szIndent + "   "



   
   // KJS 09/02/13 - Adding table around radio buttons. This was already done for C jsps...
   LastY_Pos = 0
   szFirstTimeThru = "Y"
   IF vDialog.Control EXISTS
      LastY_Pos = vDialog.Control.PSDLG_Y
   END
   szWriteBuffer = "   <table style=^margin:0px;padding:0px;^  name=^tbl" + szRadioGroupName + szRepeatGrpKey + "^ id=^tbl" + szRadioGroupName + szRepeatGrpKey + "^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <tr style=^border:0px^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
   // Process the individual Radio Buttons for a Radio Button Group.
   FOR EACH vDialog.Control
      szActionName = ""
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END
      END

      szCtrlTag = vDialog.Control.Tag

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( StringUtils.equals( strRadioGroupValue, ^" +
                               vDialog.Control.RadioOrCheckboxValue + "^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;  %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      CreateTabIndexString( vDialog, szTabIndex )

      // If this window is being generated with no positioning then
      // do not create the position in the style.
      IF szNoPositioning = ""
         CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
      END
      //CreateAbsolPosString( vDialog, szPosition, 0, 0 )
      CreateDisabledString( vDialog, szDisabled )
      FixStyleString( szStyle, szPosition, "", "" )

      IF szNoPositioning = "S"
         szStyle = "" // No style information
      END

      // If LastY_Pos = -100 then this is the first time thru...
      IF ( ( LastY_Pos < vDialog.Control.PSDLG_Y ) )
         szWriteBuffer = "   </tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   <tr style=^border:0px^>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      ELSE
      // KJS 07/22/10 - Currently for relative positioning, the radio buttons are being created one right after the other
      // (on the same line), no matter how I paint them on the screen).  Really to look at that but since we hardly ever
      // use them, I am for a fast fix going to append "&nbsp&nbsp&nbsp" after each button, to give some spacing.
         IF szNoPositioning = "Y" AND szFirstTimeThru = "N"
            szWriteBuffer = "      <td style=^border:0px;white-space:nowrap^>&nbsp&nbsp&nbsp</td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
      END

      szStyle = szStyle + szTabIndex
   // szStyle = " style=^position:absolute;LEFT:" + szX + ";TOP:" + szY + ";^ "
      IF  szActionName != ""
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                         "^ <%=strDisabled%> value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " onclick=^" + szActionName + "( )^  ></td>"
      ELSE
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                         "^ <%=strDisabled%> value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " ></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
      IF szNoPositioning = "S"
         szStyle = "" // No style information.
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      END
      END

      //If we put a title on the control, when the mouse is hovered over the control, this text will display.
      szTitleHTML = ""
      szTitle = vDialog.Control.DIL_Text
      IF szTitle != ""
         szTitleHTML = " title=^" + szTitle + "^ "
      END
   
      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText2 = vDialog.Control.Text
         szTextID = vDialog.Control.LangID
         zSearchAndReplace( szText2, 1000, "\", "\\" )
         szSrch = "\" + QUOTES 
         zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
         szSrch = ""
         IF szTextID = ""
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
         ELSE 
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
         END
         //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
      ELSE
         szText = vDialog.Control.Text
      END
   
      szClass = vDialog.Control.CSS_Class
      IF szClass = ""
         szWriteBuffer = "      <td style=^border:0px;white-space:nowrap^><span " + szTitleHTML + szStyle + ">" + szText + "</span></td>"
      ELSE
         szWriteBuffer = "      <td style=^border:0px;white-space:nowrap^><span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szText + "</span></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      LastY_Pos = vDialog.Control.PSDLG_Y
      szFirstTimeThru = "N"
   END
   szWriteBuffer = "   </tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   </table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )



            ResetViewFromSubobject( vDialog )
            IF vDialog.Control.Text = ""
               szWriteBuffer = "</div>"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteGridRadio
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteGridRadio( VIEW vDialog BASED ON LOD TZWDLGSO,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       STRING ( 50 )    szIndent,
                       STRING ( 32 )    szRadioGroupName,
                       STRING ( 1 )     szNoPositioning,
                       INTEGER          lOffsetX,
                       INTEGER          lOffsetY,
                       STRING ( 100 )   szRepeatGrpKey )

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szCtrlTag
   STRING ( 256 ) szTitleHTML
   STRING ( 500 ) szText
   STRING ( 500 ) szText2
   STRING ( 256 ) szTextID
   STRING ( 300 ) szAbsoluteStyle
   STRING ( 5 )   szSrch
   STRING ( 100 ) szDisabled
   STRING ( 100 ) szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szActionName
   STRING ( 1 )   szFirstTimeThru
   INTEGER        nRC
   INTEGER        LastY_Pos
   
   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   

         // Initialize the szAbsoluteStyle variable with X and Y values.

      IF vDialog.Control.CSS_Class != "" 
         szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
      ELSE
         szClass = ""
      END

         // Initialize the szAbsoluteStyle variable with X and Y values.
         //CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
      IF szNoPositioning = "S"
         szStyle = "" // No style information.
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
      END
      END

            szWriteBuffer = "<td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


            szRadioGroupName = vDialog.Control.Tag
            szWriteBuffer = "<% strErrorMapValue = ^^;%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //szWriteBuffer = "String strgrp" + szRadioGroupName + " = ^" + szRadioGroupName + "::<%=strEntityKey%>^" + strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //szWriteBuffer = "String strtmp" + szRadioGroupName + " = ^gb" + szRadioGroupName + "::" + szRepeatGrpKey + "^ + strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "String strtmp" + szRadioGroupName + " = ^tbl" + szRadioGroupName + "^ + strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

/*
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         str" + szRadioGroupName + "Value = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            */
            
            //szWriteBuffer = "%>"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndent = szIndent + "   "


   // Going to set the "id" of this outer div to the radiogrp tag, since each individual button has an id of the button tag and the NAME of the radio group tag.
   // This makes hiding/disabling easier.
   //szWriteBuffer = "<div name=^gb" + szRadioGroupName + "::<%=strEntityKey%>^ id=^gb" + szRadioGroupName + "::<%=strEntityKey%>^ " + szClass + ">"
   szWriteBuffer = "<div name=^gb" + szRadioGroupName + "::<%=strEntityKey%>^ id=^" + szRadioGroupName + "::<%=strEntityKey%>^ " + szClass + ">"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   
   // KJS 09/02/13 - Adding table around radio buttons. This was already done for C jsps...
   LastY_Pos = 0
   szFirstTimeThru = "Y"
   IF vDialog.Control EXISTS
      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   szWriteBuffer = "   <table style=^margin:0px;padding:0px;^  name=^tbl" + szRadioGroupName + "::<%=strEntityKey%>^ id=^tbl" + szRadioGroupName + "::<%=strEntityKey%>^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <tr style=^border:0px^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
   // Process the individual Radio Buttons for a Radio Button Group.
   FOR EACH vDialog.Control
      szActionName = ""
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END
      END

      szCtrlTag = vDialog.Control.Tag

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( StringUtils.equals( str" + szRadioGroupName + ", ^" +
                               vDialog.Control.RadioOrCheckboxValue + "^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;  %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      CreateTabIndexString( vDialog, szTabIndex )

      // If this window is being generated with no positioning then
      // do not create the position in the style.
      IF szNoPositioning = ""
         CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
      END
      //CreateAbsolPosString( vDialog, szPosition, 0, 0 )
      CreateDisabledString( vDialog, szDisabled )
      FixStyleString( szStyle, szPosition, "", "" )

      IF szNoPositioning = "S"
         szStyle = "" // No style information
      END

      // If LastY_Pos = -100 then this is the first time thru...
      IF ( ( LastY_Pos < vDialog.Control.PSDLG_Y ) )
         szWriteBuffer = "   </tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   <tr style=^border:0px^>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      ELSE
      // KJS 07/22/10 - Currently for relative positioning, the radio buttons are being created one right after the other
      // (on the same line), no matter how I paint them on the screen).  Really to look at that but since we hardly ever
      // use them, I am for a fast fix going to append "&nbsp&nbsp&nbsp" after each button, to give some spacing.
         IF szNoPositioning = "Y" AND szFirstTimeThru = "N"
            szWriteBuffer = "      <td style=^border:0px;white-space:nowrap^>&nbsp&nbsp&nbsp</td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
      END

      //szWriteBuffer = "<% strtmp" + szRadioGroupName + " = ^" + szCtrlTag + "::" + szRepeatGrpKey + "^ + strEntityKey;%>"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szStyle = szStyle + szTabIndex
   // szStyle = " style=^position:absolute;LEFT:" + szX + ";TOP:" + szY + ";^ "
      IF  szActionName != ""
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + "::<%=strEntityKey%>^ id=^" + szCtrlTag + "::<%=strEntityKey%>^" + 
                         " <%=strDisabled%> value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " onclick=^" + szActionName + "( this.id )^  ></td>"
      ELSE
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + "::<%=strEntityKey%>^ id=^" + szCtrlTag + "::<%=strEntityKey%>^" + 
                         " <%=strDisabled%> value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " ></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
      IF szNoPositioning = "S"
         szStyle = "" // No style information.
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      END
      END

      //If we put a title on the control, when the mouse is hovered over the control, this text will display.
      szTitleHTML = ""
      szTitle = vDialog.Control.DIL_Text
      IF szTitle != ""
         szTitleHTML = " title=^" + szTitle + "^ "
      END
   
      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText2 = vDialog.Control.Text
         szTextID = vDialog.Control.LangID
         zSearchAndReplace( szText2, 1000, "\", "\\" )
         szSrch = "\" + QUOTES 
         zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
         szSrch = ""
         IF szTextID = ""
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
         ELSE 
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
         END
         //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
      ELSE
         szText = vDialog.Control.Text
      END
   
      szClass = vDialog.Control.CSS_Class
      IF szClass = ""
         szWriteBuffer = "      <td style=^border:0px;white-space:nowrap^><span " + szTitleHTML + szStyle + ">" + szText + "</span></td>"
      ELSE
         szWriteBuffer = "      <td style=^border:0px;white-space:nowrap^><span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szText + "</span></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      LastY_Pos = vDialog.Control.PSDLG_Y
      szFirstTimeThru = "N"
   END
   szWriteBuffer = "   </tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   </table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )



            ResetViewFromSubobject( vDialog )
            szWriteBuffer = "</div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""

END

/*************************************************************************************************
**
**    OPERATION: GenJSPJ_CrteGroupTable
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteGroupTable( VIEW vDialog BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 100 )   szIndent,
                        INTEGER          lTableRowCnt,
                        STRING ( 1 )     szNoPositioning,
                        STRING ( 100 )   szRepeatGrpKey )

   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        LastY_Pos
   INTEGER        iHighestColCnt
   INTEGER        iColCnt
   INTEGER        nRC
   INTEGER        iColWidth
   INTEGER        lMaxStringLth
   INTEGER        lTemp
   INTEGER        lStyleX
   INTEGER        Size
   INTEGER        lOffsetX
   INTEGER        lOffsetY
   DECIMAL        dDLUnits
   STRING ( 10 )  szColCnt
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szParentCtrlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szHTML5Attr
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 32 )  szActionName
   STRING ( 50 )  szControlType
   STRING ( 16 )  szTabIndex
   STRING ( 500 ) szText
   STRING ( 500 ) szText2
   STRING ( 256 ) szTextID
   STRING ( 5 )   szSrch
   STRING ( 32 )  szContextName
   STRING ( 10 )  szMaxStringLth
   STRING ( 32 )  szSize
   STRING ( 300 ) szAbsoluteStyle

   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 1 )   szWindowIsjMobile
   STRING ( 1 )   szToggleFlag
   STRING ( 100 ) szIndentGroup
   STRING ( 50 )  szWebCtrlType

   LastY_Pos = 0
   iColCnt = 0
   iHighestColCnt = 0
   szIndent = szIndent + "   "

   X_Size = vGroupParent.Control.SZDLG_X
   Y_Size = vGroupParent.Control.SZDLG_Y
   szParentCtrlTag = vGroupParent.Control.Tag

   IF vGroupParent.Control.CSS_Class != ""
      szClass = " class=^" + vGroupParent.Control.CSS_Class + "^"
   ELSE
      szClass = ""
   END
   

   IF vDialogRoot.WndStyle.Tag = "jMobile Window"
      szWindowIsjMobile = "Y"
   ELSE
      szWindowIsjMobile = ""
   END
   
      
   // KJS 02/23/16 - We have added a field for HTML5 attributes (this could be for jQuery Mobile or whatever extra attributes we want).
   // It is simply a string and we will add it to different controls like <div> or <input> etc.
   szHTML5Attr = ""
   IF vGroupParent.Control.WebHTML5Attribute != ""
      szHTML5Attr = " " + vGroupParent.Control.WebHTML5Attribute + " "
   END

   IF vDialog.Control EXISTS
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   // Loop through each Control within this group.  Determine what row has the largest
   // number of controls.  This will determine how many columns our table will have.
   FOR EACH vDialog.Control

      IF LastY_Pos < vDialog.Control.PSDLG_Y

         IF  iColCnt > iHighestColCnt
            iHighestColCnt = iColCnt
         END
         iColCnt = 0
      END

      iColCnt = iColCnt + 1

      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   //TraceLineI("**** Highest Col Count *** ", iHighestColCnt )
   zIntegerToString( szColCnt, 10, iHighestColCnt )
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, X_Size * dDLUnits )
   zIntegerToString( szHeight, 10, Y_Size * dDLUnits )

   // 05/27/09 - Currently, we never put in a height.  Would we want to do this?????!!!.
   IF szNoPositioning = "Y"

      szNoWidthFlag = ""
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "No Width"
      IF RESULT >= zCURSOR_SET
         szNoWidthFlag = "Y"
      END
   END

   // Create a div around the whole table.  This should probably be float.
   //szWriteBuffer = "<div style=^float:left;width:" + szWidth + "px;height:" + szHeight + "px;^" + szClass + ">"
   // KJS 09/11/09 - Neither the table or the div had an id or name.  I am not sure whether I should put the
   // id on the <table we create or on the <div> but I will put it on the div.
   IF szNoPositioning = "S"
      szWriteBuffer = "<div id=^" + szParentCtrlTag + "^ name=^" + szParentCtrlTag + "^ "
   ELSE
      szWriteBuffer = "<div id=^" + szParentCtrlTag + "^ name=^" + szParentCtrlTag + "^ style=^float:left;"
      IF szNoWidthFlag = ""
         szWriteBuffer = szWriteBuffer + "width:" + szWidth + "px;^"
      ELSE
         szWriteBuffer = szWriteBuffer + "^"
      END
   END
   // KJS 02/23/16 - We have added a field for HTML5 attributes, but I am not sure whether this should be
   // here on the <div> (which surrounds the table) or whether this should be on the <table>. For now since the
   // class is here I will also put the HTLM5 attribute here.
   szWriteBuffer = szWriteBuffer + szHTML5Attr + " " + szClass + ">"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   // Now create the table with the proper number of columns.
   //szWriteBuffer = "<table cols=" szColCount + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
   IF szWindowIsjMobile = "" 
      szWriteBuffer = "<table cols=" + szColCnt
      IF szNoWidthFlag = "" AND szNoPositioning != "S"
         szWriteBuffer = szWriteBuffer + " style=^width:" + szWidth + "px;^ "
      END
      szWriteBuffer = szWriteBuffer + " class=^grouptable^>"
   ELSE
      // page is being generated for jmobile, so we don't want the grouptable or columns.
      szWriteBuffer = "<table data-role=^table^> "
      szWriteBuffer = "<table data-role=^listview^> " // some reason "table" was causing page to hang.
      szWriteBuffer = "<table> " // now try nothing
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "<thead></thead>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   LastY_Pos = 0
   IF  vDialog.Control EXISTS
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y
   END


   // Loop through the controls, placing each control in a different column.
   // When the Y_Pos has changed, we need to create a new row in the table.
   FOR EACH vDialog.Control

      // We are onto a new row
      IF  LastY_Pos < vDialog.Control.PSDLG_Y

         // If LastY_Pos is 0 then we are on the first control.
         // If this wasn't the very first row, then
         // create the end tag for the last row.
         //IF  LastY_Pos != 0
            // If the previous row didn't have as many controls as there are
            // table columns, then we need to create a blank column
            LOOP  WHILE iColCnt < iHighestColCnt
               szWriteBuffer = "<td>&nbsp</td>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               iColCnt = iColCnt + 1
            END
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //END

         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // Since we are on a new row, reset the column count.
         iColCnt = 0
      END

      szCtrlTag = vDialog.Control.Tag
      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "
      szControlType = vDialog.ControlDef.Tag
      CreateNoPosStyleString( vDialog, szStyle, "" )
      
      
      // KJS 02/23/16 - We have added a field for HTML5 attributes (this could be for jQuery Mobile or whatever extra attributes we want).
      // It is simply a string and we will add it to different controls like <div> or <input> etc.
      szHTML5Attr = ""
      IF vDialog.Control.WebHTML5Attribute != ""
         szHTML5Attr = " " + vDialog.Control.WebHTML5Attribute + " "
      END
      

      X_Pos = vDialog.Control.PSDLG_X
      //TraceLineI("*** Control Start position *** ", vDialog.Control.PSDLG_X )
      LastY_Pos = vDialog.Control.PSDLG_Y

      // We want to find out how wide this column should bed
      nRC = SetCursorNextEntity( vDialog, "Control", "" )
      iColWidth = 0
      IF  nRC >= zCURSOR_SET AND LastY_Pos = vDialog.Control.PSDLG_Y
         //TraceLineI("*** Next Control Start position *** ", vDialog.Control.PSDLG_X )
         iColWidth = vDialog.Control.PSDLG_X - X_Pos
      END

      IF  nRC >= zCURSOR_SET
         nRC = SetCursorPrevEntity( vDialog, "Control", "" )
      END

      IF  iColWidth = 0
         //TraceLineI("*** Width is width of control *** ", vDialog.Control.SZDLG_X )
         iColWidth = vDialog.Control.SZDLG_X
      END

      szClass = vDialog.Control.CSS_Class
      IF vDialog.Control.CSS_Class != ""
         szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
      ELSE
         szClass = ""
      END

      //KELLY0210
      zIntegerToString( szWidth, 10, iColWidth * dDLUnits )
      // KJS 02/23/17 - Both of the following <td had valign=^top^. This is no longer supported in HTML5 and several browsers
      // so I think it might be useless. Going to try and take it out...
      // I see it says to use <td style="vertical-align:bottom"> instead but I will keep it out for the moment since I don't think it worked.
      IF szNoPositioning = "S"  // No style information
         szWriteBuffer = "<td " + szClass + ">"
      ELSE 
         szWriteBuffer = "<td " + szClass + "style=^width:" + szWidth + "px;^>"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //****************************************************************************

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END


         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END

         szToggleFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle"
         IF RESULT >= zCURSOR_SET
            szToggleFlag = "Y"
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END

      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + ";^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + ";^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE
      IF szNoPositioning = "S"
         szAbsoluteStyle = "" // No style information.
      ELSE 
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )

         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSPJ_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning, szRepeatGrpKey )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END

      IF szControlType = "GroupBox" AND szGroupIsTable = ""

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END


         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, X_Size, Y_Size, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // No style information.             
            END
            END

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // No style information.             
            END
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
            // Default Group is div for now

            // If we are not using absolute positioning, then make all the divs float left.
            IF szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // No style information.             
            END
            END

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            /*IF szClass = ""
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END*/
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
            
               // KJS 09/30/16 - Language Conversion.
               // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
               // So for now, I am always using, if the flag is set.
               IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
                  // Seems like we need to check the text, and if the text has " then we shouldn't use the getLanguageText. Because one example we have
                  // is where the text is <img src="./images/admi..." border="0".
                  szText2 = vDialog.Control.Text
                  szTextID = vDialog.Control.LangID
                  zSearchAndReplace( szText2, 1000, "\", "\\" )
                  szSrch = "\" + QUOTES 
                  zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
                  szSrch = ""
                  IF szTextID = ""
                     szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
                  ELSE 
                     szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
                  END
                  //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
               ELSE
                  szText = vDialog.Control.Text
               END
         
               szWriteBuffer = "<div>" + szText + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )

            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END

      END  // Control is groupbox

      IF szControlType = "Text"  // TEXT
         GenJSPJ_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                           "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "EditBox"  // EDITBOX
         GenJSPJ_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "Calendar"  // CALENDAR
         GenJSPJ_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                               "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
         /*
         szWriteBuffer = "<% strErrorMapValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.CtrlMapView EXISTS
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strRadioGroupValue = " +
                            vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
         //I'm going to do this like the way group box is (or was).  If there is text
         //to go on the box then we will create <fieldset.  If there is no text then
         //we will create a div.
         //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
         //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
         //an id and name but think it should.
         IF vDialog.Control.Text = ""
            //szWriteBuffer = "<div " + szStyle + ">"
            szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szStyle + ">"
         ELSE
            szWriteBuffer = "<fieldset " + szStyle + ">"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.Control.Text != ""
            // KJS 09/30/16 - Language Conversion.
            // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
            // So for now, I am always using, if the flag is set.
            IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
               // Seems like we need to check the text, and if the text has " then we shouldn't use the getLanguageText. Because one example we have
               // is where the text is <img src="./images/admi..." border="0".
               szText2 = vDialog.Control.Text
               szTextID = vDialog.Control.LangID
               zSearchAndReplace( szText2, 1000, "\", "\\" )
               szSrch = "\" + QUOTES 
               zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
               szSrch = ""
               IF szTextID = ""
                  szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
               ELSE 
                  szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
               END
               //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
            ELSE
               szText = vDialog.Control.Text
            END
            szWriteBuffer = "<div>" + szText + "</div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndent = szIndent + "   "
         */
         GenJSPJ_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndent,
                                 szCtrlTag, szNoPositioning, 0, 0, szRepeatGrpKey )
         /*
         ResetViewFromSubobject( vDialog )
         IF vDialog.Control.Text = ""
            szWriteBuffer = "</div>"
         ELSE
            szWriteBuffer = "</fieldset>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         */

      END

      IF szControlType = "CheckBox"  // CHECKBOX
         GenJSPJ_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                               "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "PushBtn"  // PUSH BUTTON
      
         // KJS 05/26/17 - I'm not sure why we wouldn't have been calling GenJSPJ_CrtePushButton, 
         // going to use this instead and comment out other code.
         GenJSPJ_CrtePushButton( vDialog, vGroupParent, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END  //End of PushBtn

      IF szControlType = "ComboBox"  // COMBOBOX
         GenJSPJ_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndent,
                               szCtrlTag, "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP / JPG
         GenJSPJ_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                          szCtrlTag, szNoPositioning, 0, 0 )
      END

      IF szControlType = "ListBox"  // LISTBOX
         //IF jquery
         //ELSE
            GenJSPJ_CrteListBox( vDialog, lFile, szWriteBuffer, szIndent,
                                 szCtrlTag, szNoPositioning, 0, 0 )
         //END                              
      END  // IF szControlType = "ListBox"

      IF szControlType = "MLEdit"  // MLEDIT
      
         GenJSPJ_CrteMLEdit( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                             "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END   //IF szControlType = "MLEdit"

      // KJS 07/13/18 - Right now, if I put a "Grid" inside a groupbox marked as "Table", the grid doesn't
      // get created (if I put the grid inside a groupbox, then it works). I need to perform something like the following
      // but I would need to put all of the grid code from within CrteCtrlsRecurs into it's own function and call that
      // function from here. I should do that but not right now...
      /*
      IF szControlType = "Grid"  // Grid
      
         GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                  lTableRowCnt, szNoPositioning, X_Size, Y_Size, szRepeatGrpKey )
      END
      */

      //****************************************************************************


      szWriteBuffer = "</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      iColCnt = iColCnt + 1
   END

   // If the previous row didn't have as many controls as there are
   // table columns, then we need to create a blank column
   LOOP  WHILE iColCnt < iHighestColCnt
      szWriteBuffer = "<td>&nbsp</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      iColCnt = iColCnt + 1
   END

   szWriteBuffer = "</tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "</div>  <!-- " + szParentCtrlTag + " --> "
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteEditBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteEditBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format an EDITBOX control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 300 ) szValue
   STRING ( 600 ) szBlob
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szHTML5Attr
   STRING ( 256 ) szPlaceholder
   STRING ( 300 ) szType
   STRING ( 64 )  szWidget
   STRING ( 16 )  szTabIndex
   STRING ( 600 ) szEditActionCode
   STRING ( 32 )  szActionName
   STRING ( 10 )  szMaxStringLth
   STRING ( 100 ) szDisabled
   STRING ( 20 )  szAutoCompleteOff
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szCreateSessionVariable
   STRING ( 1 )   szNoOutputMapping
   STRING ( 1 )   szBrowseFile
   STRING ( 1 )   szNumber

   INTEGER        lMaxStringLth
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          bMapping
   SHORT          nRC

   // For testing no height on input boxes
   STRING ( 10 )  szWidth
   DECIMAL        dDLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   //TraceLineS("*** GenJSPJ_CrteEditBox *** ", "")
   
   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   

   CreateTabIndexString( vDialog, szTabIndex )
   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "<%=strErrorColor%>" )
   // KJS 07/08 - We placed DOCTYPE at the top of our html pages now.  For some reason, because of this
   // even though the pixel height is exactly the same as before, it shows up higher in the browser.
   // Because of this we have taken out the height for now and the input height will be determined in the
   // CSS.
   
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
   IF szNoPositioning = "Y" AND RESULT < zCURSOR_SET
      PIX_PER_DU( vDialog, dDLUnits )
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
      szSize = "width:" + szWidth + "px;"
   END
   // If zNoPositioning is null then we are using absolute positioning for controls
   IF  szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   IF szNoPositioning = "S" // No style information but I think we need the error color.
      szStyle = "style=^<%=strErrorColor%>^"
   ELSE 
      FixStyleString( szStyle, szSize, szPosition,  "<%=strErrorColor%>"  )
   END

   szStyle = szStyle + szTabIndex

   // If there is a WebControlProperty for "Create Session Variable", then create a session variable
   // with the value of this edit box with the Control Tag as the name.
   szCreateSessionVariable = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Create Session Variable"
   IF RESULT >= zCURSOR_SET
      szCreateSessionVariable = "Y"
   END

   // There may be times when we do not want to show the mapping of a field.  Like for instance a password field.  If the user types
   // in the wrong password, then we don't want to leave what was already typed we want the edit box to be blank.  This is
   // for xss problems (cross-scripting attacks).   
   szNoOutputMapping = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Output Mapping"
   IF RESULT >= zCURSOR_SET
      szNoOutputMapping = "Y"
   END

   szAutoCompleteOff = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Autocomplete Off"
   IF RESULT >= zCURSOR_SET
      szAutoCompleteOff = " autocomplete=^off^"
   END

   szNumber = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Number"
   IF RESULT >= zCURSOR_SET
      szNumber = "Y"
   END

   // We have an Upload file on the group box, but what if we aren't uploading the file, we just want the user
   // to be able to select a directory/file name.
   szBrowseFile = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Browse File"
   IF RESULT >= zCURSOR_SET
      //TraceLineS("*** Browse File is Y *** ", "" )
      szBrowseFile = "Y"
   END


// szWriteBuffer = "<% strErrorMapValue = ^^; %>"  extraneous???
// WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )           dks 2005.01.11

   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET AND szNoOutputMapping = ""
      bMapping = 1
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorColor = ^color:red;^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END
      
      /**********************************/
      // Add try/catch
      szWriteBuffer = "            try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
      IF lMaxStringLth <= 0
         szMaxStringLth = "254"
      ELSE
         szMaxStringLth = lMaxStringLth
      END

      szWriteBuffer = "               strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y"
         szWriteBuffer = "                  strDisabled = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //szWriteBuffer = "                  strCtrlActionsView = strCtrlActionsView + ^" + szCtrlTag + ",Disabled,^;"
         //szWriteBuffer = "                  strCtrlActions = strCtrlActions + ^" + szCtrlTag + ",Disable,^;"
         szWriteBuffer = "                  strDisabled = ^disabled^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
      
      IF vDialog.Control.WebCtrlType = "escapeHTML"
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " prior to unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               strErrorMapValue = StringEscapeUtils.unescapeHtml4( strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " after unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               out.println(^There is an error on " + szCtrlTag + ": ^ + e.getMessage());"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               task.log().error( ^*** Error on ctrl " + szCtrlTag + "^, e );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      /***************** END OF try/catch **********************/

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // If there is a WebControlProperty for "Create Session Variable", then create a session variable
      // with the value of this edit box with the Control Tag as the name.
      IF szCreateSessionVariable = "Y" 
         szWriteBuffer = "            session.setAttribute(^" + szCtrlTag + "^, strErrorMapValue); "     
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"

      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "      if ( strErrorMapValue == ^^ )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      bMapping = 0
   END

   // Get the format for the edit box if specified.
   lTemp = 600
   GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
   lTemp = lTemp - (3 * zSIZEOFLONG)
   IF lTemp <= 0
      szBlob = ""
   ELSE
      lTemp = (3 * zSIZEOFLONG) + 1
      ZeidonCopyWithinString( szBlob, 1, lTemp, 600 )
   END

   //KJS 07/25/07
   //See if there is a WebControlProperty for "Hidden"
   //I don't think "hidden" is a webcontrolproperty for the editbox yet
   //but since I don't think this hurts I'm going to keep it in.
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
   IF RESULT >= zCURSOR_SET
      szWCP_Hidden = "Y"
   ELSE
      szWCP_Hidden = "N"
   END

   IF vDialog.Control.WebCtrlType = "Hidden" OR szWCP_Hidden = "Y"
      szType = " type=^hidden^ "
   ELSE
   IF szBrowseFile = "Y"
      szType = " type=^file^ "
   ELSE
   //IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.CtrlMapER_Domain.Name = "Password"
   IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.Control.Subtype = 4
      szType = " type=^password^ "
   ELSE
   IF szNumber = "Y"
      szType = " type=^number^"
   ELSE
      szType = " type=^text^ "
      IF szBlob != ""
         szType = szType + "mask=^"
         szType = szType + szBlob
         szType = szType + "^ onblur=^return onBlurMask(this);^ onfocus=^return onFocusMask(this);^ onkeydown=^return doMask(this);^ "
      END
   END
   END
   END
   END

   // If there is an Event for the EditBox, build code to insert in <input statement.
   szEditActionCode = ""
   FOR EACH vDialog.Event
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      IF vDialog.Event.Type = 16
            szEditActionCode = szEditActionCode + " onfocus=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 17
            szEditActionCode = szEditActionCode + " onblur=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 18
            szEditActionCode = szEditActionCode + " onchange=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 21
            szEditActionCode = szEditActionCode + " onkeydown=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 22
            szEditActionCode = szEditActionCode + " onkeyup=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 24
            szEditActionCode = szEditActionCode + " onclick=^" + szActionName + "( )^ "
      END
      END
      END
      END
      END
      END
      END
   END

      // If there is a Default button for the window, we must add some characters
      // to the end of the input statement.
      CreateViewFromView( vDialogRoot, vDialog )
      nRC = ResetViewFromSubobject( vDialogRoot )
      LOOP WHILE nRC = 0
         nRC = ResetViewFromSubobject( vDialogRoot )
      END
      IF vDialogRoot.Window.DfltButton != ""
      szEditActionCode = szEditActionCode + " onkeypress=^return _OnEnter( event )^"
      END
      DropView( vDialogRoot )

   IF szNoOutputMapping = "Y"
         szValue = " value=^^"
   ELSE 
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0 AND bMapping = 0
         szValue = " value=^" + vDialog.Control.Text + "^"
      ELSE
         szValue = " value=^<%=strErrorMapValue%>^"
      END
   END

   IF szNoOutputMapping = "Y"
         szValue = "value=^^"
   ELSE 
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0 AND bMapping = 0
         szValue = " value=^" + vDialog.Control.Text + "^"
      ELSE
         szValue = " value=^<%=strErrorMapValue%>^"
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END
   // KJS 08/23/16 - Doug and I both added placeholder. I had added a new attribute to tzwdlgso.lod
   // for this (WebPlaceholder) and I've only put this on the input field.
   // Doug has his on CommonDetail. For now we will keep both...
   // dks 2016.04.08 - trying placeholder
   //szTitle = vDialog.Control.Placeholder
   //IF szTitle != ""
   //   szTitleHTML = szTitleHTML + " placeholder=^" + szTitle + "^"
   //END
   
   szPlaceholder = ""
   IF vDialog.Control.WebPlaceholder != ""
      szPlaceholder = " placeholder=^" + vDialog.Control.WebPlaceholder + "^ "
   END
   
   szHTML5Attr = ""
   IF vDialog.Control.WebHTML5Attribute != ""
      szHTML5Attr = " " + vDialog.Control.WebHTML5Attribute + " "
   END
   
   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
   END

   CreateDisabledString( vDialog, szDisabled )
   szWriteBuffer = "<input" + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szDisabled +
                   szAutoCompleteOff + szTitleHTML + szHTML5Attr + szPlaceholder + szStyle + szType + szValue + szEditActionCode + " >"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteText
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteText( VIEW vDialog      BASED ON LOD TZWDLGSO,
                  VIEW vGroupParent BASED ON LOD TZWDLGSO,
                  VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                  INTEGER          lFile,
                  STRING ( 10000 ) szWriteBuffer,
                  STRING ( 50 )    szIndent,
                  STRING ( 32 )    szCtrlTag,
                  STRING ( 20 )    szJustify,
                  STRING ( 1 )     szNoPositioning,
                  INTEGER          lOffsetX,
                  INTEGER          lOffsetY,
                  STRING ( 100 )   szRepeatGrpKey )

   // Format a TEXT control.

   STRING ( 32 )  szContextName
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClassHTML
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 265 ) szHTML5Attr
   STRING ( 1000 ) szText
   STRING ( 1000 ) szText2
   STRING ( 256 ) szTextID
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLth
   STRING ( 20 )  szGroupParentType
   STRING ( 256 ) szHTMLCtrlID
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits
   INTEGER        lMaxStringLth
   INTEGER        lSubtypeX
   INTEGER        lSubtype
   INTEGER        lTemp
   SHORT          nMultiLineFlag
   SHORT          nBoldFlag
   SHORT          nItalicFlag
   SHORT          nStrikeoutFlag
   SHORT          nUnderlineFlag
   INTEGER        lJustify
   INTEGER        lFontSize
   INTEGER        lTextColor
   INTEGER        lTextBkColor
   INTEGER        lBorderStyle
   INTEGER        lBorderColor
   INTEGER        lEscapement
   INTEGER        lType
   STRING ( 32 )  szFaceName
   STRING ( 256 ) szLabelFor
   STRING ( 256 ) szDecoration
   STRING ( 256 ) szTempStyle
   STRING ( 1 )   szIsLabel
   STRING ( 1 )   szIsTextOnly
   SHORT          nRC
   
   // If there is a web property of "Text Only", then we are not putting a span/label around anything we are simply using
   // what is in the text field which is probably an html tag like <h1>.
   szIsTextOnly = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Text Only"
   IF RESULT >= zCURSOR_SET
      szIsTextOnly = "Y"
   END
   
   // KJS 09/30/16 - Language Conversion.
   // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
   // So for now, I am always using, if the flag is set.
   IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y" AND szIsTextOnly = ""
      // Seems like we need to check the text, and if the text has " then we shouldn't use the getLanguageText. Because one example we have
      // is where the text is <img src="./images/admi..." border="0".
      szText2 = vDialog.Control.Text
      szTextID = vDialog.Control.LangID
      zSearchAndReplace( szText2, 1000, "\", "\\" )
      szStyle = "\" + QUOTES 
      zSearchAndReplace( szText2, 1000, QUOTES, szStyle )
      szStyle = ""
      IF szTextID = ""
         szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
      ELSE 
         szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
      END
      //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
   ELSE
      szText = vDialog.Control.Text
   END

   CreateTabIndexString( vDialog, szTabIndex )

   szHTMLCtrlID = " id=^" + szCtrlTag + szRepeatGrpKey + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ "
   
   szHTML5Attr = ""
   IF vDialog.Control.WebHTML5Attribute != ""
      szHTML5Attr = " " + vDialog.Control.WebHTML5Attribute + " "
   END

   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
   IF szNoPositioning = "S" // No style information
      szStyle = "" 
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   END

   nRC = TX_GetTextRptCtrlBOI( vDialog, nMultiLineFlag, nBoldFlag,
                               nItalicFlag, nStrikeoutFlag,
                               nUnderlineFlag, lJustify,
                               lFontSize, lTextColor, lTextBkColor,
                               lBorderStyle, lBorderColor,
                               lEscapement, lType, szFaceName )

   // If the return code is <= 0, the CtrlBOI is null.
   szDecoration = ""
   IF nRC > 0

      IF nItalicFlag != 0
         szDecoration = szDecoration + "font-style:italic;"
      END

      IF nBoldFlag != 0
         szDecoration = szDecoration + "font-weight:bold;"
      END

      IF lJustify != 0
         nRC = IsFlagSequenceSet( lJustify, 2 )
         IF nRC != 0
            szDecoration = szDecoration + "text-align:center;"
         ELSE
            nRC = IsFlagSequenceSet( lJustify, 4 )
            IF nRC != 0
               szDecoration = szDecoration + "text-align:right;"
            END
         END
      END

      IF nUnderlineFlag != 0 AND nStrikeoutFlag != 0
         szDecoration = szDecoration + "text-decoration:underline line-through;"
      ELSE
         IF nUnderlineFlag != 0
            szDecoration = szDecoration + "text-decoration:underline;"
         END

         IF nStrikeoutFlag != 0
            szDecoration = szDecoration + "text-decoration:line-through;"
         END
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   IF szNoPositioning != "S" 
      zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
   END
   szStyle = szStyle + szTabIndex
   IF vDialog.Control.CSS_Class != ""
      szClassHTML = "class=^" + vDialog.Control.CSS_Class + "^ "
   END

   // Check if a Group control as parent of this control requests relative postioning either through the
   // older "Span" setting or the newer "RelativePos" request.
   szGroupParentType = ""
   IF vGroupParent != 0
      // Override Style if parent group requests relative positioning
      // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
      // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
      ///*
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
      IF RESULT >= zCURSOR_SET
         szGroupParentType = "RelativePos"
      ELSE
         szGroupParentType = vGroupParent.Control.WebCtrlType
      END
      //*/
      //szGroupParentType = vGroupParent.Control.WebCtrlType
      IF szGroupParentType = "RelativePos" OR szGroupParentType = "Span"
         szStyle = "style=^position:relative;^"
      END
   END

   // Process variable Text mapping.
   SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
   IF RESULT < zCURSOR_SET
      SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                 WHERE vDialog.CtrlMap.Tag = ""
   END
   IF RESULT >= zCURSOR_SET
      // There is mapping of the Display Text value.
      szWriteBuffer = "<% strTextDisplayValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END
      
      /**********************************/
      // Add try/catch
      szWriteBuffer = "      try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name + ".cursor( ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                         szContextName + "^ );"
      ELSE
         lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
         IF lMaxStringLth <= 0
            szMaxStringLth = "254"
         ELSE
            szMaxStringLth = lMaxStringLth
         END

         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name + ".cursor( ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                         szContextName + "^ );"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "         strBuildPageError = e.getMessage();"
      szWriteBuffer = "         out.println(^There is an error on " + szCtrlTag + ": ^ + e.getMessage());"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().info( ^*** Error on ctrl " + szCtrlTag + "^ + e.getMessage() );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      /***************** END OF try/catch **********************/

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "         if ( strTextDisplayValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strTextDisplayValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText = "<%=LangConv.getLanguageText(strTextDisplayValue)%>" 
      ELSE
         szText = "<%=strTextDisplayValue%>"
      END

   END

   IF vDialog.EventAct EXISTS    // There is only one EventAct, which is HotText.
      IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
         // The Text triggers a Hyperlink to a constant or variable URL address
         SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
         IF RESULT >= zCURSOR_SET
            // There is mapping of the Hyperlink URL value.
            szWriteBuffer = "<% strTextURL_Value = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                               szContextName + "^ );"
            ELSE
               lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
               IF lMaxStringLth <= 0
                  szMaxStringLth = "254"
               ELSE
                  szMaxStringLth = lMaxStringLth
               END

               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                               szContextName + "^ );"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "         if ( strTextURL_Value == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strTextURL_Value = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 10/19/07 - Added title.

            // The Hyperlink URL value is a variable.
            szWriteBuffer = "<a href=^<%=strTextURL_Value%>^  " + szHTMLCtrlID + szClassHTML + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
         ELSE

            // The Hyperlink URL value is a constant in the Action.
            SET CURSOR FIRST vDialogRoot.Action WHERE vDialogRoot.Action.ZKey = vDialog.EventAct.ZKey
            IF vDialogRoot.Action.WebHTML_TransferAddress = ""
               MessageSend( vDialog, "", "XSL Generation",
                            "A Hyperlink Action without URL mapping requires a 'Link to HTML Address' value.",
                            zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //KJS 10/19/07 - Added title.
            szWriteBuffer = "<a href=^" + vDialogRoot.Action.WebHTML_TransferAddress + "^  " + szHTMLCtrlID + szClassHTML + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"

         END
      ELSE
         // This is HotText with regular Action, rather than HyperLink.
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //KJS 10/17/2007 Jeff says we need "javascript:" before the action name for href actions.  I think this
         //is the place to put it but I confess I'm not exactly sure...
         //KJS 10/19/07 - Added title.
         //KJS 09/24/10 - Now realizing that Jeff was incorrect about the javascript: and it shouldn't be used (http://jibbering.com/faq/#FAQ4_24).
         //Changing them to use the # and onclick.
         IF szRepeatGrpKey = ""
            szWriteBuffer = "<a href=^#^" + szHTMLCtrlID + " onclick=^" + vDialog.EventAct.Tag + "( );^ " + szClassHTML + szTitleHTML + szStyle + ">" + szText + "</a>"
         ELSE
            szWriteBuffer = "<a href=^#^" + szHTMLCtrlID + "  onclick=^" + vDialog.EventAct.Tag + "( '" + szCtrlTag + szRepeatGrpKey + "' );^ " + szClassHTML + szTitleHTML + szStyle + ">" + szText + "</a>"
         END
      END
   ELSE
      // Regular Text Control (No HotText)
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szIsLabel = ""
      szLabelFor = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Label"
      IF RESULT >= zCURSOR_SET
         szIsLabel = "Y"
         IF vDialog.Control.WebCtrlLabelLink != ""
            // Tie the label to an input control.
            szLabelFor = " for=^" + vDialog.Control.WebCtrlLabelLink + "^ " 
         END
      END
      
      IF szIsTextOnly = "Y"
         szWriteBuffer = szText
      ELSE     
         // If szNoPositioning is null then we are using absolute positioning when creating controls.
         IF  szNoPositioning = ""
   
         // PIX_PER_DU( vDialog, dDLUnits )
         // zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
         // zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
         // szTempStyle = "position:absolute;left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
            zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
            szWriteBuffer = "<label " + szClassHTML + szHTMLCtrlID + szTitleHTML + szStyle + ">" + szText + "</label>"
         ELSE
      
            // If there is a "Label" web control property than make this a label, otherwise, just use <span>.
            IF szIsLabel = "Y"
               szWriteBuffer = "<label " + szClassHTML + szHTMLCtrlID + szHTML5Attr + szLabelFor + szTitleHTML + szStyle + ">" + szText + "</label>"
            ELSE 
               szWriteBuffer = "<span " + szClassHTML + szHTMLCtrlID + szTitleHTML + szHTML5Attr + szStyle + ">" + szText + "</span>"
            END
   
         END
      END
   END

   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteJPG
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteJPG( VIEW vDialog BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 50 )    szIndent,
                STRING ( 32 )    szCtrlTag,
                STRING ( 1 )     szNoPositioning,
                INTEGER          lOffsetX,
                INTEGER          lOffsetY )

   // Format a BITMAP or JPG control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szClass
   STRING ( 300 ) szStyle
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szText
   STRING ( 256 ) szActionName
   STRING ( 256 ) szxx
   STRING ( 1 )   szObjectFlag
   INTEGER        nRC

   CreateTabIndexString( vDialog, szTabIndex )
   
   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
   IF szNoPositioning = "S"
      szStyle = "" // No style information.
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   END

   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   szStyle = szStyle + szTabIndex

   szActionName = ""
   IF vDialog.EventAct EXISTS
      IF szNoPositioning = "S"
         szActionName = szActionName + "<a href=^#^ " 
      ELSE 
         szActionName = szActionName + "<a href=^#^ style=^display:block;width:100%;height:100%;text-decoration:none;^ " 
      END
      szActionName = szActionName + " onclick=^"
      szActionName = szActionName + vDialog.EventAct.Tag
      szActionName = szActionName + "( )^ "
      nRC = zstrcmpi( szActionName, "alt-f4" )
      IF nRC = 0
         szActionName = " onclick=^AltF4( )^ "
      END
      szActionName = szActionName + ">"
   END

   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END
   szText = ""
   IF  vDialog.Control.Text != ""
      szText = " alt=^" + vDialog.Control.Text + "^ "
   END

   szObjectFlag = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "<object>"
   IF RESULT >= zCURSOR_SET
      szObjectFlag = "Y"
   END

   //There might be mapping for this control which means we should get the
   //image from the mapping, or there might be an image file name, so we wouldn't
   //use the mapping.
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".log( ).debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMapValue = " +
                      vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
      szWriteBuffer = "         if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      IF szObjectFlag = ""
         szWriteBuffer = szActionName + "<img src=^<%=strErrorMapValue%>^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szStyle + szTitleHTML + szClass + szText + ">"
      ELSE
         szWriteBuffer = szActionName + "<object data=^<%=strErrorMapValue%>^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szStyle + szTitleHTML + szClass + szText + "></object>"
      END
      IF szActionName != ""
         szWriteBuffer = szWriteBuffer + "</a>" 
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      //Not getting image from mapping, a file name has been specified.
      IF vDialog.Control.WebFileName != ""
         IF szObjectFlag = ""
         // szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ><img src=^" +
         //    vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
            szWriteBuffer = szActionName + "<img src=^" + vDialog.Control.WebFileName + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                              szStyle + szTitleHTML + szClass + szText + ">"
         ELSE
            szWriteBuffer = szActionName + "<object data=^" + vDialog.Control.WebFileName + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                            szStyle + szTitleHTML + szClass + szText + "></object>"
         // szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ^onclick=^" +
         //                 szActionName + "( )^><img src=^" + vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
         END
         IF szActionName != ""
            szWriteBuffer = szWriteBuffer + "</a>" 
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         //Neither mapping nor filename was specified.
         szWriteBuffer = "//There was no information on where to get the image.  Nothing created."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
  END

END

/*************************************************************************************************
**
**    OPERATION: GenJSPJ_CrteListBox
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteListBox( VIEW vDialog,
                    INTEGER lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 50 )    szIndent,
                    STRING ( 32 )    szCtrlTag,
                    STRING ( 1 )     szNoPositioning,
                    INTEGER lOffsetX,
                    INTEGER lOffsetY )

   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLth
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 100 ) szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   INTEGER        lMaxStringLth

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   IF vDialog.Control.CSS_Class = ""
      szClass = ""
   ELSE
      szClass = "class=^" + vDialog.Control.CSS_Class + "^"
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
   szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"

   // If szNoPositioning is null then we are using absolute positioning on controls.
   IF szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;"
      //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
   IF szNoPositioning = "S"
      szStyle = "" 
   END
   END

   szStyle = szStyle + "^ " + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szSelectFunction = "OnClick"


      // Check if DoubleClick Event and Action exist and handle accordingly.
      ListBoxDoubleClickAction = ""
      SET CURSOR FIRST vDialog.Event WHERE vDialog.Event.Type = 2
      IF RESULT >= zCURSOR_SET AND vDialog.EventAct EXISTS
         ListBoxDoubleClickAction = " ondblclick=^" + vDialog.EventAct.Tag + "( )^ "
      END


      // Set cursor to the scoping entity if one exists
      CreateViewFromViewForTask( vScope, vDialog, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML +
                      szStyle + szDisabled + " onclick=^" + szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS


         // See if a list entity has been specified, and if so, use it.
         // Since this is a listbox I believe this should always be specified.
         IF vDialog.CtrlMapLOD_Entity EXISTS
            szListEntityName = vDialog.CtrlMapLOD_Entity.Name
         END

         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szAttributeName = ""
         szEntityName = ""
         szContextName = ""

         // Set position on the text field inside the listbox.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            szAttributeName = vDialog.CtrlMapER_Attribute.Name
            szEntityName = vDialog.CtrlMapRelatedEntity.Name

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            szEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
            IF lMaxStringLth <= 0
               szMaxStringLth = "254"
            ELSE
               szMaxStringLth = lMaxStringLth
            END

            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".cursor( ^" +
                     szEntityName + "^ ).getAttribute( ^" +
                     szAttributeName + "^ ).getString( ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
            szWriteBuffer = "         if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         ResetViewFromSubobject( vDialog )

         // See if a scoping entity has been specified, and if so, use it.
         szScopingEntityName = ""
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zLISTBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vDialog.CtrlMapView.Name + ".newView( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboSelectedValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF lSubtype = 0
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( csrRC.isSet() )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF szAttributeName != ""

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag +
                            ".cursor( ^" +
                            szEntityName + "^ ).getAttribute( ^" +
                            szAttributeName + "^ ).getString( ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
            szWriteBuffer = "         if ( strErrorMapValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         szWriteBuffer = "         if ( StringUtils.equals( strComboCurrentValue, strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // IF lSubtype = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
            szWriteBuffer = "         csrRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( );"
                            //"^ ).setNext( " + szScopingEntityName + " );"
      // ELSE
      //    szWriteBuffer = "         nRC =  v" + szCtrlTag +
      //                    ".cursor( ^" + szListEntityName + "^ ).setNextWithinOi( );"
      // END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</select>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/*************************************************************************************************
**
**    OPERATION: GenJSPJ_CrteListBoxAsList
**               
**               GenJSPJ_CrteListBox creates the list as a <select><option>, this will create 
**               the listbox as an <ul><li>
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteListBoxAsList( VIEW vDialog,
                           INTEGER lFile,
                           STRING ( 10000 ) szWriteBuffer,
                           STRING ( 50 )    szIndent,
                           STRING ( 32 )    szCtrlTag,
                           STRING ( 1 )     szNoPositioning,
                           INTEGER lOffsetX,
                           INTEGER lOffsetY )

   VIEW vScope      BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   VIEW vDialogRoot BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   STRING ( 32 )  szjMobile
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szHTML5Attr
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) ListBoxDoubleClickAction
   STRING ( 256 ) szSubCtrlTag
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLth
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 100 ) szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   INTEGER        lMaxStringLth

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   IF vDialog.Control.CSS_Class = ""
      szClass = ""
   ELSE
      szClass = " class=^" + vDialog.Control.CSS_Class + "^"
   END

   szHTML5Attr = ""
   IF vDialog.Control.WebHTML5Attribute != ""
      szHTML5Attr = " " + vDialog.Control.WebHTML5Attribute + " "
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
   szStyle = " style=^width:" + szWidth + "px;height:" + szHeight + "px;"

   // If szNoPositioning is null then we are using absolute positioning on controls.
   IF szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;"
      //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
   IF szNoPositioning = "S"
      szStyle = "" 
   END
   END

   IF szStyle != ""
      szStyle = szStyle + "^ " 
   END
   szStyle = szStyle + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szSelectFunction = "OnClick"

      // Set cursor to the scoping entity if one exists
      CreateViewFromViewForTask( vScope, vDialog, 0 )
      SET CURSOR NEXT vScope.CtrlMap
      
   // Put in data-role if this is for a jmobile. kkk
   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
   IF vDialogRoot.WndStyle.Tag = "jMobile Window"
      szjMobile = " data-role=^listview^ "
      szWriteBuffer = "   <ul id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^" + szClass + szjMobile + szHTML5Attr + szStyle + szDisabled + ">"
   ELSE
      szWriteBuffer = "   <ol id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^" + szClass + szjMobile + szHTML5Attr + szStyle + szDisabled + ">"
   END      

   //szWriteBuffer = "   <ol id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^" + szClass + szjMobile + szHTML5Attr + szStyle + szDisabled + ">"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS


         // See if a list entity has been specified, and if so, use it.
         // Since this is a listbox I believe this should always be specified.
         IF vDialog.CtrlMapLOD_Entity EXISTS
            szListEntityName = vDialog.CtrlMapLOD_Entity.Name
         END

         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
         szWriteBuffer = "      long   lEntityKey;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String strEntityKey = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )                  
         
         // Set position on the text field inside the listbox.
         IF vDialog.CtrlCtrl EXISTS
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szSubCtrlTag = vDialog.Control.Tag
            szWriteBuffer = "      String str" + szSubCtrlTag + " = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapLOD_Attribute EXISTS
                  // If the Grid entry requests URL Mapping, generate the variable definition here.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                  IF RESULT >= zCURSOR_SET
                     // Define variable for URL Mapping.
                     szWriteBuffer = "      String str" + szSubCtrlTag + "_URL = ^^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
            END
         END
         ResetViewFromSubobject( vDialog )

         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         //szWriteBuffer = "      strComboCurrentValue = ^^;"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szAttributeName = ""
         szEntityName = ""
         szContextName = ""


// Getting view

         // See if a scoping entity has been specified, and if so, use it.
         szScopingEntityName = ""
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zLISTBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vDialog.CtrlMapView.Name + ".newView( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         //szWriteBuffer = "      ComboCount = 0;"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //szWriteBuffer = "      strComboSelectedValue = ^0^;"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF lSubtype = 0
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( csrRC.isSet() )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


         szWriteBuffer = "         lEntityKey = v" + szCtrlTag +
                         ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Set position on the text field inside the listbox.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            szAttributeName = vDialog.CtrlMapER_Attribute.Name
            szEntityName = vDialog.CtrlMapRelatedEntity.Name

            szWriteBuffer = "         nRC = v" + szCtrlTag + ".cursor( ^" +
                            szEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
            IF lMaxStringLth <= 0
               szMaxStringLth = "254"
            ELSE
               szMaxStringLth = lMaxStringLth
            END

            szWriteBuffer = "            str" + szSubCtrlTag + " = v" + szCtrlTag +
                     ".cursor( ^" +
                     szEntityName + "^ ).getAttribute( ^" +
                     szAttributeName + "^ ).getString( ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
            szWriteBuffer = "            if ( str" + szSubCtrlTag + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               str" + szSubCtrlTag + " = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            
            // If the Grid entry requests URL Mapping, generate the code here.
            SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
            IF RESULT >= zCURSOR_SET
               //szControlTag = "str" + vDialog.Control.Tag + "_URL"
               szWriteBuffer = "            str" + szSubCtrlTag + "_URL = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRC = v" + szCtrlTag +
                            ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
               IF lMaxStringLth <= 0
                  szMaxStringLth = "254"
               ELSE
                  szMaxStringLth = lMaxStringLth
               END
               IF vDialog.CtrlMapContext EXISTS
                  szContextName = vDialog.CtrlMapContext.Name
               ELSE
                  szContextName = ""
               END
               szWriteBuffer = "               str" + szSubCtrlTag + "_URL = v" + szCtrlTag +
                               ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                               "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
                        
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

/****************************************         */

      //szWriteBuffer = "       <li><a href=^#^ " + szClass + " onclick=^" + szActionName + "( )^>" + szNavigationTitle + "</a></li>"
      // In the case of jmobile, I am putting the HTML5 and class on the <a href
      //IF vDialogRoot.WndStyle.Tag = "jMobile Window"
         //szWriteBuffer = "       <li id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^><a href=^#^ " + szHTML5Attr + szClass + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      //ELSE
         //szWriteBuffer = "       <li id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^" + szHTML5Attr + szClass + "><a href=^#^ " + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      //END
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.Control.CSS_Class = ""
               szClass = ""
            ELSE
               szClass = " class=^" + vDialog.Control.CSS_Class + "^"
            END
         
            szHTML5Attr = ""
            IF vDialog.Control.WebHTML5Attribute != ""
               szHTML5Attr = " " + vDialog.Control.WebHTML5Attribute + " "
            END
         
            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialog.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END
                        
            IF vDialog.EventAct EXISTS
               IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
                  // For a Hyperlink in a Grid, we assume there is ALWAYS both "Displayed Text" mapping and
                  // "Hyperlink URL" mapping, which have been set above.
                  // THIS DOESN"T WORK AT THE MOMENT
                  szWriteBuffer = "   <li id=^" + szSubCtrlTag + "::<%=strEntityKey%>^ name=^" + szSubCtrlTag + "::<%=strEntityKey%>^" + szHTML5Attr + szClass  
                  szWriteBuffer = szWriteBuffer + "><a href=^<%=str" + szSubCtrlTag + "_URL%>^ " + szTitleHTML + " target=^_blank^><%=str" + szSubCtrlTag 
                  szWriteBuffer = szWriteBuffer + "%></a></li>"
               ELSE
                  // Put the class html5 on <a ref. I know we want this for window style jmobile but not sure we want this all the time? Then we would do above line?
                  szWriteBuffer = "   <li id=^" + szSubCtrlTag + "::<%=strEntityKey%>^ name=^" + szSubCtrlTag + "::<%=strEntityKey%>^>"
                  szWriteBuffer = szWriteBuffer + "<a href=^#^" + szHTML5Attr + szClass + " onclick=^" + vDialog.EventAct.Tag + "( this.id )^"
                  szWriteBuffer = szWriteBuffer + szTitleHTML + "><%=str" + szSubCtrlTag + "%></a></li>"
               END
            ELSE
               // Regular default Grid subcontrol.
               szWriteBuffer = "   <li id=^" + szSubCtrlTag + "::<%=strEntityKey%>^ name=^" + szSubCtrlTag + "::<%=strEntityKey%>^><%=str" + szSubCtrlTag + "%></li>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
/**********************************************/         
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         ResetViewFromSubobject( vDialog )
            szWriteBuffer = "         csrRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   IF vDialogRoot.WndStyle.Tag = "jMobile Window"
      szWriteBuffer = "</ul>"
   ELSE
      szWriteBuffer = "</ol>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
END


/*************************************************************************************************
**    
**    OPERATION: GenJSPJ_CrteMLEdit
**    JSP Java generation for MLE control
**    
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteMLEdit( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   VIEW vLPLR       BASED ON LOD TZCMLPLO
   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szLPLR_Name
   STRING ( 32 )  szContextName
   STRING ( 256 ) szClass
   STRING ( 50 )  szControlType
   STRING ( 50 )  szSize
   STRING ( 50 )  szWidth
   STRING ( 50 )  szHeight
   STRING ( 300 ) szAbsoluteStyle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szTitle
   STRING ( 50 )  szTabIndex
   STRING ( 50 )  szActionName
   STRING ( 500 ) szActionCode
   STRING ( 256 ) szText
   STRING ( 10 )  szMaxStringLth
   STRING ( 1 )   szTinyMCEFlag
   DECIMAL        dDLUnits
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        Size
   INTEGER        lMaxStringLth
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          nRC

   //TraceLineS("**** GenJSPJ_CrteMLEdit **** ", "")

   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorColor = ^color:red;^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
     
      GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )   
      // KJS 03/13/18 - If the view is read only, then we want to set the combo box to disabled.
      // We only do this if the zeidon.ini has UseZeidonControlActionsView
      IF vDialogRoot.Dialog.wWebUsesControlActionsView = "Y" 
         szWriteBuffer = "         strDisabled = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         if ( " + vDialog.CtrlMapView.Name + ".isReadOnly( ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strDisabled = ^disabled^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END      
      
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END

      lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
      IF lMaxStringLth <= 0
         szMaxStringLth = "254"
      ELSE
         szMaxStringLth = lMaxStringLth
      END

      szWriteBuffer = "            strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).info( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).info( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      END

      // This doesn't work, but something like it may be necessary to remove special characters ... dks 2012.04.25
      // strErrorMapValue = strErrorMapValue.replace("/&/g", "&amp;").replace("/>/g", "&gt;").replace("/</g", "&lt;").replace("/\"/g", "&quot;").replace("/%/g", "&#037;");

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   END // SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   
   // *********************  NEW ******************
   
   // If there is an Event for the MLEdit, build code to insert in <textarea statement.
   szActionCode = ""
   FOR EACH vDialog.Event
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         IF vDialog.Event.Type = 32
            szActionCode = szActionCode + " onfocus=^" + szActionName + "( )^ "
         ELSE
         IF vDialog.Event.Type = 64
            szActionCode = szActionCode + " onblur=^" + szActionName + "( )^ "
         ELSE
         IF vDialog.Event.Type = 1024
            szActionCode = szActionCode + " onchange=^" + szActionName + "( )^ "
         ELSE
         IF vDialog.Event.Type = 1
            szActionCode = szActionCode + " onkeydown=^" + szActionName + "( )^ "
         END
         END
         END
         END
      END
   END
   
   // *********************  END NEW ******************

   IF szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
   ELSE
   IF szNoPositioning = "S" // No style information
      szAbsoluteStyle = "" 
   ELSE 
      CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
   END
   END

   /* 10d code Doug has
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
   */

   IF vDialog.Control.VisibleBorder = "Y" AND  szNoPositioning != "S"
      zAppendQuotedString( szAbsoluteStyle, "border:solid;border-width:4px;border-style:groove;", "style=", "^" )
   // KJS 01/26/17 - Taking out the border, doesn't seem to really be doing anything and it conflicts with css.
   //ELSE
   //   zAppendQuotedString( szStyle, "border:solid;border-width:2px;border-style:groove;", "style=", "^" )
   END
   
   szTinyMCEFlag = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
   IF RESULT >= zCURSOR_SET
      szTinyMCEFlag = "Y"
   END

   // dks 2016.04.08 - trying placeholder
   // If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^"
   END
   szTitle = vDialog.Control.WebPlaceholder
   IF szTitle != ""
      szTitleHTML = szTitleHTML + " placeholder=^" + szTitle + "^"
   END
   //szTitle = vDialog.Control.Placeholder
   IF szTitle = "" AND vDialog.Control.Placeholder != ""
      szTitleHTML = szTitleHTML + " placeholder=^" + szTitle + "^"
   END

   IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

   // CreateTabIndexString( vDialog, szTabIndex )
   // CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
   // szAbsoluteStyle = szAbsoluteStyle + szTabIndex

      szClass = vDialog.Control.CSS_Class
      IF szClass = ""
         GetViewByName( vLPLR, "TaskLPLR", vDialog, zLEVEL_TASK )
         szText = vLPLR.LPLR.Name
         szLPLR_Name = "[App." + szText + "]"
         SysReadZeidonIni( -1, szLPLR_Name, "TinyMCEClass", szClass )
         IF szClass = ""
            szClass = "mceSimple"  // "mceSimple" is TinyMCE default
         END
      END

      nRC = zSearchSubString( szClass, "mceSimpleZeidon", "f", 0 )
      IF nRC >= 0
         szWriteBuffer = "<div style=^background-color:#eee;border:1px solid #042;width:" + szWidth + "px;height:" + szHeight + "px;position:absolute;left:0px;top:0px;overflow:auto;^>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<div class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ style=^width:" + szWidth + "px;height:" + szHeight + "px;position:absolute;left:0px;top:0px;^><%=strErrorMapValue%></div></div>"
      ELSE
         szWriteBuffer = "<textarea name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                         "^ <%=strDisabled%> class=^" + szClass + "^ " + szTitleHTML + szAbsoluteStyle + szActionCode + ">" +
                      // "^ rows="15" cols="80" style="width: 80%">" +
                         "<%=strErrorMapValue%></textarea>"
      END

   ELSE
      szClass = ""
      IF vDialog.Control.CSS_Class != ""
         szClass = vDialog.Control.CSS_Class
         szClass = " class=^" + vDialog.Control.CSS_Class + "^"
      END
      CreateTabIndexString( vDialog, szTabIndex )
      szWriteBuffer = "<textarea name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ <%=strDisabled%> " + szTitleHTML +
                      szAbsoluteStyle + szTabIndex + szClass + szActionCode + " wrap=^wrap^>" +
                      "<%=strErrorMapValue%></textarea>"

   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END



/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrtePushButton
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrtePushButton( VIEW vDialog BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format an PushButton control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 300 ) szValue
   STRING ( 600 ) szBlob
   STRING ( 300 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szHTML5Attr
   STRING ( 300 ) szType
   STRING ( 500 ) szText
   STRING ( 500 ) szText2
   STRING ( 256 ) szTextID
   STRING ( 5 )   szSrch
   STRING ( 50 )  szParentWebType
   STRING ( 256 ) szTerm
   STRING ( 256 ) szAction
   STRING ( 600 ) szWidget
   STRING ( 16 )  szTabIndex
   STRING ( 600 ) szEditActionCode
   STRING ( 32 )  szActionName
   STRING ( 10 )  szMaxStringLth
   STRING ( 100 ) szDisabled
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szCreateSessionVariable
   STRING ( 1 )   szBrowseFile
   STRING ( 1 )   szHyperlink
   INTEGER        lMaxStringLth
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          bMapping
   SHORT          nRC

   // For testing no height on input boxes
   STRING ( 10 )  szWidth
   DECIMAL        dDLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   //TraceLineS("*** GenJSPJ_CrtePushButton *** ", "")

   GetViewByName( vDialogRoot, "DialogRoot", vDialog, zLEVEL_TASK )

   IF szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
      // KJS 01/26/17 - Trying to take out the button height for Aadit. I'm not sure we really want to do this
      // but I am just going to put it in temporarily.
      /*
      //CreateNoPosStyleString( vDialog, szStyle, "" )
      PIX_PER_DU( vDialog, dDLUnits )
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
      //zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
      szStyle = "style=^width:" + szWidth + "px;^"
      */
   ELSE
   IF szNoPositioning = "S" // No style information
      szStyle = "" 
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   END
      
   szHyperlink = ""
   szActionName = ""
   IF vDialog.EventAct EXISTS
      IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
         szHyperlink = "Y"
      ELSE
         szActionName = vDialog.EventAct.Tag
         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END
      END
   END

   CreateTabIndexString( vDialog, szTabIndex )
   szStyle = szStyle + szTabIndex
            
   // KJS 10/20/15 - If there is mapping for the button text, we need to use that.
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET 
      bMapping = 1
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END
      
      // Add try/catch
      szWriteBuffer = "            try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
      IF lMaxStringLth <= 0
         szMaxStringLth = "254"
      ELSE
         szMaxStringLth = lMaxStringLth
      END
      szWriteBuffer = "               strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.Control.WebCtrlType = "escapeHTML"
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " prior to unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               strErrorMapValue = StringEscapeUtils.unescapeHtml4( strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " after unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               out.println(^There is an error on " + szCtrlTag + ": ^ + e.getMessage());"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               task.log().error( ^*** Error on ctrl " + szCtrlTag + "^, e );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      /***************** END OF try/catch **********************/

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "      if ( strErrorMapValue == ^^ )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      
      //szText = "<%=strErrorMapValue%>"

      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText = "<%=LangConv.getLanguageText(strErrorMapValue)%>" 
      ELSE
         szText = "<%=strErrorMapValue%>"
      END
   ELSE
      //szText = vDialog.Control.Text
      // KJS 09/30/16 - Language Conversion.
      // I'm not sure that I want to use language conversion on mapped fields, but then again, I'm thinking maybe we should.
      // So for now, I am always using, if the flag is set.
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText2 = vDialog.Control.Text
         szTextID = vDialog.Control.LangID
         zSearchAndReplace( szText2, 1000, "\", "\\" )
         szSrch = "\" + QUOTES 
         zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
         szSrch = ""
         IF szTextID = ""
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
         ELSE 
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
         END
         //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
      ELSE
         szText = vDialog.Control.Text
      END

   END

   //szText = vDialog.Control.Text
   // Set Class as either null or with Class value.
   IF vDialog.Control.CSS_Class = ""
      szClass = ""
   ELSE
      szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   szHTML5Attr = ""
   IF vDialog.Control.WebHTML5Attribute != ""
      szHTML5Attr = " " + vDialog.Control.WebHTML5Attribute + " "
   END

   szWidget = "<button type=^button^ " + szClass + szTitleHTML + szHTML5Attr + "name=^"
   szTerm = szText + "</button>"
   szText = ""
      
   // Action is different if this is a repeating group.
   IF szRepeatGrpKey = ""
      szAction = szActionName + "( )"
   ELSE
      szAction = szActionName + "( '" + szCtrlTag + szRepeatGrpKey + "' )"
   END

   szParentWebType = ""
   // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
   // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
   IF vGroupParent != 0
      //*
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
      IF RESULT >= zCURSOR_SET
         szParentWebType = "RelativePos"
      ELSE
         szParentWebType = vGroupParent.Control.WebCtrlType
      END
      //*/
      //szParentWebType = vGroupParent.Control.WebCtrlType
   END
   
   
   // KJS 05/18/17 - Trying... if button has an action of link html, then we will use
   // the mapping as the link text.
   IF szHyperlink = "Y"

      //<button class="buttonlinkdirections"  data-theme="b" data-icon="navigation" data-inline="true" data-iconpos="right" ><a href="<%=strTextURL_Value%>" target="_blank">Directions2</a></button>
      IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
         szText2 = vDialog.Control.Text
         szTextID = vDialog.Control.LangID
         zSearchAndReplace( szText2, 1000, "\", "\\" )
         szSrch = "\" + QUOTES 
         zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
         szSrch = ""
         IF szTextID = ""
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
         ELSE 
            szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
         END
      ELSE
         szText = vDialog.Control.Text
      END
      szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^" + szStyle + " ><a href=^<%=strErrorMapValue%>^ target=^_blank^>" + 
                      szText + "</a></button>"    
   ELSE
   IF szParentWebType = "Div" OR szParentWebType = "DivScroll" OR
      szParentWebType = "Span"

      szWriteBuffer = "<p></p>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      CreateSizeString( vDialog, szSize )
      szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                      szAction + "^ " + "style=^" + szSize + "^>" + szTerm
   ELSE
      szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                      szAction + "^ " + szStyle + ">" + szTerm
   END
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
END


/*************************************************************************************************
**    
**    OPERATION: GenJSPJ_CrteFileTransferForm
**    
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteFileTransferForm( VIEW vDialog,
                              VIEW vDialogRoot,
                              INTEGER lFileJSP,
                              STRING ( 10000 ) szWriteBuffer,
                              STRING ( 32 ) szIndent,
                              STRING ( 1 ) szNoPositioning,
                              INTEGER          lOffsetX,
                              INTEGER          lOffsetY )

   VIEW vDialogTemp  BASED ON LOD TZWDLGSO
   STRING ( 64 )    szFormName
   STRING ( 50 )    szCSS_Class
   STRING ( 256 )   szClass
   STRING ( 32 )    szCtrlTag
   STRING ( 300 )   szStyle
   STRING ( 34 )    szActionTag
   STRING ( 50 )    szControlType
   STRING ( 500 )   szText
   STRING ( 256 )   szTextID
   STRING ( 5 )     szSrch
   STRING ( 500 )   szText2
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szHTML5Attr
   STRING ( 256 ) szPlaceholder
   STRING ( 16 )  szWidth
   STRING ( 16 )  szHeight
   STRING ( 1 )   szGroupBoxAbsPosFlag
   STRING ( 1 )   szGridGroupingFlag
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szIncludeFileFlag
   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   INTEGER          lControl
   INTEGER          lSizeX
   INTEGER          lSizeY
   INTEGER          lTrace
   INTEGER        lHeight
   INTEGER        lWidth
   INTEGER        LastY_Pos
   INTEGER        LastY_Height
   INTEGER        LastY_PosGroup
   INTEGER        LastX_Pos
   INTEGER        LastX_Width
   INTEGER        MaxY_HeightForLine
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   SHORT            nRC

   DECIMAL        dDLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   
   // KJS 11/07/16 - For file transfer, since it doesn't place the controls correctly (if there are more controls than the
   // edit and button), we are going to try, closing the previous <form> and creating the form for the upload. Any controls
   // that are after the "file upload" groupbox, are going to be placed in this form. Because on the actions, we submit the
   // original (first) form, this doesn't seem to be a problem, but we will see...
   szWriteBuffer = "</form>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
   // as a table and try and position what is in this group box as a table.
   szGroupIsTable = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
   IF RESULT >= zCURSOR_SET
      szGroupIsTable = "Y"
   END

   // A groupbox might want the children to be absolutely positioned.  Allow for this.
   szGroupBoxAbsPosFlag = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Pos"
   IF RESULT >= zCURSOR_SET
      szGroupBoxAbsPosFlag = "Y"
   END
     
   // There are times when the user wants to paint a div that has no height so it will grow with the
   // data within it.  This flags the div will have no height.
   szNoHeightFlag = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
   IF RESULT >= zCURSOR_SET
      szNoHeightFlag = "Y"
   END
   
   // There are times when the user wants to paint a div that has no width so it will grow with the
   // data within it.  This flags the div will have no width.
   szNoWidthFlag = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
   IF RESULT >= zCURSOR_SET
      szNoWidthFlag = "Y"
   END
   
   PIX_PER_DU( vDialog, dDLUnits )

   // FORM GENERATION FOR FILE TRANSFER GROUPS
   // Create Form statements for each Group of type "File Transfer to Server".
   // Note that each Group requires a subcontrol of type EditBox and another of type PushBtn.
   CreateViewFromView( vDialogTemp, vDialog )
   NAME VIEW vDialogTemp "vDialogTemp"

   // Generate Form Statement for Group, with hidden field zAction.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szFormName = vDialogTemp.Control.Tag
   szWriteBuffer = "<form name=^" + szFormName + "^  id=^" + szFormName + "^ method=^post^ enctype=^multipart/form-data^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^HELP^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      //CreateAbsolStyleString( vDialogTemp, szStyle, lSizeX, lSizeY, "" )
      // Initialize the szStyle variable with X and Y values.
      IF szNoPositioning = "Y"
      
         lWidth = vDialog.Control.SZDLG_X * dDLUnits
         lHeight = vDialog.Control.SZDLG_Y * dDLUnits
         zIntegerToString( szWidth, 10, lWidth )
         zIntegerToString( szHeight, 10, lHeight )
      
         // If szGroupBoxAbsPosFlag = "Y" then we are saying that the children of this group box will
         // be absolutely positioned.
         IF szGroupBoxAbsPosFlag = "Y"
         
            //szNoPositioningHold = szNoPositioning
            //szNoPositioning = ""  // we want absolute positioning on all child controls
            
            IF szNoHeightFlag = "Y" // We might not want the groupbox to have a height (so it grows)
               szStyle = "style=^float:left;position:relative; width:" + szWidth + "px;^"
            ELSE
               //zIntegerToString( szHeight, 10, lHeight * dDLUnits )
               szStyle = "style=^float:left;position:relative; width:" + szWidth + "px; height:" + szHeight + "px;^"
            END                      
         ELSE 
         IF szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szStyle = ""
         ELSE
         IF szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            szStyle = "style=^width:" + szWidth + "px;^"
         ELSE
         IF szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            szStyle = "style=^height:" + szHeight + "px;^"
         ELSE
            CreateNoPosStyleString( vDialog, szStyle, "" )
         END
         END
         END
         END
      ELSE
      IF  szNoPositioning = "S" // We are not creating any style information.
         szStyle = ""
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
      END
      END

      szClass = ""
      IF vDialogTemp.Control.CSS_Class != ""
         szClass = " class=^" + vDialogTemp.Control.CSS_Class + "^"
      END
      szWriteBuffer = "<div " + szStyle + szClass + ">  <!-- " + vDialogTemp.Control.Tag + " --> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      // Get Group positions for adding to subcontrols.
      //lSizeX = vDialogTemp.Control.PSDLG_X * dDLUnits
      //lSizeY = vDialogTemp.Control.PSDLG_Y * dDLUnits

      // Generate hidden field zTargetFileName, with JSP to retrieve name.
      // We are currently positioned on the GroupBox and need to reposition on the subcontrol Button
      // to generate the FileName mapping..
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      SetViewToSubobject( vDialogTemp, "CtrlCtrl" )
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            IF vDialogTemp.CtrlMapER_Attribute EXISTS
               // The mapping for the Push Button specifies the attribute that contains the Target File Name (without suffix).

            // szWriteBuffer = "   strSessionId = session.getId( );"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "   " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialogTemp.CtrlMapView.Name + " ) )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialogTemp.CtrlMapView.Name + ".cursor( ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = " +
                               vDialogTemp.CtrlMapView.Name + ".cursor(^" + vDialogTemp.CtrlMapRelatedEntity.Name +
                               "^).getAttribute( ^" +
                               vDialogTemp.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               IF (lTrace = 1)
                  szWriteBuffer = "   else"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      task.log().info( ^Invalid View: ^ + ^" + vDialogTemp.Control.Tag + "^ );"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

            END
         END
      END
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zTargetFileName^ id=^zTargetFileName^ type=^hidden^ value=^<%=strErrorMapValue%>^ >"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      IF szGroupIsTable = "Y" 
         szWriteBuffer = "<table>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<td>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      END

      // Process EditBox and PushBtn as subcontrols.
      FOR EACH vDialogTemp.Control
      
         IF vDialogTemp.ControlDef.Tag = "EditBox"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            //CreateAbsolStyleString( vDialogTemp, szStyle, lSizeX, lSizeY, "" )
            zIntegerToString( szWidth, 10, vDialogTemp.Control.SZDLG_X * dDLUnits )
            szSize = "width:" + szWidth + "px;"
            // If zNoPositioning is null then we are using absolute positioning for controls
            IF  szNoPositioning = ""
               CreateAbsolPosString( vDialogTemp, szPosition, lOffsetX, lOffsetY )
            END
            
            IF szNoPositioning = "S" 
               szStyle = ""
            ELSE 
               FixStyleString( szStyle, szSize, szPosition,  "<%=strErrorColor%>"  )
            END
            
            //szStyle = szStyle + szTabIndex
            szTitleHTML = ""
            szTitle = vDialogTemp.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END
            
            szPlaceholder = ""
            IF vDialogTemp.Control.WebPlaceholder != ""
               szPlaceholder = " placeholder=^" + vDialogTemp.Control.WebPlaceholder + "^ "
            END
            
            szHTML5Attr = ""
            IF vDialogTemp.Control.WebHTML5Attribute != ""
               szHTML5Attr = " " + vDialogTemp.Control.WebHTML5Attribute + " "
            END
   
            szClass = ""
            IF vDialogTemp.Control.CSS_Class != ""
               szClass = " class=^" + vDialogTemp.Control.CSS_Class + "^ "
            END
            
            // For some reason with the <input type="file" control, the width property doesn't
            // seem to size the width correctly.  Use the "size" attribute instead.  The weird thing
            // is that if I don't include the width in style, then the "Browse" button that gets
            // created is not inline with the field that displays the upload file. ???!!!
            zIntegerToString( szWidth, 10, vDialogTemp.Control.SZDLG_X / 3.5 )

            szWriteBuffer = "   <input name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^" + szClass + szHTML5Attr + szTitleHTML + szPlaceholder + " size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

            LastY_Pos    = vDialogTemp.Control.PSDLG_Y
            LastY_Height = vDialogTemp.Control.SZDLG_Y
            LastX_Pos    = vDialogTemp.Control.PSDLG_X
            LastX_Width  = vDialogTemp.Control.SZDLG_X
         END
         // We are just assuming that the "Unload" button is positioned after the edit field.
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
         
            IF szGroupIsTable = "Y" AND ( vDialogTemp.Control.PSDLG_Y > LastY_Pos )
               szWriteBuffer = "</td>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<tr>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<td>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            ELSE
            IF szGroupIsTable = "Y" AND ( vDialogTemp.Control.PSDLG_Y <= LastY_Pos ) 
               szWriteBuffer = "</td>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<td>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )            
            END
            END
         
            // Determine if there is blank space in between the y coordinates of the last
            // control and the current control.  If so, then we need to put in a div as a spacer control.
            IF szNoPositioning = "Y" AND szGroupIsTable = "" AND ( vDialogTemp.Control.PSDLG_Y > LastY_Pos )
   
                  Y_Size = ( vDialogTemp.Control.PSDLG_Y - ( LastY_Pos + LastY_Height ) ) * dDLUnits
                  X_Size = 10
                  zIntegerToString( szHeight, 16, Y_Size )
                  zIntegerToString( szWidth, 16, X_Size )
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = " <!-- This is added as a line spacer -->"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;^></div>"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END
            IF szNoPositioning = "Y" AND szGroupIsTable = "" AND ( vDialogTemp.Control.PSDLG_X > 0 )
   
                  X_Size = ( vDialogTemp.Control.PSDLG_X ) * dDLUnits
                  Y_Size = 1
                  zIntegerToString( szHeight, 16, Y_Size )
                  zIntegerToString( szWidth, 16, X_Size )
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = " <!-- This is added as a width spacer -->"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
                     
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            //CreateAbsolStyleString( vDialogTemp, szStyle, lSizeX, lSizeY, "" )
            IF szNoPositioning = "Y"
               CreateNoPosStyleString( vDialogTemp, szStyle, "" )
       /*
      // KJS 01/26/17 - Trying to take out the button height for Aadit. I'm not sure we really want to do this
      // but I am just going to put it in temporarily.
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
      //zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
      szStyle = "style=^width:" + szWidth + "px;^"
      */
            ELSE
            IF szNoPositioning = "S" // No style information
               szStyle = "" 
            ELSE 
               CreateAbsolStyleString( vDialogTemp, szStyle, lOffsetX, lOffsetY, "" )
            END
            END
            
            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialogTemp.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END
   
            szHTML5Attr = ""
            IF vDialogTemp.Control.WebHTML5Attribute != ""
               szHTML5Attr = " " + vDialogTemp.Control.WebHTML5Attribute + " "
            END
  
            szActionTag = ""
            IF vDialogTemp.EventAct EXISTS
               szActionTag = vDialogTemp.EventAct.Tag
            END
            szClass = vDialogTemp.Control.CSS_Class
            
            IF vDialogRoot.Dialog.wWebUsesLanguageConversion = "Y"
               szText2 = vDialogTemp.Control.Text
               szTextID = vDialog.Control.LangID
               zSearchAndReplace( szText2, 1000, "\", "\\" )
               szSrch = "\" + QUOTES 
               zSearchAndReplace( szText2, 1000, QUOTES, szSrch )
               szSrch = ""
               IF szTextID = ""
                  szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
               ELSE 
                  szText = "<%=LangConv.getLanguageText(^" + szText2 + "^, ^" + szTextID + "^)%>" 
               END
               //szText = "<%=LangConv.getLanguageText(^" + szText2 + "^)%>" 
            ELSE
               szText = vDialogTemp.Control.Text
            END
            
            //IF szNoPositioning = "Y"
            //   szWriteBuffer = "<div style=^float:left;^>"
            //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            //END
            IF szClass = ""
               //szWriteBuffer = "   <input type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionTag + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionTag + "()^ " + szStyle + szTitleHTML + szHTML5Attr + " >" + szText + "</button>"
            ELSE
               //szWriteBuffer = "   <input class=^" + szClass + "^ type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionTag + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionTag + "()^ " + szStyle + szTitleHTML + szHTML5Attr + " >" + szText + "</button>"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            //IF szNoPositioning = "Y"
            //   szWriteBuffer = "</div>"
            //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            //END
            IF szGroupIsTable = "Y" 
               szWriteBuffer = "</td>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</table>"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END
         END
      END
      ResetViewFromSubobject( vDialogTemp )

      szWriteBuffer = "</div>  <!-- " + vDialogTemp.Control.Tag + " --> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      //szWriteBuffer = "</form>"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      //lControl = zQUAL_STRING + zPOS_NEXT + zRECURS
      //szCtrlTag = "File Transfer to Server"
      //nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
      //                       szCtrlTag, "", "", 0, "Window", "" )
   //END
   DropView( vDialogTemp )
END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_Action
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_Action( VIEW vDialog     BASED ON LOD TZWDLGSO,
                VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 255 )   szFormName,
                STRING ( 34 )    szActionName,
                INTEGER          lTraceLevel )

   VIEW vLPLR       BASED ON LOD TZCMLPLO
   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   VIEW vDialogCtrl BASED ON LOD TZWDLGSO
   STRING ( 10000 ) szJavaScript
   STRING ( 32 )    szJavaScriptLocation
   STRING ( 64 )    szSystemIniApplName
   STRING ( 100 )   szViewName
   STRING ( 100 )   szEntityName
   STRING ( 100 )   szEntityNameR
   STRING ( 100 )   szScopingName
   STRING ( 100 )   szContextName
   STRING ( 64 )    szDlgTagRoot
   STRING ( 100 )   szWndTagRoot
   STRING ( 100 )   szCtrlTag
   STRING ( 100 )   szDlgTag
   STRING ( 64 )    szWndTag
   STRING ( 64 )    szOperName
   STRING ( 100 )   szDownloadViewName
   STRING ( 100 )   szUploadViewName
   STRING ( 64 )    szWAB
   STRING ( 10 )    szMaxStringLth
   STRING ( 50 )    szPrivateKey
   STRING ( 50 )    szPublicKey
   STRING ( 3 )     szBuffer
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szCommentAdded
   STRING ( 1 )     szDialogClassCreated
   STRING ( 1 )     szUploadTransferFileFlag
   STRING ( 1 )     szPosDataCreated
   STRING ( 1 )     szWebRedirection
   STRING ( 1 )     szRepeatingGroupFlag
   STRING ( 1 )     szProductionMode
   STRING ( 1 )     szGridScopeOI
   INTEGER          lControl
   INTEGER          lMaxStringLth
   INTEGER          lActionType
   INTEGER          lAutoSubAction
   INTEGER          lAutoNextPrev
   INTEGER          lSubtypeX
   SHORT            nViewNameLth
   SHORT            nGridParent
   SHORT            nSystemSort
   SHORT            nRC

   InsertBlankFlag = "N"
   
   //TraceLineS("*** GenJSPJ_Action *** ", "")

   // KJS 12/16/16 - I switched "WL_QC( vDialog" to "WL_QC( vDialogRoot".
   // The reason is because sometimes we call this operation when looking at resusable actions from a different dialog.
   // If so, vDialog (gotten from ActivateMetaOI_ByZKey) is not always associated with the open file that we are generating to. Because of this, the actions don't
   // get created. So changing to vDialogRoot which was build off of the original vDialog.

   szWebRedirection = ""
   GetViewByName( vLPLR, "TaskLPLR", vDialog, zLEVEL_TASK )
   szSystemIniApplName = "[App." + vLPLR.LPLR.Name + "]"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebRedirection", szWebRedirection )
   
   szWriteBuffer = "   while ( bDone == false && StringUtils.equals( strActionToProcess, ^" + szActionName + "^ ) )"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( session, task, ^" + szFormName + "^, strActionToProcess );"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

   szDialogClassCreated = "N"
   szDlgTagRoot = vDialogRoot.Dialog.Tag
   szWndTagRoot = vDialogRoot.Window.Tag
   szJavaScript = vDialog.Action.WebJavaScript
   szJavaScriptLocation = vDialog.Action.WebJavaScriptLocation

   IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Mapping"
      szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END

//**********************************
   szProductionMode = "" // this was something I tried but not using here...

   // KJS 11/05/09
   // If we unregister zeidon at the end of building this window, then when the user clicks an action,
   // we need to call any Prebuild/Posbuild operations (that would build objects used on this page) before we
   // call the action selected.
   IF vDialogRoot.Window.WEB_UnregisterZeidonWindow = "Y"
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      szCommentAdded = "N"
      FOR EACH vDialogTemp.Action
         FOR EACH vDialogTemp.ActWndEvent
            IF vDialogTemp.ActWndEvent.Type = 1 OR vDialogTemp.ActWndEvent.Type = 2

               IF vDialogTemp.ActOper EXISTS

                  // Don't want to add this comment twice if there is an operation for both prebuild and postbuild.
                  IF szCommentAdded = "N"
                     szWriteBuffer = "      // Prebuild/Postbuild Operations."
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // These are called because we Unregister Zeidon when this page is finished loading, so"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // these operations need to be called before any action code (for recreating objects etc)."
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szCommentAdded = "Y"
                  END

                  // In order to call a dialog operation we need to create an instance of the dialog class.  We only want to do this once.
                  IF szDialogClassCreated = "N"
                     IF szDlgTagRoot != vDialogTemp.Dialog.Tag
                        szWriteBuffer = "      " +  vDialogTemp.Dialog.Tag + "_Dialog " + vDialogTemp.Dialog.Tag + " = new " +
                                        vDialogTemp.Dialog.Tag + "_Dialog( vKZXMLPGO );"
                        WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

                        szDialogClassCreated = "Y"
                     END
                  END
                  
                  // KJS 08/06/14 - I had put a try/catch around the operation call because it seemed better than getting the exception
                  // crash. But that might be true in production but when developing, we'd really like to see the stack trace. Want to make
                  // this an ini setting but for now I think I am just going to make the operation call and skip the try/catch.
                  szProductionMode = ""
                  IF szProductionMode = "Y"
                     
                     szWriteBuffer = "      try"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      catch (Exception e)"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         // Set the error return code."
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         nOptRC = 2;"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strVMLError = ^<br><br>*** Error running Operation " + vDialogTemp.ActOper.Name + ", Please contact the helpdesk: ^ + e.getMessage();"     
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         task.log().error( strVMLError, e );"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   
                     //szWriteBuffer = "      nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                     //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nOptRC == 2 )"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         session.setAttribute( ^ZeidonError^, ^Y^ );"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         break;"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
                  ELSE
                     szWriteBuffer = "      nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                     WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                     
                  END
               END
            END
         END
      END
      DropView ( vDialogTemp )

   END

//***********************************

   // Keep position on the Control that triggers the Action, if it exists.
   CreateViewFromView( vDialogCtrl, vDialog )
   NAME VIEW vDialogCtrl "vDialogCtrl"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogCtrl, "EventAct", "Tag", lControl, szActionName, "", "", 0, "Window", "" )
   IF nRC < zCURSOR_SET
      DropView( vDialogCtrl )
      vDialogCtrl = 0
   END

   lActionType = vDialog.Action.Type
   IF lActionType = zWAB_StayOnWindow OR
      lActionType = zWAB_StayOnWindowWithRefresh OR
      lActionType = zWAB_StayOnWindowWebRefresh OR
      lActionType = zWAB_StayOnWindowRefreshNP
      szWAB = "zWAB_StayOnWindowWithRefresh"
   ELSE
      IF lActionType = zWAB_StartModelessSubwindow OR
         lActionType = zWAB_StartModalSubwindow OR
         lActionType = zWAB_StartModalSubwindowNP
         szWAB = "zWAB_StartModalSubwindow"
      ELSE
         IF lActionType = zWAB_ReplaceWindowWithModelessWindow OR
            lActionType = zWAB_ReplaceWindowWithModalWindow
            szWAB = "zWAB_ReplaceWindowWithModalWindow"
         ELSE
            IF lActionType = zWAB_ReturnToParent OR
               lActionType = zWAB_ReturnToParentWithRefresh
               szWAB = "zWAB_ReturnToParent"
            ELSE
               IF lActionType = zWAB_StartTopWindow
                  szWAB = "zWAB_StartTopWindow"
               ELSE
                  IF lActionType = zWAB_ResetTopWindow
                     szWAB = "zWAB_ResetTopWindow"
                  ELSE
                     szWAB = ""
                  END
               END
            END
         END
      END
   END

   IF lActionType = zWAB_StartBrowserHTML_Page
      // KJS 02/09/2012 - I'm not sure what this is doing... does it even work?
      // Causing error in JOE so I am commenting out for now.
      szWriteBuffer = "      strURL = task.MakeWebFileName( 0 ) + ^.html^;"
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      task.dropName( strURL );"
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF lActionType = zWAB_ProcessDownloadFile
         // Download File constants
         szWriteBuffer = "      String sDownloadFile = null;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sSourceFileNameOnly = null;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sExtension = null;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int l;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int x;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

         // Download File mapping view: Mapping must be specified for download processing.
         IF vDialogCtrl = 0
            MessageSend( vDialog, "", "Download File Generation",
                                     "The Control with 'Download File' action could not be located.",
                                     zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         ELSE
            IF vDialogCtrl.CtrlMapER_Attribute DOES NOT EXIST
               MessageSend( vDialog, "", "Download File Generation",
                                        "The Control with 'Download File' action must specify mapping for the source file name.",
                                        zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            ELSE
               szDownloadViewName = vDialogCtrl.CtrlMapView.Name
               szWriteBuffer = "      View " + szDownloadViewName + ";"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            END
         END
      END
   END

   // We need to determine if this Action is on a Group for File Transfer to Server, because we will not
   // generate the call to DoInputMapping in that case.
   szUploadTransferFileFlag = ""
   IF vDialogCtrl > 0
      CreateViewFromView( vDialogTemp, vDialogCtrl )
      ResetViewFromSubobject( vDialogTemp )
      SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
      IF RESULT < zCURSOR_SET
         SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Upload with DateTime"
      END
      IF RESULT < zCURSOR_SET
         SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Upload w/o DateTime"
      END
      IF RESULT >= zCURSOR_SET
         szUploadTransferFileFlag = "Y"
      END
      DropView( vDialogTemp )
   END

   // If this Action is for an Upload to Server File Transfer, we won't do normal input mapping, but we will map in the full target file name so
   // that we can process it, since we may not know the suffix from the source or even the file name from the source.
   IF szUploadTransferFileFlag = "Y"

      //If there is mapping on the edit ("file") control, we want to put the
      //filename that is being uploaded into that mapping.

      CreateViewFromView( vDialogTemp, vDialogCtrl )

         // Aadit, wants there to be an upload file limit, so that for email attachment, the file isn't too big to bring
         // down the mail server. This really needs to be an updatable field...
         szWriteBuffer = "      if ( iFileLth > 10485760 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, ^This file is too large!^, ^This file is too large!^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //I wanted to do the "SET CURSOR..." but because Control doesn't really have a parent
      //the c code that gets generated is only looking for ControlDef under Control (not all controls) and so
      //it is not finding it.
      //SET CURSOR FIRST vDialogTemp.Control WHERE vDialogTemp.ControlDef.Tag = "EditBox"
      FOR EACH vDialogTemp.Control

         IF vDialogTemp.ControlDef.Tag = "EditBox"
                                        //256
           //Get the mapping
            SET CURSOR FIRST vDialogTemp.CtrlMapLOD_Attribute WITHIN vDialogTemp.Control
            IF RESULT >= zCURSOR_SET
               szUploadViewName = vDialogTemp.CtrlMapView.Name
               szCtrlTag = vDialogTemp.Control.Tag
               szWriteBuffer = "      View " + szUploadViewName + ";"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialogTemp.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialogTemp.CtrlMapView.Name + ".cursor( ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )


               // KJS 08/06/14 - I had put a try/catch around the operation call because it seemed better than getting the exception
               // crash. But that might be true in production but when developing, we'd really like to see the stack trace. Want to make
               // this an ini setting but for now I think I am just going to make the operation call and skip the try/catch.
               szProductionMode = ""
               IF szProductionMode = "Y"
                  // try
                  szWriteBuffer = "            try"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               " +
                         vDialogTemp.CtrlMapView.Name +
                         ".cursor( ^" + vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialogTemp.CtrlMapER_Attribute.Name + "^ ).setValue( strInputFileName, ^^ );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               nRC = 2;  // do the ^error^ redirection"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  // KJS 02/27/12 Specifically using strTag...
                  szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strInputFileName );"
               // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               break;"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  // end of try/catch
   
                  szWriteBuffer = "         }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "               " +
                         vDialogTemp.CtrlMapView.Name +
                         ".cursor( ^" + vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialogTemp.CtrlMapER_Attribute.Name + "^ ).setValue( strInputFileName, ^^ );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END

            END
         END
      END
      DropView( vDialogTemp )

   ELSE
      IF lActionType = zWAB_StayOnWindowWebRefresh
         // DKS 2011.09.15 - We want to insert any java code that the
         // user has entered for this particular action at this point.
         IF szJavaScript != "" AND szJavaScriptLocation = ""
            szWriteBuffer = "   // Javascript code entered by user."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = szJavaScript
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // END of Javascript code entered by user."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         END
      END


      // Input Mapping Option
      IF vDialog.Action.NoMap != "Y"
         szWriteBuffer = "      // Input Mapping"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = DoInputMapping( request, session, application, false );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC < 0 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // Check if this is an action for reCAPTCHA.  If so, add the code...
   IF lActionType = 35 OR lActionType = 55
      // We need to get the control for this action so we can retrieve the private and public keys.
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      szCtrlTag = "reCAPTCHA"
      IF SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" ) >= zCURSOR_SET
         szPublicKey = vDialogTemp.Control.WebreCAPTCHAPublicKey
         szPrivateKey = vDialogTemp.Control.WebreCAPTCHAPrivateKey

      END
      DropView( vDialogTemp )

      // create recaptcha without <noscript> tags
      szWriteBuffer = "      ReCaptcha captcha = ReCaptchaFactory.newReCaptcha( ^" + szPublicKey + "^, ^" + szPrivateKey + "^, false);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      ReCaptchaResponse response2 = captcha.checkAnswer( request.getRemoteAddr( ), request.getParameter( ^recaptcha_challenge_field^ ), request.getParameter( ^recaptcha_response_field^ ) );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (response2.isValid( ))"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).info( ^reCAPTCHA Success^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // The user has not entered in the correct response, do not go further."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorTitle = ^INCORRECT RECAPTCHA^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMsg = ^You typed the reCaptcha image incorrectly.  Please try again.^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // No redirection, we are staying on this page."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 0;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END

   //KJS 11/15/07 - If there is a button or hottext on a grid, then we should position on the correct
   //entity whether or not there is an operation.

   //We don't want to create the code to position on the correct
   //list entity twice.  So keep track...
   szPosDataCreated = "N"

   //TraceLineS("*** Action Loop *** ", vDialog.Action.Tag  )
   //Loop through each ActCtrl to see if there is a button or hot text
   //on a grid that calls this action.  If so, then we need to
   //get position on the correct item in the list.  This is the
   //code to set position.  If there is more than one button/hottext
   //in this list that calls the same action, make sure we don't
   //create this code twice.
   FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

      szCtrlTag = vDialog.ActCtrl.Tag
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      NAME VIEW vDialogTemp "vDialogTemp"
     
      // KJS 11/08/12 - Used to only have to do the following for grid but now need to do this
      // for any control within a repeating group that has an action...
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      IF SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                          szCtrlTag, "", "", 0,
                          "Window", "" ) >= zCURSOR_SET 

         // Identify if this Control is inside a Grid. Or if this control is inside a repeating group (or maybe both).
         nRC = 0
         nGridParent = 0
         szGridScopeOI = ""
         szBuffer = ""
         // For correct setEntityKey placement later, we need to know if this action is on a repeating group (even if it's within a grid). Because of this
         // we need to keep resetting the view from subobject because we could be down several groups.
         //LOOP WHILE nRC = 0 AND ( nGridParent = 0 OR szRepeatingGroupFlag = "" )
         LOOP WHILE nRC = 0 AND szRepeatingGroupFlag = ""
            //TraceLineS("*** LOOP for szRepeatingGroup *** ", "")
            nRC = ResetViewFromSubobject( vDialogTemp )
            IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
               IF vDialogTemp.ControlDef.Tag = "GroupBox"
                  szRepeatingGroupFlag = ""
                  IF vDialogTemp.Control.WebCtrlType = "RepeatingGroup"
                     szRepeatingGroupFlag = "Y"
                  ELSE
                     SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "Repeating Group"
                     IF RESULT >= zCURSOR_SET
                        szRepeatingGroupFlag = "Y"
                        //TraceLineS("**** REPEATING GROUP Y *** ", "")
                        // KJS 09/23/13 - Try getting the view for this
                        IF vDialogTemp.CtrlMapView EXISTS AND
                           vDialogTemp.CtrlMapLOD_Entity EXISTS
                           
                           szEntityNameR = vDialogTemp.CtrlMapLOD_Entity.Name
                        END
                        szBuffer = "   "
                     END
                  END
               END

               IF vDialogTemp.ControlDef.Tag = "Grid" OR szRepeatingGroupFlag = "Y"
                  // If the parent is a grid, then get the View and Entity now (we might be resetting the subobject and lose
                  // our position on the grid) so it can be used further down.
                  IF vDialogTemp.CtrlMapView EXISTS AND
                     vDialogTemp.CtrlMapLOD_Entity EXISTS AND nGridParent = 0
                     szViewName = vDialogTemp.CtrlMapView.Name
                     szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
                     // See if there is a scoping entity.
                     SET CURSOR NEXT vDialogTemp.CtrlMap
                     IF RESULT >= zCURSOR_SET
                        IF vDialogTemp.CtrlMapLOD_Entity EXISTS
                           szScopingName = vDialogTemp.CtrlMapLOD_Entity.Name
                        END
                     END
                  END
                  // The parent of the this control is a Grid, so indicate for later.
                  // KJS 03/18/16 - I am thinking we want to do this for a listbox (if we are changing to <ul> from <select)
                  IF vDialogTemp.ControlDef.Tag = "Grid" OR vDialogTemp.ControlDef.Tag = "ListBox"
                     nGridParent = 1
                     // KJS 01/13/15 - Check if the grid is using Scope OI
                     lSubtypeX = vDialogTemp.Control.ExtendedStyle
                     lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
                     IF lSubtypeX = 0
                        szGridScopeOI = "Y"
                     END
                  END
               END
            END
         END

         //If we successfully reset from the subcontrols and we are on a grid.
         IF nGridParent = 1 OR szRepeatingGroupFlag = "Y"
         
            //TraceLineS("*** szRepeatingGroupFlag *** ", szRepeatingGroupFlag )
            //TraceLineI("*** nGridParent ***          ", nGridParent )
            //TraceLineS("*** szPosDataCreated ***     ", szPosDataCreated )
         
            // Because we are going to be looking again later in the generation process at actions and whether or not
            // they are inside a grid or repeating group, set a flag now so we don't have to do this later.
            vDialog.Action.ParentIsGridOrGrp = "Y"

            // szPosDataCreated is just to make sure we don't create this code twice.
            IF szPosDataCreated = "N"

               szPosDataCreated = "Y"
               
               //TraceLineS("*** Calling EntityKey code *** ","")

               szWriteBuffer = "      // Position on the entity that was selected in the grid."
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               // We have a "select button" or HotText in a list, so we need to set
               // up the code to set position on the proper list item.
               //szViewName = vDialogTemp.CtrlMapView.Name
               //szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
               szWriteBuffer = "      String strEntityKey = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               //If this action is for the download button or for the upload button, we may have already created
               //a view for this view name.  Don't create the view unless it's for a different view name.
               IF  ( szViewName != szDownloadViewName AND szViewName != szUploadViewName )
                  szWriteBuffer = "      View " + szViewName + ";"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      if ( VmlOperation.isValid( " + szViewName + " ) )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.log( ).info( ^Got " + szViewName + " View Key: ^ + strEntityKey );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         lEKey = java.lang.Long.parseLong( strEntityKey );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         csrRC = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setByEntityKey( lEKey );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         if ( !csrRC.isSet() )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            boolean bFound = false;"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               // Because this link might be inside a grid that is inside a repeating group, we need to loop through
               // all the entities that the repeating group loops through to see if the entity key exists. Not just
               // the current entity we are on.
               IF szRepeatingGroupFlag = "Y"
                  szWriteBuffer = "            CursorResult csrRCRptGrp = null;"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            csrRCRptGrp = " + szViewName + ".cursor( ^" + szEntityNameR + "^ ).setFirst( );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            while ( csrRCRptGrp.isSet() && !bFound )"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END 
               IF nGridParent = 1 //AND szScopingName != ""
               

                  // If we are using SCOPE_OI on the grid, then we want to use setFirstWithinOi.
                  lSubtypeX = vDialog.Control.ExtendedStyle
                  lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
                  IF szGridScopeOI = "Y"
               
                     IF szScopingName = ""  
                        szWriteBuffer = szBuffer + "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirst( );"
                     ELSE
                        szWriteBuffer = szBuffer + "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirst(^" + szScopingName + "^ );"
                     END
                  ELSE
                        szWriteBuffer = szBuffer + "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirstWithinOi( );"
                  END
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "            while ( csrRCk.isSet() && !bFound )"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "            {"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = szBuffer + "               lEKey = " + szViewName + ".cursor( ^" + szEntityName + "^ ).getEntityKey( );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "               strKey = Long.toString( lEKey );"
               //szWriteBuffer = szBuffer + "               csrRC = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setByEntityKey( lEKey );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = szBuffer + "               if ( csrRC.isSet() )"
               szWriteBuffer = szBuffer + "               if ( StringUtils.equals( strKey, strEntityKey ) )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "               {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "                  // Stop while loop because we have positioned on the correct entity."
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "                  bFound = true;"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "               }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               IF nGridParent = 1 //AND szScopingName != ""
                  szWriteBuffer = szBuffer + "               else"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "                  csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setNextContinue( );"
                  //szWriteBuffer = "                  csrRCk = " + szViewName + ".cursor( ^" + szScopingName + "^ ).setNextContinue( );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "            } // Grid"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END
               IF szRepeatingGroupFlag = "Y"
                  szWriteBuffer = "               if ( !bFound )"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "                  csrRCRptGrp = " + szViewName + ".cursor( ^" + szEntityNameR + "^ ).setNextContinue( );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            } // Repeating group"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "      else"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         task.log( ).info( ^Did not get " + szViewName + " View Key: ^ + strEntityKey );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF nGridParent = 1
      END  // IF SetEntityCursor ...

      DropView( vDialogTemp )

   END  // FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

   // Operation Option
   IF vDialog.ActOper EXISTS //AND lActionType != zWAB_StartJasperPDF_Page

      szWriteBuffer = "      // Action Operation"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //FOR EACH Dialog.ActCtrl.Tag code from about was here.

      szWriteBuffer = "      nRC = 0;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^CallDialogOperation: " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "  ^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      // In order to call a dialog operation we need to create an instance of the dialog class.  We only want to do this once.
      //szDlgTag = vDialog.Dialog.Tag
      // KJS 10/08/15 - Because this could be in a different source file... I will try referencing the source file name.
      szDlgTag = vDialog.SourceFileForOper.Name 
   // szWndTag = vDialog.Window.Tag
      szOperName = vDialog.ActOper.Name
      IF szDialogClassCreated = "N"

         IF szDlgTagRoot != vDialog.Dialog.Tag
            szWriteBuffer = "      " +  szDlgTag + "_Dialog " + szDlgTag + " = new " +  szDlgTag + "_Dialog( vKZXMLPGO );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         // szDialogClassCreated = "Y"
         END
      END

      IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END

   // szWriteBuffer = "      task.log().info( ^ZeidonOperation: " + szDlgTag + "." + szOperName + " called from " + szFormName + ".jsp^ );"  // keep us informed of where we are ...  dks 2011.11.11
      szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( null, task, ^" + szFormName + "^, ^" + szDlgTag + "." + szOperName + "^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      // KJS 08/06/14 - I had put a try/catch around the operation call because it seemed better than getting the exception
      // crash. But that might be true in production but when developing, we'd really like to see the stack trace. Want to make
      // this an ini setting but for now I think I am just going to make the operation call and skip the try/catch.
      IF szProductionMode = "Y"
         szWriteBuffer = "      try"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.SourceFileForOper.LanguageType = "S"
            szWriteBuffer = "         nOptRC = " + szDlgTag + "." + szOperName + "( new com.quinsoft.zeidon.scala.View( vKZXMLPGO ) );"
         ELSE 
            szWriteBuffer = "         nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
         END
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      catch (Exception e)"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         // Set the error return code."
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nOptRC = 2;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strVMLError = ^<br><br>*** Error running Operation " + szOperName + ": ^ + e.getMessage();"     
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         task.log().info( strVMLError );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      ELSE
         IF vDialog.SourceFileForOper.LanguageType = "S"
            szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new com.quinsoft.zeidon.scala.View( vKZXMLPGO ) );"
         ELSE 
            szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
         END
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END
      
      //szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      // Handle any Next Window processing from Operation.
      szWriteBuffer = "      if ( nOptRC == 2 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         session.setAttribute( ^ZeidonError^, ^Y^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"

      IF szWebRedirection = "Y"

         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      else"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nOptRC == 1 )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         // Dynamic Next Window"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strNextJSP_Name = " + szDlgTagRoot + ".GetWebRedirection( vKZXMLPGO );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

         IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
            szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         END

         IF szWAB != ""

            szWriteBuffer = "      if ( strNextJSP_Name.equals( ^^ ) )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Next Window"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            // In order to call a dialog operation we need to create an instance of the dialog class.  We
            // only want to do this once.
         // IF szDialogClassCreated = "N"
         //
         //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
         //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
         //    WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         //
         //    szDialogClassCreated = "Y"
         // END

            szWriteBuffer = "         strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
            szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = 1;  // do the redirection"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

         ELSE

            szWriteBuffer = "      // Next Window unknown"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

         END

      ELSE  // not using WebDirection

         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

         IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
            szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         END

         IF lActionType = zWAB_StartBrowserPDF_Page
            // If we are copying to pdf, then we need to have a wait routine, otherwise, the jsp tries to open
            // the pdf file before it's actually created.
            szWriteBuffer = "      try{ "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         Thread.sleep(5000);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }catch(InterruptedException ie){ "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         out.println( ^error^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         END

         // I know that if we are starting a pdf or html window then we do not need to do this.
         // There are probably more like Popup windows...
         IF  lActionType != zWAB_StartBrowserHTML_Page AND lActionType != zWAB_StartBrowserPDF_Page AND
             lActionType != zWAB_StartJasperPDF_Page AND lActionType != 49 // zWAB_StartJasperXLS_Page

            // Handle any Next Window processing from Operation.
            szWriteBuffer = "      // Dynamic Next Window"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strDialogName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getAttribute( ^DialogName^ ).getString( ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strWindowName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getAttribute( ^WindowName^ ).getString( ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strNextJSP_Name = strDialogName + strWindowName + ^.jsp^;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         vKZXMLPGO.cursor( ^NextDialogWindow^ ).deleteEntity( CursorPosition.NEXT );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.log( ).info( ^Next Window Redirect to: ^ + strURL );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            // Handle creation of return page for Function Call StartSubwindow.
            szWriteBuffer = "         nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strFunctionCall = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getAttribute( ^FunctionCall^ ).getString( ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strFunctionCall = ^^;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         if ( strFunctionCall != null && StringUtils.equals( strFunctionCall, ^StartSubwindow^ ) )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).getAttribute( ^LastPageName^ ).setValue( ^" + szFormName + "^, ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         break;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

         ELSE

            IF szWAB != ""

               szWriteBuffer = "      // Next Window"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               // dks 2016.04.21 - Adding sort support ... on the action, there is still the need to add javascript code similar to the following:
               // document.wSLCMarketingStatement.zTableRowSelect.value = buildSortTableHtml( "mSubLC", "S_MarketingUsageOrdering", "GridMarketingUsage", ["Usage Type","Usage Name"] );
               szDlgTag = vDialog.Action.DialogName
               szWndTag = vDialog.Action.WindowName

               IF szDlgTag = "wSystem" AND szWndTag = "DragDropSort"
                  nSystemSort = 1
                  szWriteBuffer = "      // We are borrowing zTableRowSelect and this code is hardwired for the moment.  javascript code similar to the following must be added to the action:"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      // document.wSLCMarketingStatement.zTableRowSelect.value = buildSortTableHtml( ^mSubLC^, ^S_MarketingUsageOrdering^, ^GridMarketingUsage^, [^Usage Type^,^Usage Name^] );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      wWebXA = task.getViewByName( ^wWebXfer^ );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      String strHtml = (String) request.getParameter( ^zTableRowSelect^ );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      wWebXA.cursor( ^Root^ ).getAttribute( ^HTML^ ).setValue( strHtml, ^^ );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      // We are borrowing zTableRowSelect and the code above is hardwired for the moment"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            // ELSE
            //    szWriteBuffer = "      // 3 Dlg: " + szDlgTag + "  Wnd: " + szWndTag
            //    WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
               END

               szWriteBuffer = "      strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
               szWriteBuffer = szWriteBuffer + szDlgTag + "^, ^" + szWndTag + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = 1;  // do the redirection"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END

            ELSE

               szWriteBuffer = "      // Next Window unknown"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            END

         END   // IF  lActionType != zWAB_StartBrowserHTML_Page

      END

   ELSE
      // No operation code

      IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END
      
      // Add Object Functions Accept, Cancel, Create Temporal Entity and Create Temporal Subobject Version.
      // Also looking at the auto setNext/Prev
      IF vDialog.ActMap EXISTS
         lAutoNextPrev = vDialog.Action.SB_NextPrev
         lAutoSubAction = vDialog.Action.SB_SubAction 
      END
      IF lAutoSubAction = 1 OR    // Accept
         lAutoSubAction = 2 OR    // Cancel
         lAutoSubAction = 4 OR    // Delete
         lAutoSubAction = 268435460 OR    // Delete with Confirmation (although we aren't doing any confirmation)
         lAutoSubAction = 8 OR    // Exclude
         lAutoSubAction = 268435464 OR    // Exclude with Confirmation (although we aren't doing any confirmation)
         lAutoSubAction = 16 OR   // Create
         lAutoSubAction = 32 OR   // Create Temporal Entity
         lAutoSubAction = 64 OR   // Create Subobject Version
         lAutoNextPrev = 128 OR   // Next
         lAutoNextPrev = 256      // Previous
         
         szWriteBuffer = "      // Action Auto Object Function"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = 0;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         
         // Let's put a try/catch around the auto action.
         szWriteBuffer = "      try"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         
         // Get View and Entity names from the Action.
         IF vDialog.ActMapView EXISTS
            szViewName = vDialog.ActMapView.Name 
         END
         IF vDialog.ActMapLOD_Entity EXISTS
            szEntityName = vDialog.ActMapLOD_Entity.Name 
         END

         // See if a scoping entity has been specified, and if so, use it.
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR NEXT vDialogTemp.ActMap
         IF RESULT >= zCURSOR_SET AND vDialogTemp.ActMapLOD_Entity EXISTS
            szScopingName = "^" + vDialogTemp.ActMapLOD_Entity.Name + "^"
         ELSE
            szScopingName = ""
         END
         DropView(vDialogTemp)

         
         // We don't want the getViewByName if it was generated above with the code:
         // IF nGridParent = 1 OR szRepeatingGroupFlag = "Y"
         IF nGridParent = 1 OR szRepeatingGroupFlag = "Y"
         ELSE
            szWriteBuffer = "      View " + szViewName + " = task.getViewByName( ^" + szViewName + "^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         END
         
         szWriteBuffer = "      EntityCursor cursor = " + szViewName + ".cursor( ^" + szEntityName + "^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         
         // If the user has selected the auto next/prev.
         IF ( lAutoNextPrev = 128 OR lAutoNextPrev = 256 ) AND lAutoSubAction = 0
            szWriteBuffer = "      if ( cursor.isNull() )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 0;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            IF lAutoNextPrev = 128
               szWriteBuffer = "         cursor.setNext( " + szScopingName + " );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            ELSE 
               szWriteBuffer = "         cursor.setPrev( " + szScopingName + " );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = "      }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         END
         
         // Add Accept or Cancel statement or delete or exclude.        
         IF lAutoSubAction = 1 OR lAutoSubAction = 2 OR lAutoSubAction = 4 OR lAutoSubAction = 8 OR 
            lAutoSubAction = 268435460 OR lAutoSubAction = 268435464 
            szWriteBuffer = "      if ( cursor.isNull() )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 0;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            
            IF lAutoSubAction = 1 OR lAutoSubAction = 2 
               szWriteBuffer = "         if ( cursor.isVersioned( ) )"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
                  
               IF lAutoSubAction = 1
                  // Accept
                  szWriteBuffer = "            cursor.acceptSubobject( );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               ELSE
               IF lAutoSubAction = 2             
                  // Cancel
                  szWriteBuffer = "            cursor.cancelSubobject( );"
                  WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               END
               END
               szWriteBuffer = "         }"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF lAutoSubAction = 4 OR lAutoSubAction = 268435460
               // Delete
               szWriteBuffer = "         cursor.deleteEntity( CursorPosition.NEXT );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF lAutoSubAction = 8 OR lAutoSubAction = 268435464
               // Exclude
               szWriteBuffer = "         cursor.excludeEntity( CursorPosition.NEXT );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END
            END
            END
            
            szWriteBuffer = "         nRC = 0;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         ELSE
            IF lAutoSubAction = 16
               // Create Entity
               szWriteBuffer = "      cursor.createEntity( );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            ELSE 
            IF lAutoSubAction = 32
               // Create Temporal Entity
               szWriteBuffer = "      cursor.createTemporalEntity( );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            ELSE
            IF lAutoSubAction = 64
               // Create Subobject Version
               szWriteBuffer = "      cursor.createTemporalSubobjectVersion( );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            END
            END
            END
         END
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      catch ( Exception e )"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nRC = 2;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         VmlOperation.CreateMessage( task, ^" + vDialog.Action.Tag + "^, e.getMessage( ), ^^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         //szWriteBuffer = "   }  // end of auto action"
         //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

      END

      IF szWAB != ""
         IF szWebRedirection = "Y"

            szWriteBuffer = "      // Next Window"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            // dks 2016.04.21 - Adding sort support ... on the action, there is still the need to add javascript code similar to the following:
            // document.wSLCMarketingStatement.zTableRowSelect.value = buildSortTableHtml( "mSubLC", "S_MarketingUsageOrdering", "GridMarketingUsage", ["Usage Type","Usage Name"] );
            szDlgTag = vDialog.Action.DialogName
            szWndTag = vDialog.Action.WindowName

            IF szDlgTag = "wSystem" AND szWndTag = "DragDropSort"
               nSystemSort = 1
               szWriteBuffer = "      // We are borrowing zTableRowSelect and this code is hardwired for the moment.  javascript code similar to the following must be added to the action:"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // document.wSLCMarketingStatement.zTableRowSelect.value = buildSortTableHtml( ^mSubLC^, ^S_MarketingUsageOrdering^, ^GridMarketingUsage^, [^Usage Type^,^Usage Name^] );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      wWebXA = task.getViewByName( ^wWebXfer^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strHtml = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      wWebXA.cursor( ^Root^ ).getAttribute( ^HTML^ ).setValue( strHtml, ^^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // We are borrowing zTableRowSelect and the code above is hardwired for the moment"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         // ELSE
         //    szWriteBuffer = "      // 4 Dlg: " + szDlgTag + "  Wnd: " + szWndTag
         //    WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            END

            szWriteBuffer = "      strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
            szWriteBuffer = szWriteBuffer + szDlgTag + "^, ^" + szWndTag + "^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = 1;  // do the redirection"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

         END
      ELSE
         szWriteBuffer = "      // Next Window unknown"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END

      IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
      END

   END    // IF vDialog.ActOper EXISTS ... End of calling an operation

   IF szWebRedirection = "Y"

      IF lActionType = zWAB_StartBrowserHTML_Page
            // KJS 02/09/12 - In JOE task.setName is failing, not sure what this code is
            // even doing so I am commenting this out for now...
            szWriteBuffer = "      task.setName( strURL );"
            //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   
            // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
            // That resubmitted the current page and I assume this was done thinking this was how
            // the report page would be called but since the report popup is determined in AfterPageLoaded, we
            // don't need to resubmit the page.  Just keep building this current page.
            szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END
   
      IF lActionType = zWAB_StartBrowserPDF_Page
            // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
            // That resubmitted the current page and I assume this was done thinking this was how
            // the report page would be called but since the report popup is determined in AfterPageLoaded, we
            // don't need to resubmit the page.  Just keep building this current page.
            szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

   ELSE

   // Next Window Option
      IF lActionType = zWAB_StartModelessSubwindow          OR
         lActionType = zWAB_StartModalSubwindow             OR
         lActionType = zWAB_StartModalSubwindowNP           OR
         lActionType = zWAB_ReplaceWindowWithModelessWindow OR
         lActionType = zWAB_ReplaceWindowWithModalWindow    OR
         lActionType = zWAB_StartTopWindow                  OR
         lActionType = zWAB_ResetTopWindow                  OR
         lActionType = zWAB_StartBrowserHTML_Page           OR
         lActionType = zWAB_StartNewApp                     OR  //reCAPTCHA StartModalSubwindow
         lActionType = zWAB_ReCAPTCHA  //reCAPTCHA ReplaceModalWindow
      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         InsertBlankFlag = "N"
      END

      szWriteBuffer = "      // Next Window"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 02/09/12 - In JOE task.setName is failing, not sure what this code is
         // even doing so I am commenting this out for now...
         szWriteBuffer = "      task.setName( strURL );"
         //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strURL = response.encodeRedirectURL( strURL );"
      ELSE
         szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" +
                         vDialog.Action.DialogName + vDialog.Action.WindowName + ".jsp^ );"
      END
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^Next Window Redirect to: ^ + strURL );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

         IF lActionType = zWAB_StartModelessSubwindow OR
            lActionType = zWAB_StartModalSubwindow    OR
            lActionType = zWAB_StartModalSubwindowNP  OR
            lActionType = zWAB_StartNewApp //reCAPTCHA StartModalSubwindow
         // Next Window is subwindow. Set up current window for return.
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).getAttribute( ^LastPageName^ ).setValue( ^" +
                         szFormName + "^, ^^ );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      ELSE
         szWriteBuffer = "      nRC = 1;  // do the redirection"
      END
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   END  //End of Next Window Option

   // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
   IF ( lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup ) // KJS 07/11/12 AND vDialog.Action.NoMap = ""
      //This gets the value for the popup window so that in AfterPageLoaded, we can get this
      //value and pop up the window.
      szWriteBuffer = "      strOpenPopupWindow = request.getParameter( ^zOpenPopupWindow^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZX = request.getParameter( ^zPopupWindowSZX^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZY = request.getParameter( ^zPopupWindowSZY^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 0;  // No redirection, we want to open the popup"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Same Window Refresh option
   IF lActionType = zWAB_StayOnWindowWithRefresh OR lActionType = zWAB_StayOnWindowRefreshNP
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Return From Window Option
      IF lActionType = zWAB_ReturnToParent OR
         lActionType = zWAB_ReturnToParentWithRefresh

      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      // Return to Last Window"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^PagePath^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = vKZXMLPGO.cursor( ^PagePath^ ).getAttribute( ^LastPageName^ ).getString( ^^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vKZXMLPGO.cursor( ^PagePath^ ).deleteEntity( CursorPosition.PREV );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = strLastPage + ^.jsp^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = ^" + szFormName + ".jsp^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "      strURL = response.encodeRedirectURL( strLastPage );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^Return Redirect to: ^ + strURL );"
         WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      END
   // szWriteBuffer = "      return;"
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END
   END

   // Download File option.
   IF lActionType = zWAB_ProcessDownloadFile

      // Note that we need vDialogCtrl to be positioned on Control that triggers the Action to get the attribute mapping from that Control.
      // This was evaluated earlier.

      IF vDialogCtrl > 0
         IF vDialogCtrl.CtrlMapER_Attribute EXISTS

            szWriteBuffer = "  "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      // Download File Processing"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            /*
            szWriteBuffer = "      sBrowser = request.getHeader( ^User-Agent^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isFirefox = ( sBrowser != null && sBrowser.indexOf( ^Firefox/^ ) != -1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isMSIE = ( sBrowser != null && sBrowser.indexOf( ^MSIE^ ) != -1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isOpera = ( sBrowser != null && sBrowser.indexOf( ^Opera^ ) != -1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
            */

            szWriteBuffer = "      " + vDialogCtrl.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialogCtrl.CtrlMapView.Name + " ) )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            lMaxStringLth = vDialog.CtrlMapER_Domain.MaxStringLth
            IF lMaxStringLth <= 0
               szMaxStringLth = "254"
            ELSE
               szMaxStringLth = lMaxStringLth
            END

            szWriteBuffer = "            sDownloadFile = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" + vDialogCtrl.CtrlMapRelatedEntity.Name +
                            "^ ).getAttribute( ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" + vDialogCtrl.CtrlMapRelatedEntity.Name +
                            "^ ).getAttribute( ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^ ).setValue( ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log( ).info( ^Download File Name: ^ + sDownloadFile );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".log( ).info( ^Entity does not exist: ^, ^" +
                                                vDialogCtrl.CtrlMapView.Name + "." +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "      else"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogCtrl.CtrlMapView.Name + ".log( ).info( ^Invalid View: ^ ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         // Replace any quotes."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         sDownloadFile = sDownloadFile.replaceAll( ^\^^, ^^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         l = sDownloadFile.lastIndexOf( ^.^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         x = sDownloadFile.lastIndexOf( ^\\^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( x == -1 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            x = sDownloadFile.lastIndexOf( ^/^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         // If x > l then the filename has no extension and"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // there must be a period in the directory name."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Right now we are not using sExtension but just"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in case we want to change the encType I want"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // to capture this."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if (x > l)"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = ^^;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = sDownloadFile.substring( l+1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Get the filename only without directories."
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         sSourceFileNameOnly = sDownloadFile.substring( x + 1 );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         File InputFile = new File( sDownloadFile );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         FileInputStream fis = new FileInputStream( InputFile );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         try"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log( ).info( ^Download File: ^ + ^Setting outputStream and attaching file^ );"
               WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "            String contenttype = ^application/octet-stream^;  "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setContentType(contenttype);"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setHeader( ^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            ServletOutputStream outStream = response.getOutputStream( );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            int c = 0;"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( (c=fis.read( )) != -1 )"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               outStream.write( c );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.flush( );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.close( );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         catch (Exception e) "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( InputFile != null && InputFile.exists( ) ) "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //TraceLine"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               task.log( ).info( ^Error downloading file: ^ + sDownloadFile );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         fis.close( );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )

            // The end of the Action is the same as "Same Window Refresh" above.
            szWriteBuffer = "         // Stay on Window with Refresh"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
         // szWriteBuffer = "      } "
         // WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END // Download File option.

   // KJS 09/17/14 - Run a jasper report and open in PDF.
   IF lActionType = zWAB_StartJasperPDF_Page
      szWriteBuffer = "         try"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/16/14 - Right now running jasper reports is a new thing and I'm not positive we will use it for much more than
      // the 1098T report. We need an operation that returns a jasperPrint object, which at the moment we can only do in java (
      // (otherwise we would need to have a data type JasperPrint in VML), so I am going to assume that we will look for an
      // operation in ZGLOBAL1 and that the operation we are looking for has the same name as the Action name.
      szWriteBuffer = "            // At the moment, in order to call a jasper report, there needs to be an operation in"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // ZGLOBAL1 with the same name as this action name. And it must return a JasperPrint object."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // So the filling of the jasper report must be done there (JasperFillManager.fillReport()."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            ZGLOBAL1_Operation m_ZGLOBAL1_Operation = new ZGLOBAL1_Operation( vKZXMLPGO );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            net.sf.jasperreports.engine.JasperPrint jasperPrint = m_ZGLOBAL1_Operation." + vDialog.Action.Tag +
                      "( new zVIEW( vKZXMLPGO ));"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            byte[] file = null;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            if (jasperPrint != null) "
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               file = net.sf.jasperreports.engine.JasperExportManager.exportReportToPdf(jasperPrint);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setContentType(^application/pdf^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setContentLength(file.length);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      
      szWriteBuffer = "               // Append a datetime stamp to the filename to ensure that this is a unique name."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               DateFormat dateFormat = new SimpleDateFormat(^yyyymmddhhmmsss^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               String strFileName = ^report^ + dateFormat.format(new java.util.Date()) + ^.pdf^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               String strParam = ^attachment; filename=\^^ + strFileName + ^\^^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 ) 
      
      szWriteBuffer = "               response.setHeader(^Content-disposition^, strParam);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
              
      szWriteBuffer = "               response.getOutputStream().write(file);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.getOutputStream().flush();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.getOutputStream().close();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         catch (Exception e)"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            e.printStackTrace();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // Set the error return code."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            nOptRC = 2;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strVMLError = ^<br><br>*** Error running Operation " + vDialog.Action.Tag + ": ^ + e.getMessage();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log().info( strVMLError );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   END

   // KJS 07/26/16 - Run a jasper report and open in Excel.
   IF lActionType = 49 //zWAB_StartJasperXLS_Page
      szWriteBuffer = "         try"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/16/14 - Right now running jasper reports is a new thing and I'm not positive we will use it for much more than
      // the 1098T report. We need an operation that returns a jasperPrint object, which at the moment we can only do in java (
      // (otherwise we would need to have a data type JasperPrint in VML), so I am going to assume that we will look for an
      // operation in ZGLOBAL1 and that the operation we are looking for has the same name as the Action name.
      szWriteBuffer = "            // At the moment, in order to call a jasper report, there needs to be an operation in"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // ZGLOBAL1 with the same name as this action name. And it must return a JasperPrint object."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // So the filling of the jasper report must be done there (JasperFillManager.fillReport()."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            ZGLOBAL1_Operation m_ZGLOBAL1_Operation = new ZGLOBAL1_Operation( vKZXMLPGO );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            net.sf.jasperreports.engine.JasperPrint jasperPrint = m_ZGLOBAL1_Operation." + vDialog.Action.Tag +
                      "( new zVIEW( vKZXMLPGO ));" 
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            if (jasperPrint != null) "
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   
      szWriteBuffer = "               JRXlsxExporter exporter = new JRXlsxExporter();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               exporter.setParameter(JRXlsExporterParameter.JASPER_PRINT, jasperPrint);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      
      szWriteBuffer = "               // Append a datetime stamp to the filename to ensure that this is a unique name."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               DateFormat dateFormat = new SimpleDateFormat(^yyyymmddhhmmsss^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               String strDirFileName = vKZXMLPGO.cursor(^Session^).getAttribute(^PrintFileName^).getString();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               if ( strDirFileName.equals(^^) )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "                  strDirFileName = ^c:\\temp\\export^ + dateFormat.format(new java.util.Date()) + ^.xlsx^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               else"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "                  vKZXMLPGO.cursor(^Session^).getAttribute(^PrintFileName^).setValue(^^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
          
      szWriteBuffer = "               int x = strDirFileName.lastIndexOf(^\\^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               // If no backslash, try forward slash"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               if ( x == -1 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "                  x = strDirFileName.lastIndexOf(^/^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               String strFileName = strDirFileName.substring(x + 1);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )      
      
      szWriteBuffer = "               String strParam = ^attachment; filename=\^^ + strFileName + ^\^^;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "               String strDirFileName = ^c:/temp/^ + strFileName;"
      //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "               exporter.setParameter(JRXlsExporterParameter.OUTPUT_FILE_NAME, strDirFileName);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               exporter.exportReport();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "               File f=new File(strDirFileName);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               FileInputStream fin = new FileInputStream(f);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               ServletOutputStream outStream = response.getOutputStream();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setContentType(^application/vnd.ms-excel^);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setHeader(^Content-Disposition^, strParam);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               byte[] buffer = new byte[1024];"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               int n = 0;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "               while ((n = fin.read(buffer)) != -1) "
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "                  outStream.write(buffer, 0, n);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "                  System.out.println(buffer);"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               outStream.flush();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               fin.close();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               outStream.close();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
    
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         catch (Exception e)"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            e.printStackTrace();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // Set the error return code."
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            nOptRC = 2;"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strVMLError = ^<br><br>*** Error running Operation " + vDialog.Action.Tag + ": ^ + e.getMessage();"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log().info( strVMLError );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   END

   szWriteBuffer = "      break;"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   IF vDialogCtrl > 0
      DropView( vDialogCtrl )
   END
   
   RETURN nSystemSort
END
