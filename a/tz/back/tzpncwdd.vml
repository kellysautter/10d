/*
CHANGE LOG
2000.10.30  RG   Z2000
    Call GetViewByName for zLEVEL_TASK: Change Viewname --> 0
2000.09.10  BL   Z10
    Bugfix RAD 53056 if the current Dialog was not saved, will be show
    the DialogList
    Copy and Merge Window with Operation Code
2000.06.19  BL   Z10  Bug R53237
    Added SEL_CLONE_Set_WindowName: if double click on window list,
    set Window Name
2000.05.12  BL   Z10  Bug 51324
2000.05.08  BL   Z10  bugfix copy and merge window
    Modified SEL_CLONE_OK: if target equal source window in the same Dialog,
    then do not delete or copy window
    Added SEL_CLONE_SetWindowName
2000.01.13  BL   Z10  new PPE handling
    Modified Operation SEL_CLONE_OK
1999.11.24  BL   Z10  new menu structure
    Modified Operation SEL_CLONE_OK for check Window Name
1999.11.19  BL   Z10  new menu structure
    Added Operation SEL_CLONE_PostBuild for set WindowCaptionTitle
1998.10.07  DC
   Modified SEL_CLONE_SelectDlg to activate REFER view of source dialog to
   copy instead of SOURCE view.
1998.09.28  DKS
   Modified Dialog to work from TZWINDOWL instead of TZWINDOW view (XC 249
   and XC 261).
*/

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    SEL_CLONE_Init
// PURPOSE:  This function creates the following OI's:
//           TZPNCTWO - The work object for entering Dialog Name
//           TZDLG_List - List of Dialogs from CM
//           TZWMD_List - The Dialog loaded, which contains the
//                        windows to be listed.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SEL_CLONE_Init( VIEW vSubtask )

   VIEW WorkView   BASED ON LOD TZPNCTWO
   VIEW DialogList BASED ON LOD TZCMLPLO
   VIEW DialogLst  BASED ON LOD TZCMLPLO
   VIEW WindowList BASED ON LOD TZWDLGSO
   VIEW TZWINDOWL  BASED ON LOD TZWDLGSO
   VIEW CopyOperation BASED ON LOD TZEDWDEL
   SHORT nRC

   GET VIEW TZWINDOWL NAMED "TZWINDOWL"

   // Initialize Work Lod for Copy Operationcode
   ActivateEmptyObjectInstance( CopyOperation, "TZEDWDEL", vSubtask, zMULTIPLE )
   CREATE ENTITY CopyOperation.SourceFile AFTER
   SetNameForView( CopyOperation, "CopyOperation", vSubtask, zLEVEL_TASK )

   // Initialize Dialog List
   RetrieveViewForMetaList( vSubtask, DialogLst, zREFER_DIALOG_META )

   // create a new Object Instance
   ActivateOI_FromOI_ForTask( DialogList, DialogLst, 0, zSINGLE )
   SetNameForView( DialogList, "TZDLG_List", vSubtask, zLEVEL_TASK )
   DropView( DialogLst )

   // if the current Dialog was not saved, will be added the DialogList
   SET CURSOR FIRST DialogList.W_MetaDef
              WHERE DialogList.W_MetaDef.CPLR_ZKey = TZWINDOWL.Dialog.ZKey
   IF RESULT < zCURSOR_SET
      CREATE ENTITY DialogList.W_MetaDef AFTER
      DialogList.W_MetaDef.CPLR_ZKey = TZWINDOWL.Dialog.ZKey
      DialogList.W_MetaDef.Name = TZWINDOWL.Dialog.Tag
   END

   // Order the list by name.
   OrderEntityForView( DialogList, "W_MetaDef", "Name A" )

   // Initialize Window List
   ActivateEmptyObjectInstance( WindowList, "TZWDLGSO", vSubtask, zSINGLE )
   SetNameForView( WindowList, "TZWND_List", vSubtask, zLEVEL_TASK )

   // Initialize Work OI
   nRC = GetViewByName( WorkView, "TZPNCTWO", vSubtask, zLEVEL_ANY )
   IF nRC < 0
      ActivateEmptyObjectInstance( WorkView, "TZPNCTWO", vSubtask, zSINGLE )
      SetNameForView( WorkView, "TZPNCTWO", vSubtask, zLEVEL_TASK )
      CREATE ENTITY WorkView.TZPNCTWO
   END

   RETURN  0
END


/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    SEL_CLONE_SelectDialog
// PURPOSE:  This function activates the Dialog selected by the
//           Dialog List.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SEL_CLONE_SelectDlg( VIEW vSubtask )

   VIEW DialogList BASED ON LOD TZCMLPLO
   VIEW WindowList BASED ON LOD TZWDLGSO
   VIEW CurrentW   BASED ON LOD TZWDLGSO

   // Activate Dialog Meta
   GetViewByName( DialogList, "TZDLG_List", vSubtask, zLEVEL_ANY )
   GetViewByName( CurrentW, "TZWINDOWL", vSubtask, zLEVEL_ANY )
   IF GetViewByName( WindowList, "TZWND_List", vSubtask, zLEVEL_ANY ) > 0
      IF CheckExistenceOfEntity( WindowList, "Dialog" ) = zCURSOR_SET
         DropMetaOI( vSubtask, WindowList )
      ELSE
         DropObjectInstance( WindowList )
      END
   END

   // If the Dialog selected is the same as the Dialog currently
   // processed by the Painter, create a new view to it.  Otherwise
   // activate a new OI.
   IF DialogList.W_MetaDef.CPLR_ZKey = CurrentW.Dialog.ZKey
      CreateViewFromViewForTask( WindowList, CurrentW, vSubtask )
   ELSE
      ActivateMetaOI( vSubtask, WindowList, DialogList, zREFER_DIALOG_META, zSINGLE )
   END

   SetNameForView( WindowList, "TZWND_List", vSubtask, zLEVEL_TASK )

   OrderEntityForView( WindowList, "Window", "Tag A" )
   SET CURSOR FIRST WindowList.Window

   SEL_CLONE_SetSourceFileState( vSubtask )
   RefreshCtrl( vSubtask, "WindowList" )

   RETURN  0
END

//************************************************************************************************//
//
//    OPERATION: SEL_CLONE_PostBuild
//
DIALOG OPERATION
SEL_CLONE_PostBuild( VIEW vSubtask )

   VIEW vWork BASED ON LOD TZPNCTWO

   GetViewByName( vWork, "TZPNCTWO", vSubtask, zLEVEL_ANY )

   vWork.TZPNCTWO.WindowName = ""

   IF vWork.TZPNCTWO.CloneFunction = "C"
     SetWindowCaptionTitle( vSubtask, "Copy Dialog Window", 0 )
     SetCtrlState( vSubtask, "cbWindowName", zCONTROL_STATUS_VISIBLE, FALSE )
     SetCtrlState( vSubtask, "NewWindowName", zCONTROL_STATUS_VISIBLE, TRUE )
   ELSE
     SetWindowCaptionTitle( vSubtask, "Merge Dialog Window", 0 )
     SetCtrlState( vSubtask, "cbWindowName", zCONTROL_STATUS_VISIBLE, TRUE )
     SetCtrlState( vSubtask, "NewWindowName", zCONTROL_STATUS_VISIBLE, FALSE )
   END

   SetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_CHECKED, 1 )
   SEL_CLONE_SelectDlg( vSubtask )
   SEL_CLONE_SetFileName( vSubtask )

END


//************************************************************************************************//
//
//    OPERATION: SEL_CLONE_CheckValues
//
LOCAL OPERATION
SEL_CLONE_CheckValues( VIEW vSubtask,
                       VIEW vWork BASED ON LOD TZPNCTWO,
                       VIEW OrigWindow BASED ON LOD TZWDLGSO )

   VIEW TempWindow BASED ON LOD TZWDLGSO
   VIEW NewWindow  BASED ON LOD TZWDLGSO

   STRING ( 34 )   szTag
   STRING ( 34 )   szOrigTag
   STRING (100 )   szMsg
   SHORT           nRC

   //BL check Window Name
   GetStringFromAttribute( szOrigTag, OrigWindow, "Window", "Tag" )
   GetStringFromAttribute( szTag, vWork, "TZPNCTWO", "WindowName" )

   //Name is required
   IF szTag = ""
      szMsg = "Window Name is required."
      MessageSend( vSubtask, "ZO00137", "Dialog Maintenance",
                   szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
      SetFocusToCtrl( vSubtask, "NewWindowName" )
      RETURN -2
   END

   // check Source File Names
   nRC = SEL_CLONE_CheckSourceFile( vSubtask )
   IF nRC < 0
      RETURN nRC
   END

   //Name already exists
   GetViewByName( TempWindow, "TZWINDOWL", vSubtask, zLEVEL_ANY )
   CreateViewFromViewForTask( NewWindow, TempWindow, vSubtask )
   IF SetCursorFirstEntityByString( NewWindow, "Window", "Tag",
                                    szTag, 0 ) > zCURSOR_UNCHANGED
      IF vWork.TZPNCTWO.CloneFunction = "C"   //copy window
         szMsg = "Window '" + szTag + "' already exists. Replace existing Window?"
      ELSE   //merge window
         szMsg = "Do you want to Merge " + szOrigTag +
                                             " Window to '" + szTag + "'."
      END
      nRC = MessagePrompt( vSubtask, "ZO00138", "Dialog Maintenance",
                           szMsg, 0, zBUTTONS_YESNO,
                           zRESPONSE_NO, zICON_QUESTION )
      IF nRC = zRESPONSE_NO
         SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
         SetFocusToCtrl( vSubtask, "NewWindowName" )
         DropView( NewWindow )
         RETURN 0
      ELSE
         IF fnPainterCall( 1, vSubtask, 0, szTag ) = 0
            //BL do not copy or merge window in the same Dialog with the same
            //window
            IF OrigWindow.Dialog.ZKey = NewWindow.Dialog.ZKey AND
               vWork.TZPNCTWO.WindowName = OrigWindow.Window.Tag
                  SetAttributeFromString( vWork, "TZPNCTWO", "WindowName", "" )
                  RETURN  0
            END
            //BL if merge window in the same Dialog, then do not delete
            //window
            IF vWork.TZPNCTWO.CloneFunction = "C"
               DeleteEntity( NewWindow, "Window", zREPOS_NEXT )
            END
         END
      END
   END

   RETURN 1
END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    SEL_CLONE_OK
// PURPOSE:  This function uses the Window subobject specified by the
//           TZWND_List view and creates a clone of that Window
//           subobject in the TZWINDOWL view.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SEL_CLONE_OK( VIEW vSubtask )

   VIEW OrigWindow    BASED ON LOD TZWDLGSO
   VIEW TempWindow    BASED ON LOD TZWDLGSO
   VIEW NewWindow     BASED ON LOD TZWDLGSO
   VIEW ListWindow    BASED ON LOD TZWDLGSO
   VIEW vWork         BASED ON LOD TZPNCTWO
   VIEW vPE           BASED ON LOD TZPESRCO
   VIEW LOD_List      BASED ON LOD TZCMLPLO
   VIEW SourceLPLR    BASED ON LOD TZCMLPLO

   STRING ( 34 )   szTag
   STRING ( 34 )   szOrigTag
   STRING ( 34 )   szNewTag
   SHORT           nRC

   GetViewByName( OrigWindow, "TZWND_List", vSubtask, zLEVEL_ANY )
   GetViewByName( vWork, "TZPNCTWO", vSubtask, zLEVEL_ANY )

   nRC = SEL_CLONE_CheckValues( vSubtask, vWork, OrigWindow )
   IF nRC < 1
      RETURN nRC
   END

   GetViewByName( TempWindow, "TZWINDOWL", vSubtask, zLEVEL_ANY )
   CreateViewFromViewForTask( NewWindow, TempWindow, vSubtask )

   RetrieveViewForMetaList( vSubtask, SourceLPLR, zREFER_DOMAIN_META )
   GetStringFromAttribute( szTag, vWork, "TZPNCTWO", "WindowName" )
   GetStringFromAttribute( szOrigTag, OrigWindow, "Window", "Tag" )
   GetStringFromAttribute( szNewTag, NewWindow, "Window", "Tag" )
   IF szNewTag != szTag
      SetCursorFirstEntityByString( NewWindow, "Window", "Tag", szTag, 0 )
   END

   GetStringFromAttribute( szNewTag, NewWindow, "Window", "Tag" )
   IF vWork.TZPNCTWO.CloneFunction = "C"
      IF CheckExistenceOfEntity( OrigWindow, "Window" ) = zCURSOR_SET

         // Copy Operation Code
         nRC = SEL_CLONE_CopyCode( vSubtask, OrigWindow, NewWindow )
         IF nRC < 0
            DropView( NewWindow )
            SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
            RETURN -1
         END

         CloneWindow( NewWindow, OrigWindow, SourceLPLR, vSubtask )

         // Set new window name if name was entered.
         IF vWork.TZPNCTWO.WindowName != ""
            NewWindow.Window.Tag = vWork.TZPNCTWO.WindowName
         END
         szTag = NewWindow.Window.Tag
         IF GetViewByName( ListWindow, "TZWND_LIST_Subtask", vSubtask, zLEVEL_TASK ) > 0
            RefreshCtrl( ListWindow, "ListBox1" )
         END

         // The following function, and the one below it, generate pars errors, but
         // is ok anyway.  The C generates correctly in spite of the errors.  The main
         // problem occurs because fnPainterCall is not really a global operation.  It
         // is a local operation within TZPNTRAD, but is faked as a global so it can be
         // used here.  To make it work, you must add the following prototype to the
         // generated C:
         //   zLONG OPERATION fnPainterCall( zSHORT nMsg, zVIEW vSubtask,
         //                                  zVIEW vDialog, zPCHAR szParm );
         fnPainterCall( 11, vSubtask, 0, szTag )
      END
   ELSE
      IF vWork.TZPNCTWO.CloneFunction = "M"
         // Get View to Presentation Environment.
         RetrieveViewForMetaList( vSubtask, LOD_List, zREFER_PENV_META )
         nRC = LoadZeidonPPE( vSubtask, vPE, zREFER_PENV_META, LOD_List,
                             "Configuration Management", "" )
         IF nRC < 0
            SetAttributeFromString( vWork, "TZPNCTWO", "WindowName", "" )
            RETURN nRC
         END

         // Copy Operation Code
         nRC = SEL_CLONE_CopyCode( vSubtask, OrigWindow, NewWindow )
         IF nRC < 0
            DropView( NewWindow )
            SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
            RETURN -1
         END

         MergeWindowComponents( NewWindow, OrigWindow, SourceLPLR, vPE, vSubtask )
         fnPainterCall( 8, vSubtask, 0, szTag )
      END
   END

   IF OrigWindow.Dialog.ZKey != NewWindow.Dialog.ZKey
      DropMetaOI( vSubtask, OrigWindow )
   END

   SEL_CLONE_DropViews( vSubtask )
   SetAttributeFromString( vWork, "TZPNCTWO", "WindowName", "" )

   RETURN  0
END


/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_DropViews
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_DropViews( VIEW vSubtask )
   VIEW DialogList    BASED ON LOD TZCMLPLO
   VIEW CopyOperation BASED ON LOD TZEDWDEL
   VIEW CopyCode      BASED ON LOD TZEDWDEL
   VIEW DeleteOp      BASED ON LOD TZEDWDEL

   GetViewByName( DialogList, "TZDLG_List", vSubtask, zLEVEL_ANY )
   GetViewByName( CopyOperation, "CopyOperation", vSubtask, zLEVEL_TASK )

   DropObjectInstance( DialogList )
   DropObjectInstance( CopyOperation )

   IF GetViewByName( CopyCode, "CopyCode", vSubtask, zLEVEL_TASK ) > 0
      DropObjectInstance( CopyCode )
   END

   IF GetViewByName( DeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK ) > 0
      DropObjectInstance( DeleteOp )
   END

   RETURN 0
END


/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    SEL_CLONE_Cancel
// PURPOSE:  This function drops the two views created during the
//           clone process.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SEL_CLONE_Cancel( VIEW vSubtask )

   VIEW WindowList    BASED ON LOD TZWDLGSO

   GetViewByName( WindowList, "TZWND_List", vSubtask, zLEVEL_ANY )

   DropMetaOI( vSubtask, WindowList )
   SEL_CLONE_DropViews( vSubtask )

   RETURN  0
END


DIALOG OPERATION
NLS_CaptionRefresh( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Before refreshing the Caption list box, set up the Profile XFER object with
   // the NLS attributes for the NLS edit boxes.  Also enable the edit boxes..
   IF vDialog.CaptionNLS_Text EXISTS
      Profile.TZ.NLS_LanguageIndex = vDialog.CaptionNLS_Text.LanguageIndex
      Profile.TZ.NLS_LastText = vDialog.CaptionNLS_Text.Text
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   ELSE
      // If there is no NLS entity, disable the edit boxes and set text to spaces.
      Profile.TZ.NLS_LastText = ""
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, FALSE )
   END

   // Now refresh all three controls
   RefreshCtrl( vSubtask, "NLS_ListBox" )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_Code" )

END


DIALOG OPERATION
NLS_CaptionDeleteText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO

   GET VIEW vDialog NAMED "TZWINDOWL"

   IF vDialog.CaptionNLS_Text EXISTS
      DELETE ENTITY vDialog.CaptionNLS_Text
      NLS_CaptionRefresh( vSubtask )
   END

END


DIALOG OPERATION
NLS_CaptionNewText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Create the new entity with default values.  We will make sure that
   // the profile has a default LanguageIndex and the text is initialized
   // with original text.
   IF Profile.TZ.NLS_LanguageIndex = 0
      Profile.TZ.NLS_LanguageIndex = 1
   END
   Profile.TZ.NLS_LastText = vDialog.Window.Caption

   CreateMetaEntity( vSubtask, vDialog, "CaptionNLS_Text", zPOS_AFTER )
   vDialog.CaptionNLS_Text.Text = Profile.TZ.NLS_LastText
   vDialog.CaptionNLS_Text.LanguageIndex = Profile.TZ.NLS_LanguageIndex

   // Allow the NLS edit boxes to be active and initialize text with original
   // text.

   SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_CaptionSaveText( VIEW vSubtask )

   // On save, copy the Profile attributes that were entered in the window
   // over to the NLS_CaptionText entity.

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   IF vDialog.CaptionNLS_Text EXISTS
      vDialog.CaptionNLS_Text.LanguageIndex = Profile.TZ.NLS_LanguageIndex
      vDialog.CaptionNLS_Text.Text = Profile.TZ.NLS_LastText
   END

   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_ControlBuildList( VIEW vSubtask )

   VIEW vDialog          BASED ON LOD TZWDLGSO
   VIEW vTZWINDOWL       BASED ON LOD TZWDLGSO
   VIEW vDialogRecursive BASED ON LOD TZWDLGSO

   // Build the NLS_ControlText entries for processing NLS Control Text entries.
   GET VIEW vTZWINDOWL NAMED "TZWINDOWL"
   CreateViewFromViewForTask( vDialog, vTZWINDOWL, vSubtask )

   // First remove any entries that already exist.
   FOR EACH vDialog.NLS_Control
      EXCLUDE vDialog.NLS_Control NONE
   END

   // Now, process all Control entities hierarchically to include new entries.

   SET CURSOR FIRST vDialog.Window
   CreateViewFromViewForTask( vDialogRecursive, vDialog, vSubtask )

   FOR EACH vDialogRecursive.Control WITHIN vDialogRecursive.Dialog
      IF vDialogRecursive.Control.Text != ""
         INCLUDE vDialog.NLS_Control FROM vDialogRecursive.Control
      END
      FOR EACH vDialogRecursive.CtrlCtrl
         NLS_ControlBuildListR( vDialog, vDialogRecursive )
      END
   END

END


LOCAL OPERATION
NLS_ControlBuildListR( VIEW vDialog          BASED ON LOD TZWDLGSO,
                       VIEW vDialogRecursive BASED ON LOD TZWDLGSO )

   // Recursive call to process sub Control

   SetViewToSubobject( vDialogRecursive, "CtrlCtrl" )

   FOR EACH vDialogRecursive.Control
      IF vDialogRecursive.Control.Text != ""
         INCLUDE vDialog.NLS_Control FROM vDialogRecursive.Control
      END
      FOR EACH vDialogRecursive.CtrlCtrl
         NLS_ControlBuildListR( vDialog, vDialogRecursive )
      END
   END

   ResetViewFromSubobject( vDialogRecursive )

END

DIALOG OPERATION
NLS_ControlRefresh( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Before refreshing the Control list box, set up the Profile XFER object
   // with the NLS attributes for the NLS edit boxes.  Also enable the edit
   // boxes..
   IF vDialog.NLS_ControlText  EXISTS
      Profile.TZ.NLS_LanguageIndex = vDialog.NLS_ControlText.LanguageIndex
      Profile.TZ.NLS_LastText = vDialog.NLS_ControlText.Text
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   ELSE
      // If there is no NLS entity, disable the edit boxes and set text to spaces.
      Profile.TZ.NLS_LastText = ""
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, FALSE )
   END

   // Now refresh all three controls
   RefreshCtrl( vSubtask, "NLS_ListBox" )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_Code" )

END


DIALOG OPERATION
NLS_ControlDeleteText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO

   GET VIEW vDialog NAMED "TZWINDOWL"

   IF vDialog.NLS_ControlText EXISTS
      DELETE ENTITY vDialog.NLS_ControlText
      NLS_ControlRefresh( vSubtask )
   END

END


DIALOG OPERATION
NLS_ControlNewText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Create the new entity with default values.  We will make sure that
   // the profile has a default LanguageIndex and the text is initialized
   // with original text.
   IF Profile.TZ.NLS_LanguageIndex = 0
      Profile.TZ.NLS_LanguageIndex = 1
   END
   Profile.TZ.NLS_LastText = vDialog.NLS_Control.Text

   CreateMetaEntity( vSubtask, vDialog, "NLS_ControlText", zPOS_AFTER )
   vDialog.NLS_ControlText.Text = Profile.TZ.NLS_LastText
   vDialog.NLS_ControlText.LanguageIndex = Profile.TZ.NLS_LanguageIndex

   // Allow the NLS edit boxes to be active and initialize text with original text.
   SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_ControlSaveText( VIEW vSubtask )

   // On save, copy the Profile attributes that were entered in the window
   // over to the NLS_ControlText entity.

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   IF vDialog.NLS_ControlText EXISTS
      vDialog.NLS_ControlText.LanguageIndex = Profile.TZ.NLS_LanguageIndex
      vDialog.NLS_ControlText.Text = Profile.TZ.NLS_LastText
   END

   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_OptionBuildList( VIEW vSubtask )

   VIEW vDialog          BASED ON LOD TZWDLGSO
   VIEW vTZWINDOWL       BASED ON LOD TZWDLGSO
   VIEW vDialogRecursive BASED ON LOD TZWDLGSO

   // Build the NLS_OptionText entries for processing NLS Option Text entries.
   GET VIEW vTZWINDOWL NAMED "TZWINDOWL"
   CreateViewFromViewForTask( vDialog, vTZWINDOWL, vSubtask )

   // First remove any entries that already exist.
   FOR EACH vDialog.NLS_Option
      EXCLUDE vDialog.NLS_Option NONE
   END

   // Now, process all Option entities hierarchically to include new entries.

   SET CURSOR FIRST vDialog.Window
   CreateViewFromViewForTask( vDialogRecursive, vDialog, vSubtask )

   FOR EACH vDialogRecursive.Option WITHIN vDialogRecursive.Dialog
      IF vDialogRecursive.Option.Text != ""
         INCLUDE vDialog.NLS_Option FROM vDialogRecursive.Option
      END
      FOR EACH vDialogRecursive.OptOpt
         NLS_OptionBuildListR( vDialog, vDialogRecursive )
      END
   END

END


LOCAL OPERATION
NLS_OptionBuildListR( VIEW vDialog          BASED ON LOD TZWDLGSO,
                      VIEW vDialogRecursive BASED ON LOD TZWDLGSO )

   // Recursive call to process sub Option

   SetViewToSubobject( vDialogRecursive, "OptOpt" )

   FOR EACH vDialogRecursive.Option
      IF vDialogRecursive.Option.Text != ""
         INCLUDE vDialog.NLS_Option FROM vDialogRecursive.Option
      END
      FOR EACH vDialogRecursive.OptOpt
         NLS_OptionBuildListR( vDialog, vDialogRecursive )
      END
   END

   ResetViewFromSubobject( vDialogRecursive )

END

DIALOG OPERATION
NLS_OptionRefresh( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Before refreshing the Option list box, set up the Profile XFER object
   // with the NLS attributes for the NLS edit boxes.  Also enable the edit
   // boxes..
   IF vDialog.NLS_OptionText  EXISTS
      Profile.TZ.NLS_LanguageIndex = vDialog.NLS_OptionText.LanguageIndex
      Profile.TZ.NLS_LastText = vDialog.NLS_OptionText.Text
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   ELSE
      // If there is no NLS entity, disable the edit boxes and set text to
      // spaces.
      Profile.TZ.NLS_LastText = ""
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, FALSE )
   END

   // Now refresh all three controls
   RefreshCtrl( vSubtask, "NLS_ListBox" )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_Code" )

END


DIALOG OPERATION
NLS_OptionDeleteText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO

   GET VIEW vDialog NAMED "TZWINDOWL"

   IF vDialog.NLS_OptionText EXISTS
      DELETE ENTITY vDialog.NLS_OptionText
      NLS_OptionRefresh( vSubtask )
   END

END


DIALOG OPERATION
NLS_OptionNewText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Create the new entity with default values.  We will make sure that
   // the profile has a default LanguageIndex and the text is initialized
   // with original text.
   IF Profile.TZ.NLS_LanguageIndex = 0
      Profile.TZ.NLS_LanguageIndex = 1
   END
   Profile.TZ.NLS_LastText = vDialog.NLS_Option.Text

   CreateMetaEntity( vSubtask, vDialog, "NLS_OptionText", zPOS_AFTER )
   vDialog.NLS_OptionText.Text = Profile.TZ.NLS_LastText
   vDialog.NLS_OptionText.LanguageIndex = Profile.TZ.NLS_LanguageIndex

   // Allow the NLS edit boxes to be active and initialize text with original
   // text.
   SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_OptionSaveText( VIEW vSubtask )

   // On save, copy the Profile attributes that were entered in the window
   // over to the NLS_OptionText entity.

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   IF vDialog.NLS_OptionText EXISTS
      vDialog.NLS_OptionText.LanguageIndex = Profile.TZ.NLS_LanguageIndex
      vDialog.NLS_OptionText.Text = Profile.TZ.NLS_LastText
   END

   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_DIL_ControlBuildList( VIEW vSubtask )

   VIEW vDialog          BASED ON LOD TZWDLGSO
   VIEW vTZWINDOWL       BASED ON LOD TZWDLGSO
   VIEW vDialogRecursive BASED ON LOD TZWDLGSO

   // Build the NLS_DIL_Text entries for processing NLS DIL_ Text entries.
   GET VIEW vTZWINDOWL NAMED "TZWINDOWL"
   CreateViewFromViewForTask( vDialog, vTZWINDOWL, vSubtask )

   // First remove any entries that already exist.
   FOR EACH vDialog.NLS_DIL_Control
      EXCLUDE vDialog.NLS_DIL_Control NONE
   END

   // Now, process all Control entities hierarchically to include new entries.

   SET CURSOR FIRST vDialog.Window
   CreateViewFromViewForTask( vDialogRecursive, vDialog, vSubtask )

   FOR EACH vDialogRecursive.Control WITHIN vDialogRecursive.Dialog
      IF vDialogRecursive.Control.DIL_Text != ""
         INCLUDE vDialog.NLS_DIL_Control FROM vDialogRecursive.Control
      END
      FOR EACH vDialogRecursive.CtrlCtrl
         NLS_DIL_ControlBuildListR( vDialog, vDialogRecursive )
      END
   END

   DropView( vDialog )
   DropView( vDialogRecursive )

END


LOCAL OPERATION
NLS_DIL_ControlBuildListR( VIEW vDialog          BASED ON LOD TZWDLGSO,
                           VIEW vDialogRecursive BASED ON LOD TZWDLGSO )

   // Recursive call to process sub DIL_

   SetViewToSubobject( vDialogRecursive, "CtrlCtrl" )

   FOR EACH vDialogRecursive.Control
      IF vDialogRecursive.Control.DIL_Text != ""
         INCLUDE vDialog.NLS_DIL_Control FROM vDialogRecursive.Control
      END
      FOR EACH vDialogRecursive.CtrlCtrl
         NLS_DIL_ControlBuildListR( vDialog, vDialogRecursive )
      END
   END

   ResetViewFromSubobject( vDialogRecursive )

END


DIALOG OPERATION
NLS_DIL_ControlRefresh( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Before refreshing the DIL list box, set up the Profile XFER object with
   // the NLS attributes for the NLS edit boxes.  Also enable the edit boxes..
   IF vDialog.NLS_ControlDIL_Text  EXISTS
      Profile.TZ.NLS_LanguageIndex = vDialog.NLS_ControlDIL_Text.LanguageIndex
      Profile.TZ.NLS_LastText = vDialog.NLS_ControlDIL_Text.Text
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   ELSE
      // If there is no NLS entity, disable the edit boxes and set text to
      // spaces.
      Profile.TZ.NLS_LastText = ""
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, FALSE )
   END

   // Now refresh all three controls
   RefreshCtrl( vSubtask, "NLS_ListBox" )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_Code" )

END


DIALOG OPERATION
NLS_DIL_ControlDeleteText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO

   GET VIEW vDialog NAMED "TZWINDOWL"

   IF vDialog.NLS_ControlDIL_Text EXISTS
      DELETE ENTITY vDialog.NLS_ControlDIL_Text
      NLS_DIL_ControlRefresh( vSubtask )
   END

END


DIALOG OPERATION
NLS_DIL_ControlNewText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Create the new entity with default values.  We will make sure that
   // the profile has a default LanguageIndex and the text is initialized
   // with original text.
   IF Profile.TZ.NLS_LanguageIndex = 0
      Profile.TZ.NLS_LanguageIndex = 1
   END
   Profile.TZ.NLS_LastText = vDialog.NLS_DIL_Control.DIL_Text

   CreateMetaEntity( vSubtask, vDialog, "NLS_ControlDIL_Text", zPOS_AFTER )
   vDialog.NLS_ControlDIL_Text.Text = Profile.TZ.NLS_LastText
   vDialog.NLS_ControlDIL_Text.LanguageIndex = Profile.TZ.NLS_LanguageIndex

   // Allow the NLS edit boxes to be active and initialize text with original
   // text.
   SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_DIL_ControlSaveText( VIEW vSubtask )

   // On save, copy the Profile attributes that were entered in the window
   // over to the NLS_DIL_Text entity.

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   IF vDialog.NLS_ControlDIL_Text EXISTS
      vDialog.NLS_ControlDIL_Text.LanguageIndex = Profile.TZ.NLS_LanguageIndex
      vDialog.NLS_ControlDIL_Text.Text = Profile.TZ.NLS_LastText
   END

   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_DIL_OptionBuildList( VIEW vSubtask )

   VIEW vDialog          BASED ON LOD TZWDLGSO
   VIEW vTZWINDOWL       BASED ON LOD TZWDLGSO
   VIEW vDialogRecursive BASED ON LOD TZWDLGSO

   // Build the NLS_DIL_Text entries for processing NLS DIL_ Text entries.
   GET VIEW vTZWINDOWL NAMED "TZWINDOWL"
   CreateViewFromViewForTask( vDialog, vTZWINDOWL, vSubtask )

   // First remove any entries that already exist.
   FOR EACH vDialog.NLS_DIL_Option
      EXCLUDE vDialog.NLS_DIL_Option NONE
   END

   // Now, process all Option entities hierarchically to include new entries.

   SET CURSOR FIRST vDialog.Window
   CreateViewFromViewForTask( vDialogRecursive, vDialog, vSubtask )

   FOR EACH vDialogRecursive.Option WITHIN vDialogRecursive.Dialog
      IF vDialogRecursive.Option.DIL_Text != ""
         INCLUDE vDialog.NLS_DIL_Option FROM vDialogRecursive.Option
      END
      FOR EACH vDialogRecursive.OptOpt
         NLS_DIL_OptionBuildListR( vDialog, vDialogRecursive )
      END
   END

END


LOCAL OPERATION
NLS_DIL_OptionBuildListR( VIEW vDialog          BASED ON LOD TZWDLGSO,
                          VIEW vDialogRecursive BASED ON LOD TZWDLGSO )

   // Recursive call to process sub DIL_

   SetViewToSubobject( vDialogRecursive, "CtrlCtrl" )

   FOR EACH vDialogRecursive.Option
      IF vDialogRecursive.Option.DIL_Text != ""
         INCLUDE vDialog.NLS_DIL_Option FROM vDialogRecursive.Option
      END
      FOR EACH vDialogRecursive.OptOpt
         NLS_DIL_OptionBuildListR( vDialog, vDialogRecursive )
      END
   END

   ResetViewFromSubobject( vDialogRecursive )

END


DIALOG OPERATION
NLS_DIL_OptionRefresh( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Before refreshing the DIL list box, set up the Profile XFER object with
   // the NLS attributes for the NLS edit boxes.  Also enable the edit boxes..
   IF vDialog.NLS_OptionDIL_Text  EXISTS
      Profile.TZ.NLS_LanguageIndex = vDialog.NLS_OptionDIL_Text.LanguageIndex
      Profile.TZ.NLS_LastText = vDialog.NLS_OptionDIL_Text.Text
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   ELSE
      // If there is no NLS entity, disable the edit boxes and set text to spaces.
      Profile.TZ.NLS_LastText = ""
      SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, FALSE )
   END

   // Now refresh all three controls
   RefreshCtrl( vSubtask, "NLS_ListBox" )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_Code" )

END


DIALOG OPERATION
NLS_DIL_OptionDeleteText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO

   GET VIEW vDialog NAMED "TZWINDOWL"

   IF vDialog.NLS_OptionDIL_Text EXISTS
      DELETE ENTITY vDialog.NLS_OptionDIL_Text
      NLS_DIL_OptionRefresh( vSubtask )
   END

END


DIALOG OPERATION
NLS_DIL_OptionNewText( VIEW vSubtask )

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   // Create the new entity with default values.  We will make sure that
   // the profile has a default LanguageIndex and the text is initialized with
   // original text.
   IF Profile.TZ.NLS_LanguageIndex = 0
      Profile.TZ.NLS_LanguageIndex = 1
   END
   Profile.TZ.NLS_LastText = vDialog.NLS_DIL_Option.DIL_Text

   CreateMetaEntity( vSubtask, vDialog, "NLS_OptionDIL_Text", zPOS_AFTER )
   vDialog.NLS_OptionDIL_Text.Text = Profile.TZ.NLS_LastText
   vDialog.NLS_OptionDIL_Text.LanguageIndex = Profile.TZ.NLS_LanguageIndex

   // Allow the NLS edit boxes to be active and initialize text with original text.
   SetCtrlState( vSubtask, "NLS_Text", zCONTROL_STATUS_ENABLED, TRUE )
   SetCtrlState( vSubtask, "NLS_Code", zCONTROL_STATUS_ENABLED, TRUE )
   RefreshCtrl( vSubtask, "NLS_Text" )
   RefreshCtrl( vSubtask, "NLS_ListBox" )

END


DIALOG OPERATION
NLS_DIL_OptionSaveText( VIEW vSubtask )

   // On save, copy the Profile attributes that were entered in the window over
   // to the NLS_DIL_Text entity.

   VIEW vDialog BASED ON LOD TZWDLGSO
   VIEW Profile BASED ON LOD TZ__PRFO

   GET VIEW vDialog NAMED "TZWINDOWL"
   GET VIEW Profile NAMED "ProfileXFER"

   IF vDialog.NLS_OptionDIL_Text EXISTS
      vDialog.NLS_OptionDIL_Text.LanguageIndex = Profile.TZ.NLS_LanguageIndex
      vDialog.NLS_OptionDIL_Text.Text = Profile.TZ.NLS_LastText
   END

   RefreshCtrl( vSubtask, "NLS_ListBox" )

END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_SetWindowName
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_SetWindowName( VIEW vSubtask )
   STRING (  33  )  szWindowTag

   VIEW vTZPNCTWO REGISTERED AS TZPNCTWO

   GetCtrlText( vSubtask, "cbWindowName", szWindowTag, 33 )
   SetAttributeFromString( vTZPNCTWO, "TZPNCTWO", "WindowName", szWindowTag )
END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_Set_WindowName
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_Set_WindowName( VIEW vSubtask )

   VIEW vTZPNCTWO REGISTERED AS TZPNCTWO
   VIEW TZWND_List REGISTERED AS TZWND_List


   IF vTZPNCTWO.TZPNCTWO.CloneFunction = "C"
      vTZPNCTWO.TZPNCTWO.WindowName = TZWND_List.Window.Tag
   END
END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_DisableFileFields
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_DisableFileFields( VIEW vSubtask )

   IF GetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_CHECKED ) = 1
      SEL_CLONE_SetSourceFileState( vSubtask )
   ELSE
      SetCtrlState( vSubtask, "edVML_File", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "edC_File", zCONTROL_STATUS_ENABLED, FALSE )
   END
END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_SetSourceFileState
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_SetSourceFileState( VIEW vSubtask )

   SHORT   nEnableVML
   SHORT   nEnableC

   VIEW  vDialog      BASED ON LOD  TZWDLGSO
   VIEW  TZWND_Copy   BASED ON LOD  TZWDLGSO
   VIEW  TZWND_List   REGISTERED AS TZWND_List
   VIEW  DialogList   REGISTERED AS TZDLG_List

   GET VIEW vDialog NAMED "TZWINDOWL"

   nEnableVML = FALSE
   nEnableC   = FALSE

   IF GetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_CHECKED ) = 0
      RETURN 0
   END

   // if Source and Target Dialog identical, do not copy Operation Code
   IF DialogList.W_MetaDef.CPLR_ZKey = vDialog.Dialog.ZKey
      SetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "edVML_File", zCONTROL_STATUS_ENABLED, FALSE )
      SetCtrlState( vSubtask, "edC_File", zCONTROL_STATUS_ENABLED, FALSE )
   ELSE
      CreateViewFromViewForTask( TZWND_Copy, TZWND_List, vSubtask )

      // Has Window a Operation, enable CheckBox for Copy Operation Code and
      // Edit Fields for Source File Name
      SET CURSOR FIRST TZWND_Copy.ActOper WITHIN TZWND_Copy.Window
      IF RESULT >= zCURSOR_SET
         SetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_ENABLED, TRUE )

         // Has Window a Operation in a VML Source File ?
         SET CURSOR FIRST TZWND_Copy.SourceFileForOper WITHIN TZWND_Copy.Window
             WHERE TZWND_Copy.SourceFileForOper.LanguageType = "V"
         IF RESULT >= zCURSOR_SET
            nEnableVML = TRUE
         END

         // Has Window a Operation in a C Source File ?
         SET CURSOR FIRST TZWND_Copy.SourceFileForOper WITHIN TZWND_Copy.Window
             WHERE TZWND_Copy.SourceFileForOper.LanguageType = "C"
         IF RESULT >= zCURSOR_SET
            nEnableC = TRUE
         END
      ELSE
         // Window has no Operation
         SetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_ENABLED, FALSE )
      END

      DropView( TZWND_Copy )
      SetCtrlState( vSubtask, "edVML_File", zCONTROL_STATUS_ENABLED, nEnableVML )
      SetCtrlState( vSubtask, "edC_File", zCONTROL_STATUS_ENABLED, nEnableC )
   END
END


/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_SetFileName
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_SetFileName( VIEW vSubtask )

   STRING ( 32 ) szFileName

   VIEW  vDialog       BASED ON LOD  TZWDLGSO
   VIEW  vDialog_Copy  BASED ON LOD  TZWDLGSO
   VIEW  CopyOperation REGISTERED AS CopyOperation

   GET VIEW vDialog NAMED "TZWINDOWL"
   CreateViewFromViewForTask( vDialog_Copy, vDialog, vSubtask )

   // set VML File Name
   szFileName = ""
   SET CURSOR FIRST vDialog_Copy.SourceFile
              WHERE vDialog_Copy.SourceFile.LanguageType = "V"
   IF RESULT >= zCURSOR_SET
      szFileName = vDialog_Copy.SourceFile.Name
   ELSE
      SEL_CLONE_GenerateSourceFileName( vSubtask, vDialog_Copy, "edVML_File", szFileName )
   END
   CopyOperation.SourceFile.NameVML = szFileName

   // set C File Name
   SET CURSOR FIRST vDialog_Copy.SourceFile
              WHERE vDialog_Copy.SourceFile.LanguageType = "C"
   IF RESULT >= zCURSOR_SET
      szFileName = vDialog_Copy.SourceFile.Name
   ELSE
      SEL_CLONE_GenerateSourceFileName( vSubtask, vDialog_Copy, "edC_File", szFileName )
   END
   CopyOperation.SourceFile.NameC = szFileName

   DropView( vDialog_Copy )
   RefreshCtrl( vSubtask, "edVML_File" )
   RefreshCtrl( vSubtask, "edC_File" )

END


/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_CreateDeleteLod
**
**
*************************************************************************************************/
LOCAL OPERATION
SEL_CLONE_CreateDeleteLod( VIEW vSubtask,
                           VIEW vNewWindow BASED ON LOD TZWDLGSO )

   VIEW vDeleteOp BASED ON LOD TZEDWDEL

   IF GetViewByName( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK ) < 0
      ActivateEmptyObjectInstance( vDeleteOp, "TZEDWDEL", vSubtask, zMULTIPLE )
      SetNameForView( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK )
   END

   SET CURSOR FIRST vDeleteOp.SourceFile
              WHERE vDeleteOp.SourceFile.Name = vNewWindow.SourceFile.Name

   // Source File does not exists in Delete Lod, create it
   IF RESULT < zCURSOR_SET
      CREATE ENTITY vDeleteOp.SourceFile AFTER
      SetMatchingAttributesByName( vDeleteOp,  "SourceFile",
                                   vNewWindow, "SourceFile", zSET_ALL )
   END

   CREATE ENTITY vDeleteOp.Operation AFTER
   vDeleteOp.Operation.Name = vNewWindow.Operation.Name

   RETURN 0
END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_CreateWorkLod
**
**
*************************************************************************************************/
LOCAL OPERATION
SEL_CLONE_CreateWorkLod( VIEW vSubtask,
                         VIEW vOrigWindow BASED ON LOD TZWDLGSO,
                         VIEW vNewWindow  BASED ON LOD TZWDLGSO,
                         STRING ( 32 ) szVML_Name,
                         STRING ( 32 ) szC_Name )
   STRING (  32 )  szName
   STRING (  32 )  szOperationName
   STRING (   1 )  szLanguageType
   STRING (   3 )  szExtension
   STRING ( 100 )  szMsg
   SHORT           nRC

   VIEW  vCopyCode      BASED ON LOD  TZEDWDEL
   VIEW  vDeleteOp      BASED ON LOD  TZEDWDEL
   VIEW  vOrigWindowC   REGISTERED AS TZWND_List

   // Create LOD for delete existing Operations
   IF GetViewByName( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK ) >= 0
      DropObjectInstance( vDeleteOp )
   END

   // Save Operations with assigned Source File
   ActivateEmptyObjectInstance( vCopyCode, "TZEDWDEL", vSubtask, zMULTIPLE )
   SetNameForView( vCopyCode, "CopyCode", vSubtask, zLEVEL_TASK )

   CreateViewFromViewForTask( vOrigWindowC, vOrigWindow, vSubtask )
   FOR EACH vOrigWindowC.ActOper WITHIN vOrigWindowC.Window
       szOperationName = vOrigWindowC.ActOper.Name
       SET CURSOR FIRST vOrigWindowC.Operation WITHIN vOrigWindowC.Dialog
                  WHERE vOrigWindowC.Operation.Name = szOperationName
       szLanguageType = vOrigWindowC.SourceFile.LanguageType
       IF szLanguageType = "V"
          szName      = szVML_Name
          szExtension = "VML"
       ELSE
          szName      = szC_Name
          szExtension = "C"
       END
       SET CURSOR FIRST vCopyCode.SourceFile
                  WHERE vCopyCode.SourceFile.Name = szName
       // Source File does not exists in Work Lod, create it
       IF RESULT < zCURSOR_SET
          CREATE ENTITY vCopyCode.SourceFile AFTER
          vCopyCode.SourceFile.Name         = szName
          vCopyCode.SourceFile.Subdirectory = ""
          vCopyCode.SourceFile.LanguageType = szLanguageType
          vCopyCode.SourceFile.Extension    = szExtension
          vCopyCode.SourceFile.CopyFromFile = vOrigWindowC.SourceFile.Name
       END
       SET CURSOR FIRST vCopyCode.Operation
                  WHERE vCopyCode.Operation.Name = szOperationName
       // Operation does not exists in Work Lod, create it
       IF RESULT < zCURSOR_SET
          CREATE ENTITY vCopyCode.Operation AFTER
          vCopyCode.Operation.Name = szOperationName

          // exists new Operation in Source Dialog
          SET CURSOR FIRST vNewWindow.Operation WITHIN vNewWindow.Dialog
                     WHERE vNewWindow.Operation.Name = szOperationName
          // Operation exists in Source Dialog, ask for overwrite
          IF RESULT >= zCURSOR_SET
             szMsg = "Operation '"
             szMsg = szMsg + szOperationName + "' already exists. Replace existing Operation?"
             nRC = MessagePrompt( vSubtask, "ZO00138", "Dialog Maintenance",
                                  szMsg, 1, zBUTTONS_YESNOCANCEL,
                                  zRESPONSE_NO, zICON_QUESTION )
             IF nRC = zRESPONSE_CANCEL
                DropView( vOrigWindowC )
                DropObjectInstance( vCopyCode )
                IF GetViewByName( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK ) >= 0
                   DropObjectInstance( vDeleteOp )
                END
                RETURN -1
             ELSE
                IF nRC = zRESPONSE_YES
                   // Save Operation in Delete LOD
                   SEL_CLONE_CreateDeleteLod( vSubtask, vNewWindow )
                ELSE
                   // Replace = NO, do not copy this Operation Code
                   DELETE ENTITY vCopyCode.Operation LAST
                END
             END
          END
       END
   END

   DropView( vOrigWindowC )
   RETURN 0
END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_CopyOperCode
**
**
*************************************************************************************************/
LOCAL OPERATION
SEL_CLONE_CopyOperCode( VIEW vSubtask )

   VIEW  vCopyCode   BASED ON LOD  TZEDWDEL
   VIEW  vDeleteOp   BASED ON LOD  TZEDWDEL

   GET VIEW vCopyCode NAMED "CopyCode"

   // Step 1: Operation already exists in Target Dialog and user will replace existing
   //         Operation, then delete Operation Code
   IF GetViewByName( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK ) >= 0
      zwTZPNCW2D_CopyOperationToFile( vSubtask, 1 ) // 1 = zDELETE_OPERATION
   END

   // Step 2: Copy Operation Code to Target Dialog
   FOR EACH vCopyCode.SourceFile
       FOR EACH vCopyCode.Operation
           // Delete old View for Editor
           IF GetViewByName( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK ) >= 0
              DropObjectInstance( vDeleteOp )
           END
           // Create LOD for Editor
           ActivateEmptyObjectInstance( vDeleteOp, "TZEDWDEL", vSubtask, zMULTIPLE )
           SetNameForView( vDeleteOp, "DeleteOp", vSubtask, zLEVEL_TASK )
           // Editor will be copy Operation Code from 1. Source File
           CREATE ENTITY vDeleteOp.SourceFile AFTER
           SetMatchingAttributesByName( vDeleteOp, "SourceFile",
                                        vCopyCode, "SourceFile", zSET_ALL )
           vDeleteOp.SourceFile.Name = vCopyCode.SourceFile.CopyFromFile
           CREATE ENTITY vDeleteOp.Operation AFTER
           vDeleteOp.Operation.Name = vCopyCode.Operation.Name
           // Editor will be copy Operation Code to 2. Source File
           CREATE ENTITY vDeleteOp.SourceFile AFTER
           SetMatchingAttributesByName( vDeleteOp, "SourceFile",
                                        vCopyCode, "SourceFile", zSET_ALL )
           zwTZPNCW2D_CopyOperationToFile( vSubtask, 3 ) // 3 = zCOPY_OPERATION
       END
   END

   RETURN 0
END


/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_CopyCode
**
**
*************************************************************************************************/
LOCAL OPERATION
SEL_CLONE_CopyCode( VIEW vSubtask,
                    VIEW vOrigWindow    BASED ON LOD TZWDLGSO,
                    VIEW vNewWindow     BASED ON LOD TZWDLGSO )

   STRING (  32 ) szVML_Name
   STRING (  32 ) szC_Name
   SHORT          nRC

   VIEW  CopyOperation REGISTERED AS CopyOperation

   // if no Copy Operation Code
   IF GetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_CHECKED ) = 0
      OR GetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_ENABLED ) = 0
      RETURN 0
   END

   szVML_Name = ""
   szC_Name   = ""

   // create VML Source File
   IF GetCtrlState( vSubtask, "edVML_File", zCONTROL_STATUS_ENABLED ) = 1
      szVML_Name = CopyOperation.SourceFile.NameVML
      // exists a VML File by that Name?
      SET CURSOR FIRST vNewWindow.SourceFile
                 WHERE vNewWindow.SourceFile.LanguageType = "V" AND
                       vNewWindow.SourceFile.Name = szVML_Name
      // Source File does not exists, create it in Dialog View
      IF RESULT < zCURSOR_SET
         SEL_CLONE_CreateSourceFile( vSubtask, vNewWindow, "V", szVML_Name )
      END
   END

   // create C Source File
   IF GetCtrlState( vSubtask, "edC_File", zCONTROL_STATUS_ENABLED ) = 1
      szC_Name = CopyOperation.SourceFile.NameC
      // exists a VML File by that Name?
      SET CURSOR FIRST vNewWindow.SourceFile
                 WHERE vNewWindow.SourceFile.LanguageType = "C" AND
                       vNewWindow.SourceFile.Name = szC_Name
      // Source File does not exists, create it in Dialog View
      IF RESULT < zCURSOR_SET
         SEL_CLONE_CreateSourceFile( vSubtask, vNewWindow, "C", szC_Name )
      END
   END

   nRC = SEL_CLONE_CreateWorkLod( vSubtask, vOrigWindow, vNewWindow,
                                  szVML_Name, szC_Name )
   IF nRC < 0
      RETURN nRC
   ELSE
      SEL_CLONE_CopyOperCode( vSubtask )
   END

   RETURN 0
END

/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_CreateSourceFile
**
*************************************************************************************************/
LOCAL OPERATION
SEL_CLONE_CreateSourceFile( VIEW vSubtask,
                            VIEW vDialog BASED ON LOD TZWDLGSO,
                            STRING ( 1 )  szLanguageType,
                            STRING ( 32 ) szName )

   // create the new Source File on FIRST position, because the operation
   // CloneWindow search the first source file with LanguageType
   CreateMetaEntity( vSubtask, vDialog, "SourceFile", zPOS_FIRST )
   vDialog.SourceFile.Name = szName

   // Make sure that the Subdirectory attribute is null and that the
   // Extension attribute is set according to the Language type.
   vDialog.SourceFile.Subdirectory = ""
   vDialog.SourceFile.LanguageType = szLanguageType

   IF szLanguageType = "V"
      vDialog.SourceFile.Extension = "VML"
   ELSE
      vDialog.SourceFile.Extension = "C"
   END

   RETURN 0
END


/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_CheckSourceFile
**
**
*************************************************************************************************/
DIALOG OPERATION
SEL_CLONE_CheckSourceFile( VIEW vSubtask )

   STRING ( 32 )  szVML_File
   STRING ( 32 )  szC_File

   VIEW  vDialog       BASED ON LOD  TZWDLGSO
   VIEW  vDialog_Copy  BASED ON LOD  TZWDLGSO
   VIEW  CopyOperation REGISTERED AS CopyOperation

   IF GetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_CHECKED ) = 0
      OR GetCtrlState( vSubtask, "cbCopyCode", zCONTROL_STATUS_ENABLED ) = 0
      RETURN 0
   END

   GET VIEW vDialog NAMED "TZWINDOWL"
   CreateViewFromViewForTask( vDialog_Copy, vDialog, vSubtask )

   // check VML Source File Name
   IF GetCtrlState( vSubtask, "edVML_File", zCONTROL_STATUS_ENABLED ) = 1
      //Name is required
      szVML_File = CopyOperation.SourceFile.NameVML
      IF szVML_File = ""
         MessageSend( vSubtask, "ZO00137", "Dialog Maintenance",
                      "VML Source File Name is required.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
         SetFocusToCtrl( vSubtask, "edVML_File" )
         DropView( vDialog_Copy )
         RETURN -2
      ELSE
         // exists a C File by that Name?
         SET CURSOR FIRST vDialog_Copy.SourceFile
                    WHERE vDialog_Copy.SourceFile.LanguageType = "C" AND
                          vDialog_Copy.SourceFile.Name = szVML_File
         IF RESULT >= zCURSOR_SET
            MessageSend( vSubtask, "ZO00137", "Dialog Maintenance",
                         "A C Source File already exists by that name.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
            SetFocusToCtrl( vSubtask, "edVML_File" )
            DropView( vDialog_Copy )
            RETURN -1
         END
      END
   END

   // check C Source File Name
   IF GetCtrlState( vSubtask, "edC_File", zCONTROL_STATUS_ENABLED ) = 1
      //Name is required
      szC_File = CopyOperation.SourceFile.NameC
      IF szC_File = ""
         MessageSend( vSubtask, "ZO00137", "Dialog Maintenance",
                      "C Source File Name is required.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
         SetFocusToCtrl( vSubtask, "edC_File" )
         DropView( vDialog_Copy )
         RETURN -2
      ELSE
         // exists a VML File by that Name?
         SET CURSOR FIRST vDialog_Copy.SourceFile
                    WHERE vDialog_Copy.SourceFile.LanguageType = "V" AND
                          vDialog_Copy.SourceFile.Name = szC_File
         IF RESULT >= zCURSOR_SET
            MessageSend( vSubtask, "ZO00137", "Dialog Maintenance",
                         "A VML Source File already exists by that name.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
            SetFocusToCtrl( vSubtask, "edC_File" )
            DropView( vDialog_Copy )
            RETURN -1
         END
      END
   END

   // if VML and C File identical?
   IF GetCtrlState( vSubtask, "edVML_File", zCONTROL_STATUS_ENABLED ) = 1
      AND GetCtrlState( vSubtask, "edC_File", zCONTROL_STATUS_ENABLED ) = 1
      AND szVML_File = szC_File
         MessageSend( vSubtask, "ZO00137", "Dialog Maintenance",
                      "VML and C Source File Name are identical.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( vSubtask, zWAB_StayOnWindow, 0, 0 )
         SetFocusToCtrl( vSubtask, "edVML_File" )
         DropView( vDialog_Copy )
         RETURN -2
   END

   DropView( vDialog_Copy )
   RETURN 0
END



/*************************************************************************************************
**
**    OPERATION: SEL_CLONE_GenerateSourceFileName
**
**
*************************************************************************************************/
LOCAL OPERATION
SEL_CLONE_GenerateSourceFileName( VIEW vSubtask,
                                  VIEW vTargetDialog BASED ON LOD TZWDLGSO,
                                  STRING ( 32 ) szControlTag,
                                  STRING ( 32 ) szFileName )
   STRING ( 3 )  szIndex
   STRING ( 32 ) szVMLControl
   SHORT         nPosition
   SHORT         nIndex
   SHORT         nRC

   VIEW CopyOperation REGISTERED AS CopyOperation

   IF vTargetDialog.SourceFile DOES not EXIST AND szControlTag = "edVML_File"
      szFileName = vTargetDialog.Dialog.Tag
      RETURN 0
   END

   nPosition = 0
   nIndex    = 1

   LOOP
      szFileName = vTargetDialog.Dialog.Tag
      nPosition = zstrlen( szFileName )
      IF nPosition > 6
         nPosition = 6
      END

      zltoa( nIndex, szIndex )
      IF nIndex < 10
         szFileName[1 + nPosition:1] = "_"
         szFileName[2 + nPosition:1] = szIndex
      ELSE
         IF nPosition = 6
            nPosition = nPosition - 1
         END
         szFileName[1 + nPosition] = "_"
         szFileName[2 + nPosition:2] = szIndex
      END

      nIndex = nIndex + 1

      nRC = SetCursorFirstEntityByString( vTargetDialog, "SourceFile",
                                          "Name", szFileName, "" )

      // if this Name identical with VML File Name
      IF szControlTag = "edC_File"
         szVMLControl = CopyOperation.SourceFile.NameVML
         IF szVMLControl = szFileName
            nRC = zCURSOR_SET
         END
      END

   UNTIL nRC < zCURSOR_SET

   RETURN 0
END

/*************************************************************************************************
**
**    OPERATION: DIALOG_Compare
**
*************************************************************************************************/
DIALOG OPERATION
DIALOG_Compare( VIEW ViewToWindow )

   VIEW TargetDialog     REGISTERED AS TZWINDOW
   VIEW TargetDialogRoot BASED ON LOD  TZWDLGSO
   VIEW SourceDialog     BASED ON LOD  TZWDLGSO
   VIEW SourceDialogRoot BASED ON LOD  TZWDLGSO
   VIEW TaskLPLR         REGISTERED AS TaskLPLR
   STRING ( 500 ) szConcatenatedControlTag
   STRING ( 200 ) szFileName
   STRING ( 1 )   szWindowDifferenceFlag
   SHORT          nRC

   // Activate the Source Dialog and compare it to the Dialog in memory by the same name.
   GET VIEW TargetDialog NAMED "TZWINDOWL"
   szFileName = TaskLPLR.LPLR.wFullyQualifiedDirectoryName + "\\" + TargetDialog.Dialog.Tag + ".PWD"
   nRC = ActivateOI_FromFile( SourceDialog, "TZWDLGSO", ViewToWindow, szFileName, zSINGLE )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Compare Dialogs",
                   "Invalid File Name",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END
   NAME VIEW SourceDialog "SourceDialog"
   NAME VIEW TargetDialog "TargetDialog"

   // Compare source and target Dialogs.
   CreateViewFromView( TargetDialogRoot, TargetDialog )
   NAME VIEW TargetDialogRoot "TargetDialogRoot"
   FOR EACH TargetDialogRoot.DisplayCompareResult
      DELETE ENTITY TargetDialogRoot.DisplayCompareResult NONE
   END
   CreateViewFromView( SourceDialogRoot, SourceDialog )
   NAME VIEW SourceDialogRoot "SourceDialogRoot"

   // Compare Source to Target
   FOR EACH SourceDialog.Window //WHERE SourceDialog.Window.Tag = "StudentDetail"
      CREATE ENTITY TargetDialogRoot.DisplayCompareResult
      TargetDialogRoot.DisplayCompareResult.SourceWindowName = SourceDialog.Window.Tag
      SET CURSOR FIRST TargetDialog.Window WHERE TargetDialog.Window.Tag = SourceDialog.Window.Tag
      IF RESULT >= zCURSOR_SET

         TargetDialogRoot.DisplayCompareResult.TargetWindowName = SourceDialog.Window.Tag

         // There is a Target Window by the same name, so compare controls.
         szWindowDifferenceFlag = ""    // Start indicating no difference.
         FOR EACH SourceDialog.Control
            SET CURSOR FIRST TargetDialog.Control WHERE TargetDialog.Control.Tag = SourceDialog.Control.Tag
            IF RESULT < zCURSOR_SET
               // There is a difference, so just stop with the difference.
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.SourceControlTag = SourceDialog.Control.Tag
               DIALOG_CompareNewControlSrc( TargetDialogRoot, SourceDialog )
            ELSE

               // There is a match by Control Tag, so continue compare.
               szConcatenatedControlTag = ""    // Concatenated Name just starts out null.
               CompareControlRecursiveSrc( TargetDialog,
                                           SourceDialog,
                                           TargetDialogRoot,
                                           SourceDialogRoot,
                                           szWindowDifferenceFlag,
                                           szConcatenatedControlTag )

            END
         END

      ELSE
         // There is no corresponding Target window.
         szWindowDifferenceFlag = "Y"
         TargetDialogRoot.DisplayCompareResult.TargetWindowName = "(No Target Window)"
      END

      IF szWindowDifferenceFlag = ""
         // The corresponding Target window matches the source.
         TargetDialogRoot.DisplayCompareResult.TargetWindowName = "(Matching Target Window)"
      END
   END

   // Create Display enties that define boundary of Source and Target compares.
   CREATE ENTITY TargetDialogRoot.DisplayCompareResult
   CREATE ENTITY TargetDialogRoot.DisplayCompareResult
   TargetDialogRoot.DisplayCompareResult.SourceWindowName = "**** Target Compare ****"
   CREATE ENTITY TargetDialogRoot.DisplayCompareResult

   // Compare Target to Source
   FOR EACH TargetDialog.Window
      CREATE ENTITY TargetDialogRoot.DisplayCompareResult
      TargetDialogRoot.DisplayCompareResult.TargetWindowName = TargetDialog.Window.Tag
      SET CURSOR FIRST SourceDialog.Window WHERE SourceDialog.Window.Tag = TargetDialog.Window.Tag
      IF RESULT >= zCURSOR_SET

         TargetDialogRoot.DisplayCompareResult.SourceWindowName = TargetDialog.Window.Tag

         // There is a Source Window by the same name, so compare controls.
         szWindowDifferenceFlag = ""    // Start indicating no difference.
         FOR EACH TargetDialog.Control
            SET CURSOR FIRST SourceDialog.Control WHERE SourceDialog.Control.Tag = TargetDialog.Control.Tag
            IF RESULT < zCURSOR_SET
               // There is a difference, so just stop with the difference.
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.TargetControlTag = TargetDialog.Control.Tag
               DIALOG_CompareNewControlTgt( TargetDialogRoot, TargetDialog )
            ELSE

               // There is a match by Control Tag, so continue compare.
               szConcatenatedControlTag = ""    // Concatenated Name just starts out null.
               CompareControlRecursiveTgt( TargetDialog,
                                           SourceDialog,
                                           TargetDialogRoot,
                                           SourceDialogRoot,
                                           szWindowDifferenceFlag,
                                           szConcatenatedControlTag )

            END
         END

      ELSE
         // There is no corresponding Source window.
         szWindowDifferenceFlag = "Y"
         TargetDialogRoot.DisplayCompareResult.SourceWindowName = "(No Source Window)"
      END

      IF szWindowDifferenceFlag = ""
         // The corresponding Source window matches the Target.
         TargetDialogRoot.DisplayCompareResult.SourceWindowName = "(Matching Source Window)"
      END
   END

   DropView( TargetDialogRoot )

END

/*************************************************************************************************
**
**    OPERATION: CompareControlRecursiveSrc
**
*************************************************************************************************/
LOCAL OPERATION
CompareControlRecursiveSrc( VIEW TargetDialog     BASED ON LOD  TZWDLGSO,
                            VIEW SourceDialog     BASED ON LOD  TZWDLGSO,
                            VIEW TargetDialogRoot BASED ON LOD  TZWDLGSO,
                            VIEW SourceDialogRoot BASED ON LOD  TZWDLGSO,
                            STRING ( 1 )   szWindowDifferenceFlag,
                            STRING ( 500 ) szConcatenatedControlTag )

   STRING ( 500 ) szNewConcatenatedControlTag
   STRING ( 500 ) szNewConcatenatedSubControlTag

   // Compare two Controls as a recursive subobject.

   // The concatenated name is the prior name plus the current name.
   IF szConcatenatedControlTag = ""
      szNewConcatenatedControlTag = SourceDialog.Control.Tag
   ELSE
      szNewConcatenatedControlTag = szConcatenatedControlTag + "/" + SourceDialog.Control.Tag
   END

   // First look for subcontrol.
   IF SourceDialog.CtrlCtrl EXISTS
      IF TargetDialog.CtrlCtrl EXISTS
         // There is a matching subcontrol, so go down one level and look for match.
         SetViewToSubobject( SourceDialog, "CtrlCtrl" )
         SetViewToSubobject( TargetDialog, "CtrlCtrl" )
         FOR EACH SourceDialog.Control
            SET CURSOR FIRST TargetDialog.Control WHERE TargetDialog.Control.Tag = SourceDialog.Control.Tag
            IF RESULT < zCURSOR_SET
               // There is a difference, so just stop with the difference.
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               szNewConcatenatedSubControlTag = szNewConcatenatedControlTag + "/" + SourceDialog.Control.Tag
               TargetDialogRoot.DisplayCompareResult.SourceControlTag = szNewConcatenatedSubControlTag
               DIALOG_CompareNewControlSrc( TargetDialogRoot, SourceDialog )
            ELSE

               // There is a match by Control Tag, so continue compare.
               CompareControlRecursiveSrc( TargetDialog,
                                           SourceDialog,
                                           TargetDialogRoot,
                                           SourceDialogRoot,
                                           szWindowDifferenceFlag,
                                           szNewConcatenatedControlTag )

            END
         END
         ResetViewFromSubobject( SourceDialog )
         ResetViewFromSubobject( TargetDialog )

      ELSE
         // There is no subcontrol match, so show difference.
         szWindowDifferenceFlag = "Y"
         CREATE ENTITY TargetDialogRoot.DisplayCompareResult
         TargetDialogRoot.DisplayCompareResult.SourceControlTag = szNewConcatenatedControlTag
      END
   ELSE
      // There is no subcontrol, so look for match on Control characteristics of Type, Mapping and Action.

      // Type
      IF SourceDialog.ControlDef.Tag != TargetDialog.ControlDef.Tag
         szWindowDifferenceFlag = "Y"
         CREATE ENTITY TargetDialogRoot.DisplayCompareResult
         TargetDialogRoot.DisplayCompareResult.SourceControlTag  = szNewConcatenatedControlTag
         TargetDialogRoot.DisplayCompareResult.TargetControlTag  = szNewConcatenatedControlTag
         TargetDialogRoot.DisplayCompareResult.SourceControlType = SourceDialog.ControlDef.Tag

      ELSE

         // Text
         IF SourceDialog.ControlDef.Tag = "Text"
            IF SourceDialog.Control.Text != TargetDialog.Control.Text
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = QUOTES + SourceDialog.Control.Text + QUOTES
               TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = QUOTES + TargetDialog.Control.Text + QUOTES
            END
         END

         // Entity Only Mapping
         IF SourceDialog.CtrlMapLOD_Entity EXISTS
            SET CURSOR FIRST TargetDialog.CtrlMapLOD_Entity WITHIN TargetDialog.Control
                       WHERE TargetDialog.CtrlMapLOD_Entity.Name = SourceDialog.CtrlMapLOD_Entity.Name
            IF RESULT < zCURSOR_SET
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapView.Name + "." +
                                                                               SourceDialog.CtrlMapLOD_Entity.Name
               TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapView.Name + "." +
                                                                               TargetDialog.CtrlMapLOD_Entity.Name
            END
         END

         // Entity/Attribute Mapping
         IF SourceDialog.CtrlMapLOD_Attribute EXISTS
            IF TargetDialog.CtrlMapLOD_Attribute EXISTS
               // Both Source and Target have mapping.
               SET CURSOR FIRST TargetDialog.CtrlMapLOD_Attribute WITHIN TargetDialog.Control
                          WHERE TargetDialog.CtrlMapER_Attribute.Name  = SourceDialog.CtrlMapER_Attribute.Name
                            AND TargetDialog.CtrlMapRelatedEntity.Name = SourceDialog.CtrlMapRelatedEntity.Name
               IF RESULT < zCURSOR_SET OR TargetDialog.CtrlMapView.Name != SourceDialog.CtrlMapView.Name
                  szWindowDifferenceFlag = "Y"
                  CREATE ENTITY TargetDialogRoot.DisplayCompareResult
                  TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapView.Name + "." +
                                                                                  SourceDialog.CtrlMapRelatedEntity.Name + "." +
                                                                                  SourceDialog.CtrlMapER_Attribute.Name
                  TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapView.Name + "." +
                                                                                  TargetDialog.CtrlMapRelatedEntity.Name + "." +
                                                                                  TargetDialog.CtrlMapER_Attribute.Name
               END
            ELSE
               // The Source has mapping but the Target does not.
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapView.Name + "." +
                                                                               SourceDialog.CtrlMapRelatedEntity.Name + "." +
                                                                               SourceDialog.CtrlMapER_Attribute.Name
            END
         END

         // Action
         IF SourceDialog.EventAct EXISTS
            SET CURSOR FIRST TargetDialog.EventAct WHERE TargetDialog.EventAct.Tag        = SourceDialog.EventAct.Tag
                                                     AND TargetDialog.EventAct.DialogName = SourceDialog.EventAct.DialogName
                                                     AND TargetDialog.EventAct.WindowName = SourceDialog.EventAct.WindowName
            IF RESULT >= zCURSOR_SET
               SET CURSOR FIRST SourceDialogRoot.Action WITHIN SourceDialogRoot.Dialog
                          WHERE SourceDialogRoot.Action.ZKey = SourceDialog.EventAct.ZKey
               SET CURSOR FIRST TargetDialogRoot.Action WITHIN TargetDialogRoot.Dialog
                          WHERE TargetDialogRoot.Action.ZKey = TargetDialog.EventAct.ZKey
               IF SourceDialogRoot.ActOpt EXISTS
                  SET CURSOR FIRST TargetDialogRoot.ActOpt WHERE TargetDialogRoot.ActOpt.Tag = SourceDialogRoot.ActOpt.Tag
                  IF RESULT < zCURSOR_SET
                     // New or Different Action
                     szWindowDifferenceFlag = "Y"
                     CREATE ENTITY TargetDialogRoot.DisplayCompareResult
                     TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
                     TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
                     TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialogRoot.ActOpt.Tag
                     TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialogRoot.ActOpt.Tag
                  END
               END
               IF SourceDialogRoot.Action.DialogName != TargetDialogRoot.Action.DialogName OR
                  SourceDialogRoot.Action.WindowName != TargetDialogRoot.Action.WindowName

                  // Different transfer window.
                  szWindowDifferenceFlag = "Y"
                  CREATE ENTITY TargetDialogRoot.DisplayCompareResult
                  TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialogRoot.Action.WindowName
                  TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialogRoot.Action.WindowName
               END
            ELSE
               // New Action
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.EventAct.Tag
            END

         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: CompareControlRecursiveTgt
**
*************************************************************************************************/
LOCAL OPERATION
CompareControlRecursiveTgt( VIEW TargetDialog     BASED ON LOD  TZWDLGSO,
                            VIEW SourceDialog     BASED ON LOD  TZWDLGSO,
                            VIEW TargetDialogRoot BASED ON LOD  TZWDLGSO,
                            VIEW SourceDialogRoot BASED ON LOD  TZWDLGSO,
                            STRING ( 1 )   szWindowDifferenceFlag,
                            STRING ( 500 ) szConcatenatedControlTag )

   STRING ( 500 ) szNewConcatenatedControlTag
   STRING ( 500 ) szNewConcatenatedSubControlTag

   // Compare two Controls as a recursive subobject.

   // The concatenated name is the prior name plus the current name.
   IF szConcatenatedControlTag = ""
      szNewConcatenatedControlTag = SourceDialog.Control.Tag
   ELSE
      szNewConcatenatedControlTag = szConcatenatedControlTag + "/" + SourceDialog.Control.Tag
   END

   // First look for subcontrol.
   IF TargetDialog.CtrlCtrl EXISTS
      IF SourceDialog.CtrlCtrl EXISTS
         // There is a matching subcontrol, so go down one level and look for match.
         SetViewToSubobject( TargetDialog, "CtrlCtrl" )
         SetViewToSubobject( SourceDialog, "CtrlCtrl" )
         FOR EACH TargetDialog.Control
            SET CURSOR FIRST SourceDialog.Control WHERE SourceDialog.Control.Tag = TargetDialog.Control.Tag
            IF RESULT < zCURSOR_SET
               // There is a difference, so just stop with the difference.
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               szNewConcatenatedSubControlTag = szNewConcatenatedControlTag + "/" + TargetDialog.Control.Tag
               TargetDialogRoot.DisplayCompareResult.TargetControlTag = szNewConcatenatedSubControlTag
               DIALOG_CompareNewControlTgt( TargetDialogRoot, TargetDialog )
            ELSE

               // There is a match by Control Tag, so continue compare.
               CompareControlRecursiveTgt( TargetDialog,
                                           SourceDialog,
                                           TargetDialogRoot,
                                           SourceDialogRoot,
                                           szWindowDifferenceFlag,
                                           szNewConcatenatedControlTag )

            END
         END
         ResetViewFromSubobject( TargetDialog )
         ResetViewFromSubobject( SourceDialog )

      ELSE
         // There is no subcontrol match, so show difference.
         szWindowDifferenceFlag = "Y"
         CREATE ENTITY TargetDialogRoot.DisplayCompareResult
         TargetDialogRoot.DisplayCompareResult.TargetControlTag = szNewConcatenatedControlTag
      END
   ELSE
      // There is no subcontrol, so look for match on Control characteristics of Type, Mapping and Action.

      // Type
      IF TargetDialog.ControlDef.Tag != SourceDialog.ControlDef.Tag
         szWindowDifferenceFlag = "Y"
         CREATE ENTITY TargetDialogRoot.DisplayCompareResult
         TargetDialogRoot.DisplayCompareResult.TargetControlTag  = szNewConcatenatedControlTag
         TargetDialogRoot.DisplayCompareResult.TargetControlTag  = szNewConcatenatedControlTag
         TargetDialogRoot.DisplayCompareResult.TargetControlType = TargetDialog.ControlDef.Tag

      ELSE

         // Text
         IF TargetDialog.ControlDef.Tag = "Text"
            IF TargetDialog.Control.Text != SourceDialog.Control.Text
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = QUOTES + TargetDialog.Control.Text + QUOTES
               TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = QUOTES + SourceDialog.Control.Text + QUOTES
            END
         END

         // Entity Only Mapping
         IF TargetDialog.CtrlMapLOD_Entity EXISTS
            SET CURSOR FIRST SourceDialog.CtrlMapLOD_Entity WITHIN SourceDialog.Control
                       WHERE SourceDialog.CtrlMapLOD_Entity.Name = TargetDialog.CtrlMapLOD_Entity.Name
            IF RESULT < zCURSOR_SET
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapView.Name + "." +
                                                                               TargetDialog.CtrlMapLOD_Entity.Name
               TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapView.Name + "." +
                                                                               SourceDialog.CtrlMapLOD_Entity.Name
            END
         END

         // Entity/Attribute Mapping
         IF TargetDialog.CtrlMapLOD_Attribute EXISTS
            IF SourceDialog.CtrlMapLOD_Attribute EXISTS
               // Both Target and Source have mapping.
               SET CURSOR FIRST SourceDialog.CtrlMapLOD_Attribute WITHIN SourceDialog.Control
                          WHERE SourceDialog.CtrlMapER_Attribute.Name  = TargetDialog.CtrlMapER_Attribute.Name
                            AND SourceDialog.CtrlMapRelatedEntity.Name = TargetDialog.CtrlMapRelatedEntity.Name
               IF RESULT < zCURSOR_SET OR TargetDialog.CtrlMapView.Name != SourceDialog.CtrlMapView.Name
                  szWindowDifferenceFlag = "Y"
                  CREATE ENTITY TargetDialogRoot.DisplayCompareResult
                  TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapView.Name + "." +
                                                                                  TargetDialog.CtrlMapRelatedEntity.Name + "." +
                                                                                  TargetDialog.CtrlMapER_Attribute.Name
                  TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapView.Name + "." +
                                                                                  SourceDialog.CtrlMapRelatedEntity.Name + "." +
                                                                                  SourceDialog.CtrlMapER_Attribute.Name
               END
            ELSE
               // The Target has mapping but the Source does not.
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapView.Name + "." +
                                                                               TargetDialog.CtrlMapRelatedEntity.Name + "." +
                                                                               TargetDialog.CtrlMapER_Attribute.Name
            END
         END

         // Action
         IF TargetDialog.EventAct EXISTS
            SET CURSOR FIRST SourceDialog.EventAct WHERE SourceDialog.EventAct.Tag        = TargetDialog.EventAct.Tag
                                                     AND SourceDialog.EventAct.DialogName = TargetDialog.EventAct.DialogName
                                                     AND SourceDialog.EventAct.WindowName = TargetDialog.EventAct.WindowName
            IF RESULT >= zCURSOR_SET
               SET CURSOR FIRST SourceDialogRoot.Action WITHIN SourceDialogRoot.Dialog
                          WHERE SourceDialogRoot.Action.ZKey = SourceDialog.EventAct.ZKey
               SET CURSOR FIRST TargetDialogRoot.Action WITHIN TargetDialogRoot.Dialog
                          WHERE TargetDialogRoot.Action.ZKey = TargetDialog.EventAct.ZKey
               IF TargetDialogRoot.ActOpt EXISTS
                  SET CURSOR FIRST SourceDialogRoot.ActOpt WHERE SourceDialogRoot.ActOpt.Tag = TargetDialogRoot.ActOpt.Tag
                  IF RESULT < zCURSOR_SET
                     // New or Different Action
                     szWindowDifferenceFlag = "Y"
                     CREATE ENTITY TargetDialogRoot.DisplayCompareResult
                     TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
                     TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
                     TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialogRoot.ActOpt.Tag
                     TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialogRoot.ActOpt.Tag
                  END
               END
               IF SourceDialogRoot.Action.DialogName != TargetDialogRoot.Action.DialogName OR
                  SourceDialogRoot.Action.WindowName != TargetDialogRoot.Action.WindowName

                  // Different transfer window.
                  szWindowDifferenceFlag = "Y"
                  CREATE ENTITY TargetDialogRoot.DisplayCompareResult
                  TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
                  TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialogRoot.Action.WindowName
                  TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialogRoot.Action.WindowName
               END
            ELSE
               // New Action
               szWindowDifferenceFlag = "Y"
               CREATE ENTITY TargetDialogRoot.DisplayCompareResult
               TargetDialogRoot.DisplayCompareResult.TargetControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.SourceControlTag        = szNewConcatenatedControlTag
               TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.EventAct.Tag
            END

         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: PostbuildExternalDialogOpen
**
*************************************************************************************************/
DIALOG OPERATION
PostbuildExternalDialogOpen( VIEW ViewToWindow )

   VIEW TaskLPLR REGISTERED AS TaskLPLR

   // If the file name work attribute is null, prefill it from the directory name that was used
   // in compare.

   IF TaskLPLR.LPLR.wFullyQualifiedFileName = ""
      TaskLPLR.LPLR.wFullyQualifiedFileName = TaskLPLR.LPLR.wFullyQualifiedDirectoryName
   END

END

/*************************************************************************************************
**
**    OPERATION: OPEN_ExternalDialog
**
*************************************************************************************************/
DIALOG OPERATION
OPEN_ExternalDialog( VIEW ViewToWindow )

   VIEW ExternalDialog  BASED ON LOD  TZWDLGSO
   VIEW ExternalDialog2 BASED ON LOD  TZWDLGSO
   VIEW TaskLPLR        REGISTERED AS TaskLPLR
   STRING ( 200 ) szFileName
   SHORT          nRC

   // Activate the Source Dialog and compare it to the Dialog in memory by the same name.
   szFileName = TaskLPLR.LPLR.wFullyQualifiedFileName
   nRC = ActivateOI_FromFile( ExternalDialog, "TZWDLGSO", ViewToWindow, szFileName, zSINGLE )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Open External Dialog",
                   "Invalid File Name",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -1
   END
   NAME VIEW ExternalDialog "TZWINDOW"
   CreateViewFromView( ExternalDialog2, ExternalDialog )
   NAME VIEW ExternalDialog2 "TZWINDOWL"
   CreateViewFromView( ExternalDialog2, ExternalDialog )
   NAME VIEW ExternalDialog2 "TZWINOPT"

END

/*************************************************************************************************
**
**    OPERATION: DIALOG_CompareNewControlSrc
**
*************************************************************************************************/
LOCAL OPERATION
DIALOG_CompareNewControlSrc( VIEW TargetDialogRoot BASED ON LOD  TZWDLGSO,
                             VIEW SourceDialog     BASED ON LOD  TZWDLGSO )

   // For a new Control, set compare values to diaplay.
   TargetDialogRoot.DisplayCompareResult.SourceControlType = SourceDialog.ControlDef.Tag
   IF SourceDialog.ControlDef.Tag = "Text" OR SourceDialog.ControlDef.Tag = "GroupBox"
      TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = QUOTES + SourceDialog.Control.Text + QUOTES
   END

   // Entity Only Mapping
   IF SourceDialog.CtrlMapLOD_Entity EXISTS
      TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapLOD_Entity.Name
   END

   // Entity/Attribute Mapping
   IF SourceDialog.CtrlMapLOD_Attribute EXISTS
      TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.CtrlMapView.Name + "." +
                                                                      SourceDialog.CtrlMapRelatedEntity.Name + "." +
                                                                      SourceDialog.CtrlMapER_Attribute.Name
   END

   // Action
   IF SourceDialog.EventAct EXISTS
      TargetDialogRoot.DisplayCompareResult.SourceMappingActionName = SourceDialog.EventAct.Tag
   END

END

/*************************************************************************************************
**
**    OPERATION: DIALOG_CompareNewControlTgt
**
*************************************************************************************************/
LOCAL OPERATION
DIALOG_CompareNewControlTgt( VIEW TargetDialogRoot BASED ON LOD  TZWDLGSO,
                             VIEW TargetDialog     BASED ON LOD  TZWDLGSO )

   // For a new Control, set compare values to diaplay.
   TargetDialogRoot.DisplayCompareResult.TargetControlType = TargetDialog.ControlDef.Tag
   IF TargetDialog.ControlDef.Tag = "Text" OR TargetDialog.ControlDef.Tag = "GroupBox"
      TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = QUOTES + TargetDialog.Control.Text + QUOTES
   END

   // Entity Only Mapping
   IF TargetDialog.CtrlMapLOD_Entity EXISTS
      TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapLOD_Entity.Name
   END

   // Entity/Attribute Mapping
   IF TargetDialog.CtrlMapLOD_Attribute EXISTS
      TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.CtrlMapView.Name + "." +
                                                                      TargetDialog.CtrlMapRelatedEntity.Name + "." +
                                                                      TargetDialog.CtrlMapER_Attribute.Name
   END

   // Action
   IF TargetDialog.EventAct EXISTS
      TargetDialogRoot.DisplayCompareResult.TargetMappingActionName = TargetDialog.EventAct.Tag
   END

END

