
/*************************************************************************************************
**
**    OPERATION: SELECT_VOR_ForAutodesign
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_VOR_ForAutodesign( VIEW ViewToWindow )

   VIEW SelectedLOD BASED ON LOD TZZOLODO
   VIEW TZWINDOWL   BASED ON LOD TZWDLGSO
   VIEW TZADCSDO    BASED ON LOD TZADCSDO
   VIEW AD_Base     BASED ON LOD TZWDLGSO
   SHORT nRC

   // For the selected view under the AutoDesign Group, initialie a UI Spec for and create the list of selectable entities.

   GET VIEW TZWINDOWL NAMED "TZWINDOWL"
   nRC = ActivateMetaOI_ByZKey( ViewToWindow, SelectedLOD, 0, zREFER_LOD_META, zSINGLE, TZWINDOWL.AD_GroupViewObjRefLOD.ZKey, 0 )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "The Lod Object could not be read.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -2
   END
   NAME VIEW SelectedLOD "AutodesignSelectedLOD"

   GET VIEW TZADCSDO NAMED "TZADCSDO"
   IF RESULT >= 0
      DropObjectInstance( TZADCSDO )
   END

   ActivateEmptyMetaOI( ViewToWindow, TZADCSDO, zSOURCE_UIS_META, zSINGLE )
   NAME VIEW TZADCSDO "TZADCSDO"
   CREATE ENTITY TZADCSDO.UI_Spec

   // Build Potential Flat List of entities.
   FOR EACH SelectedLOD.LOD_Entity
      CREATE ENTITY TZADCSDO.FlatListPotentialTopEntity
      SetMatchingAttributesByName( TZADCSDO, "FlatListPotentialTopEntity", SelectedLOD, "LOD_Entity", zSET_ALL )
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_TopEntityForAutodesign
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_TopEntityForAutodesign( VIEW ViewToWindow )

   VIEW TZADCSDO    REGISTERED AS TZADCSDO
   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW SelectedLOD BASED ON LOD  TZZOLODO
   STRING ( 32 ) szTopEntityName
   SHORT         ReturnedLevel
   SHORT         nRC

   // Create a new selected Entity.
   IF TZADCSDO.FlatListSelectedEntity EXISTS
      DELETE ENTITY TZADCSDO.FlatListSelectedEntity
   END
   CREATE ENTITY TZADCSDO.FlatListSelectedEntity
   SetMatchingAttributesByName( TZADCSDO, "FlatListSelectedEntity", TZADCSDO, "FlatListPotentialTopEntity", zSET_ALL )
   TZWINDOWL.AutoDesignGroup.TopLevelEntityName = TZADCSDO.FlatListSelectedEntity.Name

   // Clear any existing selections.
   FOR EACH TZADCSDO.FlatListPotentialAttribute
      DELETE ENTITY TZADCSDO.FlatListPotentialAttribute NONE
   END
   FOR EACH TZADCSDO.FlatListSelectedAttribute
      DELETE ENTITY TZADCSDO.FlatListSelectedAttribute NONE
   END

   // Build list of potential attributes to be selected. This will contain all subobject entities/attributes for
   // the selected Top Entity.
   GET VIEW SelectedLOD NAMED "AutodesignSelectedLOD"
   SET CURSOR FIRST SelectedLOD.LOD_EntityParent
   szTopEntityName = TZADCSDO.FlatListSelectedEntity.Name
   LocateTopEntityRecurs( TZADCSDO, SelectedLOD, szTopEntityName )

   // Include entity under.
   IF TZWINDOWL.AD_GroupLOD_Entity EXISTS
      EXCLUDE TZWINDOWL.AD_GroupLOD_Entity
   END
   SET CURSOR FIRST SelectedLOD.LOD_Entity WHERE SelectedLOD.LOD_Entity.Name = TZADCSDO.FlatListPotentialTopEntity.Name
   INCLUDE TZWINDOWL.AD_GroupLOD_Entity FROM SelectedLOD.LOD_Entity

END

/*************************************************************************************************
**
**    OPERATION: LocateTopEntityRecurs
**
*************************************************************************************************/
LOCAL OPERATION
LocateTopEntityRecurs( VIEW TZADCSDO    BASED ON LOD TZADCSDO,
                       VIEW SelectedLOD BASED ON LOD TZZOLODO,
                       STRING ( 32 ) szTopEntityName )

   // Search each LOD_EntityParent recursively until the entity identified by TopEntityName is located.
   // Then process that subobject to create the FlatListPotentialAttribute entries in TZADCSDO.
   FOR EACH SelectedLOD.LOD_EntityParent
      IF SelectedLOD.LOD_EntityParent.Name = szTopEntityName
         // We've got a match on Top Entity, so go to process the subobject creating FlatListPotentialAttribute entries.
         BuildAutodesignGroupPotList( TZADCSDO, SelectedLOD, 0 )
      ELSE
         // This isn't a match on Top Entity, so continue recursive search.
         SetViewToSubobject( SelectedLOD, "LOD_EntityChild" )
         LocateTopEntityRecurs( TZADCSDO, SelectedLOD, szTopEntityName )
         ResetViewFromSubobject( SelectedLOD )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: BuildAutodesignGroupPotList
**
*************************************************************************************************/
LOCAL OPERATION
BuildAutodesignGroupPotList( VIEW TZADCSDO    BASED ON LOD TZADCSDO,
                             VIEW SelectedLOD BASED ON LOD TZZOLODO,
                             INTEGER lLevel )

   STRING ( 32 ) szAttributeName
   STRING ( 32 ) szDomainName
   STRING ( 21 ) szLeadingSpaces
   STRING ( 21 ) szIndentSpaces
   STRING ( 90 ) szPromptText

   // Build the FlatListPotentialAttribute entries from the subobject starting with LOD_EntityParent.
   CREATE ENTITY TZADCSDO.FlatListPotentialAttribute
   IF lLevel = 0
      szIndentSpaces = ""
   ELSE
      szLeadingSpaces = "                     "
      szIndentSpaces = szLeadingSpaces[1:lLevel]
   END
   TZADCSDO.FlatListPotentialAttribute.EntityName       = SelectedLOD.LOD_EntityParent.Name
   TZADCSDO.FlatListPotentialAttribute.IndentEntityName = szIndentSpaces + SelectedLOD.LOD_EntityParent.Name
   SetMatchingAttributesByName( TZADCSDO, "FlatListPotentialAttribute", SelectedLOD, "LOD_EntityParent", zSET_ALL )

   FOR EACH SelectedLOD.LOD_AttributeRec
      CREATE ENTITY TZADCSDO.FlatListPotentialAttribute
      szAttributeName = SelectedLOD.ER_AttributeRec.Name
      szDomainName    = SelectedLOD.DomainRec.Name
      SetMatchingAttributesByName( TZADCSDO, "FlatListPotentialAttribute", SelectedLOD, "LOD_EntityParent", zSET_ALL )
      TZADCSDO.FlatListPotentialAttribute.EntityName    = SelectedLOD.LOD_EntityParent.Name
      TZADCSDO.FlatListPotentialAttribute.AttributeName = szAttributeName

      // Create Control Type based on Update characteristic of Entity and Domain.
      // A Domain of Y/N will create a Checkbox even if the entity is not updatable.
      IF SelectedLOD.DomainRec.Name = "Y/N"
         // Domain is Y/N.
         TZADCSDO.FlatListPotentialAttribute.ControlType   = "CheckBox"
      ELSE
         IF TZADCSDO.FlatListPotentialTopEntity.Update = "Y"
            IF SelectedLOD.DomainRec.Name = "Date" OR SelectedLOD.DomainRec.Name = "DateTime"
               // A Domain of Date will make the control a Calendar.
               TZADCSDO.FlatListPotentialAttribute.ControlType   = "Calendar"
            ELSE
               IF SelectedLOD.DomainRec.DomainType = "T"
                  // The Domain is a table, so make control a Combobox.
                  TZADCSDO.FlatListPotentialAttribute.ControlType   = "ComboBox"
               ELSE
                  // If not a table, make control an Editbox.
                  TZADCSDO.FlatListPotentialAttribute.ControlType   = "EditBox"
               END
            END
         ELSE
            // The entity is not updatable, so Control Type is "Text"
            TZADCSDO.FlatListPotentialAttribute.ControlType   = "Text"
         END
      END

      // The Data Width of each Attribute will depend on Domain Type, as follows.
      IF SelectedLOD.DomainRec.DataType = "S"
         // String length is just length of Domain or Attribute, with a max value of 20 and a minimum of 5.
         IF SelectedLOD.ER_AttributeRec.Lth = ""
            TZADCSDO.FlatListPotentialAttribute.DataWidth = SelectedLOD.DomainRec.MaxStringLth
         ELSE
            TZADCSDO.FlatListPotentialAttribute.DataWidth = SelectedLOD.ER_AttributeRec.Lth
         END
         IF TZADCSDO.FlatListPotentialAttribute.DataWidth > 20
            TZADCSDO.FlatListPotentialAttribute.DataWidth = 20
         ELSE
            IF TZADCSDO.FlatListPotentialAttribute.DataWidth < 5
               TZADCSDO.FlatListPotentialAttribute.DataWidth = 5
            END
         END
      ELSE
      IF SelectedLOD.DomainRec.DataType = "L" OR SelectedLOD.DomainRec.DataType = "M"
         // Integer or Decimal length is 8.
         TZADCSDO.FlatListPotentialAttribute.DataWidth = 8
      ELSE
      IF SelectedLOD.DomainRec.DataType = "D" OR SelectedLOD.DomainRec.DataType = "T" OR SelectedLOD.DomainRec.DataType = "I"
         // Date, DateTime or Time length is 10.
         TZADCSDO.FlatListPotentialAttribute.DataWidth = 10
      ELSE
         // Anything else is 10.
         TZADCSDO.FlatListPotentialAttribute.DataWidth = 10
      END
      END
      END

      // Prompt Value is Attribute Name.
      InsertSpacesInPrompt( szPromptText, TZADCSDO, szAttributeName, 100 )
      TZADCSDO.FlatListPotentialAttribute.PromptValue = szPromptText
   END

   // Process subentities.
   FOR EACH SelectedLOD.LOD_EntityChild
      SetViewToSubobject( SelectedLOD, "LOD_EntityChild" )
      lLevel = lLevel + 3
      BuildAutodesignGroupPotList( TZADCSDO, SelectedLOD, lLevel )
      ResetViewFromSubobject( SelectedLOD )
   END

END

/*************************************************************************************************
**
**    OPERATION: SELECT_PotentialAttributes
**
*************************************************************************************************/
DIALOG OPERATION
SELECT_PotentialAttributes( VIEW ViewToWindow )

   VIEW TZADCSDO  REGISTERED AS TZADCSDO
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZADCSDO2 BASED ON LOD  TZADCSDO
   STRING ( 1 )   szCreateEntityOnlyEntry
   STRING ( 100 ) szTempString
   INTEGER lMaxPromptLength
   INTEGER lPromptLength
   SHORT   nRC

   // First make sure that any currently Selected entry is selected on the Potential side, because we are going to
   // delete Selected entries and recreate them.
   FOR EACH TZADCSDO.FlatListSelectedAttribute
      SET CURSOR FIRST TZADCSDO.FlatListPotentialAttribute
                 WHERE TZADCSDO.FlatListPotentialAttribute.EntityName    = TZADCSDO.FlatListSelectedAttribute.EntityName
                   AND TZADCSDO.FlatListPotentialAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.AttributeName
      SetSelectStateOfEntity( TZADCSDO, "FlatListPotentialAttribute", 1 )
      DELETE ENTITY TZADCSDO.FlatListSelectedAttribute NONE
   END

   // Copy selected attributes from FlatListPotentialAttribute entries to FlatListSelectedAttribute entries.
   CreateViewFromView( TZADCSDO2, TZADCSDO )
   FOR EACH TZADCSDO.FlatListPotentialAttribute
      nRC = GetSelectStateOfEntity( TZADCSDO, "FlatListPotentialAttribute" )
      IF nRC = 1 AND TZADCSDO.FlatListPotentialAttribute.AttributeName != ""   // We will skip Entity only entries, since that
         CREATE ENTITY TZADCSDO.FlatListSelectedAttribute
         SetMatchingAttributesByName( TZADCSDO, "FlatListSelectedAttribute", TZADCSDO, "FlatListPotentialAttribute", zSET_ALL )

         // If this is for an Update Group, add the ":" character at the end of the Prompt.
         IF TZWINDOWL.AutoDesignGroup.GenerateGroupType = "F"
            TZADCSDO.FlatListSelectedAttribute.PromptValue = TZADCSDO.FlatListSelectedAttribute.PromptValue + ":"
         END

         SetSelectStateOfEntity( TZADCSDO, "FlatListPotentialAttribute", 0 )
      END
   END
   DropView( TZADCSDO2 )

   lMaxPromptLength = 0
   FOR EACH TZADCSDO.FlatListSelectedAttribute
      szTempString = TZADCSDO.FlatListSelectedAttribute.PromptValue
      lPromptLength = GetStringLength( szTempString )
      IF lPromptLength > lMaxPromptLength
         lMaxPromptLength = lPromptLength
      END
   END
   TZWINDOWL.AutoDesignGroup.UpdateFieldPromptLength = lMaxPromptLength

END

/*************************************************************************************************
**
**    OPERATION: REMOVE_PotentialAttributes
**
*************************************************************************************************/
DIALOG OPERATION
REMOVE_PotentialAttributes( VIEW ViewToWindow )

   VIEW TZADCSDO  REGISTERED AS TZADCSDO
   VIEW TZADCSDO2 BASED ON LOD TZADCSDO
   STRING ( 1 ) szCreateEntityOnlyEntry
   SHORT nRC

   // Remove any selected Selected entries.
   FOR EACH TZADCSDO.FlatListSelectedAttribute
      nRC = GetSelectStateOfEntity( TZADCSDO, "FlatListSelectedAttribute" )
      IF nRC = 1
         DELETE ENTITY TZADCSDO.FlatListSelectedAttribute NONE
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SAVE_AutoDesignForGroup
**
*************************************************************************************************/
DIALOG OPERATION
SAVE_AutoDesignForGroup( VIEW ViewToWindow )

   VIEW TZADCSDO    BASED ON LOD  TZADCSDO
   VIEW TZWINDOWL   BASED ON LOD  TZWDLGSO
   VIEW TZCONTROL   BASED ON LOD  TZWDLGSO
   VIEW SelectedLOD BASED ON LOD  TZZOLODO
   STRING ( 32 ) szTag
   STRING ( 32 ) szEntityName
   SHORT nRC

   // Make sure that at least one attribute has been selected.
   GET VIEW TZADCSDO NAMED "TZADCSDO"
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "At least one Attribute must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   SET CURSOR FIRST TZADCSDO.FlatListSelectedAttribute WHERE TZADCSDO.FlatListSelectedAttribute.AttributeName != ""
   IF RESULT < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "At least one Attribute must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END

   // Set the AutoDesign attributes in TZWINDOWL from the temporary ones in TZADCSDO.
   GET VIEW TZWINDOWL NAMED "TZWINDOWL"
   IF TZWINDOWL.AutoDesignGroup.GenerateGroupType = "F"
      // AutoDesign Request is for regular controls on a Groupbox.
      FOR EACH TZWINDOWL.AD_MappingAttribute
         DELETE ENTITY TZWINDOWL.AD_MappingAttribute NONE
      END
      FOR EACH TZADCSDO.FlatListSelectedAttribute
         IF TZADCSDO.FlatListSelectedAttribute.EntityName != ""
            szEntityName = TZADCSDO.FlatListSelectedAttribute.EntityName
         ELSE
            CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AD_MappingAttribute", zPOS_AFTER )
            TZWINDOWL.AD_MappingAttribute.EntityName    = szEntityName
            TZWINDOWL.AD_MappingAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.AttributeName
            TZWINDOWL.AD_MappingAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.ControlType
         END
      END
   ELSE
      // AutoDesign Request is for a Grid control.
      IF TZWINDOWL.AD_ListBoxEntity EXISTS
         FOR EACH TZWINDOWL.AD_MappingAttribute
            DELETE ENTITY TZWINDOWL.AD_MappingAttribute NONE
         END
      ELSE
         CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AD_ListBoxEntity", zPOS_AFTER )
         SET CURSOR FIRST TZADCSDO.FlatListSelectedAttribute
         TZWINDOWL.AD_ListBoxEntity.EntityName = TZADCSDO.FlatListSelectedAttribute.EntityName
      END
      FOR EACH TZADCSDO.FlatListSelectedAttribute
         IF TZADCSDO.FlatListSelectedAttribute.EntityName != ""
            szEntityName = TZADCSDO.FlatListSelectedAttribute.EntityName
         ELSE
            CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AD_MappingAttribute", zPOS_AFTER )
            TZWINDOWL.AD_MappingAttribute.EntityName    = szEntityName
            TZWINDOWL.AD_MappingAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.AttributeName
            TZWINDOWL.AD_MappingAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.ControlType
         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: AUTODESIGN_Group
**
*************************************************************************************************/
DIALOG OPERATION
AUTODESIGN_Group( VIEW ViewToWindow )

   VIEW TZADCSDO    REGISTERED AS TZADCSDO
   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW TZCONTROL   REGISTERED AS TZCONTROL
   VIEW SelectedLOD BASED ON LOD  TZZOLODO
   VIEW AD_Base     BASED ON LOD  TZWDLGSO
   STRING ( 32 ) szTag
   STRING ( 32 ) szEntityName
   SHORT nRC

   // Make sure that at least one attribute has been selected.
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "At least one Attribute must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   SET CURSOR FIRST TZADCSDO.FlatListSelectedAttribute WHERE TZADCSDO.FlatListSelectedAttribute.AttributeName != ""
   IF RESULT < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "At least one Attribute must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END

   // Make sure that a Base Window and Group has been selected.
   IF TZWINDOWL.AutoDesignGroup.BaseWindowName = "" OR TZWINDOWL.AutoDesignGroup.BaseGroupName = ""
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "Both a Base Window Name and a Base Group Name must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END

   // Position on the Base Window and  Control.
   GET VIEW AD_Base NAMED "AD_Base"
   TraceLineS( "*** BaseWindowName: ", TZWINDOWL.AutoDesignGroup.BaseWindowName )
   SET CURSOR FIRST AD_Base.Window WHERE AD_Base.Window.Tag = TZWINDOWL.AutoDesignGroup.BaseWindowName
   IF RESULT < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "The Base window name specified doesn't exist in AD_Base.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   TraceLineS( "*** BaseGroupName: ", TZWINDOWL.AutoDesignGroup.BaseGroupName )
   SET CURSOR FIRST AD_Base.Control WHERE AD_Base.Control.Tag = TZWINDOWL.AutoDesignGroup.BaseGroupName
   IF RESULT < zCURSOR_SET
      MessageSend( ViewToWindow, "", "Autodesign Window Group",
                   "The Base group name specified doesn't exist for the window in AD_Base.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END

   // If the Group Control has current subcontrols, get rid of them.
   IF TZCONTROL.CtrlCtrl EXISTS
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      FOR EACH TZCONTROL.Control
         DELETE ENTITY TZCONTROL.Control NONE
      END
      ResetViewFromSubobject( TZCONTROL )
   END

   // Delete any existing mapping entities.
   IF TZWINDOWL.AD_ListBoxEntity EXISTS
      DELETE ENTITY TZWINDOWL.AD_ListBoxEntity
   END
   CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AD_ListBoxEntity", zPOS_AFTER )
   SET CURSOR FIRST TZADCSDO.FlatListSelectedAttribute   // We'll always create a AD_ListBoxEntity entity.
   TZWINDOWL.AD_ListBoxEntity.EntityName = TZADCSDO.FlatListSelectedAttribute.EntityName
   AcceptSubobject( TZWINDOWL, "AutoDesignGroup" )

   // Set the AutoDesign attributes in TZWINDOWL from the temporary ones in TZADCSDO.
   IF TZWINDOWL.AutoDesignGroup.GenerateGroupType = "F"
      // AutoDesign Request is for regular controls on a Groupbox.
      FOR EACH TZADCSDO.FlatListSelectedAttribute
         IF TZADCSDO.FlatListSelectedAttribute.AttributeName != ""
            CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AD_MappingAttribute", zPOS_AFTER )
            TZWINDOWL.AD_MappingAttribute.EntityName    = TZADCSDO.FlatListSelectedAttribute.EntityName
            TZWINDOWL.AD_MappingAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.AttributeName
            TZWINDOWL.AD_MappingAttribute.ControlType   = TZADCSDO.FlatListSelectedAttribute.ControlType
            TZWINDOWL.AD_MappingAttribute.DataWidth     = TZADCSDO.FlatListSelectedAttribute.DataWidth
            TZWINDOWL.AD_MappingAttribute.PromptValue   = TZADCSDO.FlatListSelectedAttribute.PromptValue
         END
      END
   ELSE
      // AutoDesign Request is for a Grid control.
      FOR EACH TZADCSDO.FlatListSelectedAttribute
         IF TZADCSDO.FlatListSelectedAttribute.AttributeName != ""
            CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AD_MappingAttribute", zPOS_AFTER )
            TZWINDOWL.AD_MappingAttribute.EntityName    = TZADCSDO.FlatListSelectedAttribute.EntityName
            TZWINDOWL.AD_MappingAttribute.AttributeName = TZADCSDO.FlatListSelectedAttribute.AttributeName
            TZWINDOWL.AD_MappingAttribute.ControlType   = TZADCSDO.FlatListSelectedAttribute.ControlType
            TZWINDOWL.AD_MappingAttribute.DataWidth     = TZADCSDO.FlatListSelectedAttribute.DataWidth
            TZWINDOWL.AD_MappingAttribute.PromptValue   = TZADCSDO.FlatListSelectedAttribute.PromptValue
         END
      END
   END

   // Build the grid or group of Text, Editbox, Checkbox, Calendar or Combobox controls depending
   // on the value of GenerateGroupType.
   GET VIEW SelectedLOD NAMED "AutodesignSelectedLOD"
   AcceptSubobject( TZCONTROL, "Control" )
   IF TZWINDOWL.AutoDesignGroup.GenerateGroupType = "G"
      // Go to build a Grid control for update based on the specifications of FlatListSelectedAttribute.
      AutodesignGridCtrl( TZWINDOWL, TZCONTROL, AD_Base, SelectedLOD )
      szTag = TZWINDOWL.Window.Tag
      fnPainterCall( 8, ViewToWindow, 0, szTag )
   ELSE
      // Go to build a group of regular controls based on the specifications of FlatListSelectedAttribute.
      AutodesignUpdateCtrls( TZWINDOWL, TZCONTROL, AD_Base, SelectedLOD )
      szTag = TZWINDOWL.Window.Tag
      fnPainterCall( 8, ViewToWindow, 0, szTag )
   END

END

/*************************************************************************************************
**
**    OPERATION: AutodesignGridCtrl
**
*************************************************************************************************/
LOCAL OPERATION
AutodesignGridCtrl( VIEW TZWINDOWL   BASED ON LOD TZWDLGSO,
                    VIEW TZCONTROL   BASED ON LOD TZWDLGSO,
                    VIEW AD_Base     BASED ON LOD TZWDLGSO,
                    VIEW SelectedLOD BASED ON LOD TZZOLODO )

   VIEW TZPESRCO    BASED ON LOD TZPESRCO
   VIEW AD_BaseRoot BASED ON LOD TZWDLGSO
   INTEGER lGridWidth
   INTEGER lGridWidthAvailable
   INTEGER lControlWidthChars
   INTEGER lControlWidth
   INTEGER lControlPosition
   INTEGER lCurrentPositionY
   INTEGER lTotalDataWidth
   INTEGER lAveragPixelWidth
   INTEGER Count
   INTEGER lAttributeCount
   STRING ( 100 ) szAttributeName
   STRING ( 100 ) szControlDefName
   STRING ( 100 ) szControlBaseName
   STRING ( 100 ) szActionSuffix
   STRING ( 100 ) szActionName
   STRING ( 100 ) szFirstControlTag
   STRING ( 1 )   szControlNameSuffixGroup
   STRING ( 1 )   szControlNameSuffixAttribute
   STRING ( 10 )  szGroupName
   STRING ( 8 )   szGroupName8
   STRING ( 20 )  szControlType

   // Build a Grid control, with a subentity for each AD_MappingAttribute entry.

   GET VIEW TZPESRCO NAMED "TZPESRCO"
   szActionSuffix = TZWINDOWL.AutoDesignGroup.ActionNameSuffix
   CreateViewFromView( AD_BaseRoot, AD_Base )
   NAME VIEW AD_BaseRoot "AD_BaseRoot"
   TZCONTROL.Control.Text = ""            // We don't want any text in the highest level Group.

   // To generate unique Control Names when multiple Groups are autodesigned for the same Window, we
   // will try to use the 9th character of the Group Name, as it should be unique with groups named like
   // "GroupBox2".
   szGroupName = TZCONTROL.Control.Tag
   szGroupName8 = szGroupName[1:8]
   IF szGroupName8 = "GroupBox"
      szControlNameSuffixGroup = szGroupName[9:1]
   END

   // If there is a Title for the Group, add the control set.
   IF TZWINDOWL.AutoDesignGroup.Title != ""

      // Position on Title Base Control and step down into it.
      SET CURSOR FIRST AD_Base.CtrlCtrl WHERE AD_Base.CtrlCtrl.Tag = "TitleGroup"
      IF RESULT < zCURSOR_SET
         MessageSend( TZWINDOWL, "", "Autodesign Window Group",
                      "The Base group doesn't have a TitleGroup Control defined.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( TZWINDOWL, zWAB_StayOnWindow, 0, 0 )
         RETURN -2
      END
      SetViewToSubobject( AD_Base, "CtrlCtrl" )

      // Create Group to hold text and optional Add/Select button.
      SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "GroupBox"
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlCtrl", zPOS_AFTER )
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
      TZCONTROL.Control.Tag  = "TitleGroup" + TZWINDOWL.AD_ListBoxEntity.EntityName + szControlNameSuffixGroup
      TZCONTROL.Control.Text = ""
      SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )
      TZCONTROL.Control.SZDLG_X = TZWINDOWL.AutoDesignGroup.ControlWidthInPixels - 10
      FOR EACH AD_Base.WebControlProperty
         CreateMetaEntity( TZWINDOWL, TZCONTROL, "WebControlProperty", zPOS_AFTER )
         TZCONTROL.WebControlProperty.Name = AD_Base.WebControlProperty.Name
      END

      // Step down to Title Group subcontrols (Title and possibly Add/Select button) and add each.
      SetViewToSubobject( AD_Base, "CtrlCtrl" )
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      OrderEntityForView( AD_Base, "Control", "PSDLG_X A" )
      FOR EACH AD_Base.Control

         // Set basic Control values.
         SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = AD_Base.ControlDef.Tag
         CreateMetaEntity( TZWINDOWL, TZCONTROL, "Control", zPOS_AFTER )
         INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
         szControlBaseName = AD_Base.Control.Tag
         TZCONTROL.Control.Tag = szControlBaseName + szActionSuffix + szControlNameSuffixGroup
         SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )

         // The Title Control gets the Title text.
         IF AD_Base.Control.Tag = "Title"
            TZCONTROL.Control.Text = TZWINDOWL.AutoDesignGroup.Title
         END

         // If this Control has an Action, add it (unless it already exists) and include it under the Control.
         IF AD_Base.EventAct EXISTS
            SET CURSOR FIRST AD_BaseRoot.Action WHERE AD_BaseRoot.Action.Tag = AD_Base.EventAct.Tag
            szActionName = AD_BaseRoot.Action.Tag + szActionSuffix
            SET CURSOR FIRST TZWINDOWL.Action WHERE TZWINDOWL.Action.Tag = szActionName
            IF RESULT < zCURSOR_SET
               // Add the Action.
               CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Action", zPOS_AFTER )
               TZWINDOWL.Action.Tag = szActionName
               TZWINDOWL.Action.Type = AD_BaseRoot.Action.Type
               // Add Operation, if necessary.
               IF AD_BaseRoot.ActOper EXISTS
                  SET CURSOR FIRST TZWINDOWL.OperationList WHERE TZWINDOWL.OperationList.Name = szActionName
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST AD_BaseRoot.Operation WHERE AD_BaseRoot.Operation.Name = szActionName
                     CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Operation", zPOS_AFTER )
                     TZWINDOWL.Operation.Name = szActionName
                     SetMatchingAttributesByName( TZWINDOWL, "Operation", AD_BaseRoot, "Operation", zSET_NULL )
                     FOR EACH AD_BaseRoot.Parameter
                        CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Parameter", zPOS_AFTER )
                        SetMatchingAttributesByName( TZWINDOWL, "Parameter", AD_BaseRoot, "Parameter", zSET_NULL )
                     END
                     INCLUDE TZWINDOWL.OperationList FROM TZWINDOWL.Operation
                  END
                  INCLUDE TZWINDOWL.ActOper FROM TZWINDOWL.OperationList
               END
            END
            CreateMetaEntity( TZCONTROL, TZCONTROL, "Event", zPOS_AFTER )
            TZCONTROL.Event.Type = AD_Base.Event.Type
            INCLUDE TZCONTROL.EventAct FROM TZWINDOWL.Action
         END

      END

      // Position back to top for both created Controls and Base.
      ResetViewFromSubobject( AD_Base )   // Go back to second Group.
      ResetViewFromSubobject( AD_Base )   // Go back to first Group.
      ResetViewFromSubobject( TZCONTROL )   // Go back to second Group.
      ResetViewFromSubobject( TZCONTROL )   // Go back to first Group.
   END

   // Position on Grid Base Control.
   SET CURSOR FIRST AD_Base.CtrlCtrl WHERE AD_Base.CtrlCtrl.Tag = "Grid"
   IF RESULT < zCURSOR_SET
      MessageSend( TZWINDOWL, "", "Autodesign Window Group",
                   "The Base group doesn't have a Grid Control defined.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( TZWINDOWL, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END

   // Build base control for Grid. Width is 20 less than the original Control.
   SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "Grid"
   CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlCtrl", zPOS_AFTER )
   SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
   INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
   TZCONTROL.Control.Tag     = "Grid" + TZWINDOWL.AD_ListBoxEntity.EntityName + szControlNameSuffixGroup
   TZCONTROL.Control.SyncKey = 9999

   // Position on Grid Base Control and step down into it.
   SET CURSOR FIRST AD_Base.CtrlCtrl WHERE AD_Base.CtrlCtrl.Tag = "Grid"
   IF RESULT < zCURSOR_SET
      MessageSend( TZWINDOWL, "", "Autodesign Window Group",
                   "The Base group doesn't have a Title Control defined.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( TZWINDOWL, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END
   SetViewToSubobject( AD_Base, "CtrlCtrl" )

   // All values, except Width will be set from Base.
   // Grid width will be slightly smaller that the group on which it is positioned.
   lGridWidth = TZWINDOWL.AutoDesignGroup.ControlWidthInPixels - 10
   TZCONTROL.Control.SZDLG_X = lGridWidth
   SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )

   // Build CtrlMap subobject for list entity, which is first entity in FlatListSelectedAttribute.
   CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlMap", zPOS_AFTER )
   SET CURSOR FIRST SelectedLOD.LOD_Entity WHERE SelectedLOD.LOD_Entity.Name = TZWINDOWL.AutoDesignGroup.TopLevelEntityName
   INCLUDE TZCONTROL.CtrlMapLOD_Entity FROM SelectedLOD.LOD_Entity
   INCLUDE TZCONTROL.CtrlMapView FROM TZWINDOWL.ViewObjRef
   CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlMap", zPOS_AFTER )   // Create necessary scoping CtrlMap, though empty.

   // Position and Size of each control on the Grid will be determined from relative widths of attributes making up the Grid.
   // First account for any Action controls, for they will be specified as their width in AD_Base. The width available for
   // variable controls will be the Grid width minus the total of Action control widths, except for the first, which represents
   // the first mapping attribute.
   // Then total up variable character widths. Then determine average pixel size of each character width.
   lGridWidthAvailable = lGridWidth
   SetViewToSubobject( AD_Base, "CtrlCtrl" )
   Count = 0
   FOR EACH AD_Base.Control
      Count = Count + 1
      IF AD_Base.EventAct EXISTS AND Count > 1
         lGridWidthAvailable = lGridWidthAvailable - AD_Base.Control.SZDLG_X
      END
   END
   lTotalDataWidth = 0
   FOR EACH TZWINDOWL.AD_MappingAttribute
      lTotalDataWidth = lTotalDataWidth + TZWINDOWL.AD_MappingAttribute.DataWidth
   END
   IF lTotalDataWidth = 0
      IssueError( TZWINDOWL,0,0, "Null Total Width" )
      RETURN -1
   END
   lAveragPixelWidth = lGridWidthAvailable / lTotalDataWidth
TraceLineI( "*** lGridWidthAvailable: ", lGridWidthAvailable )
TraceLineI( "*** lGridWidth: ", lGridWidth )
TraceLineI( "*** lTotalDataWidth: ", lTotalDataWidth )
TraceLineI( "*** lAveragPixelWidth: ", lAveragPixelWidth )

   // Build subcontrol for each FlatListSelectedAttribute entry.
   lControlPosition = 0
   lAttributeCount = 0
   OrderEntityForView( AD_Base, "Control", "PSDLG_X A" )
   SET CURSOR FIRST AD_Base.Control
   FOR EACH TZWINDOWL.AD_MappingAttribute
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlCtrl", zPOS_AFTER )
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      szAttributeName = TZWINDOWL.AD_MappingAttribute.AttributeName
      lAttributeCount = lAttributeCount + 1
      szControlNameSuffixAttribute = lAttributeCount
      TZCONTROL.Control.Tag = "GridCtrl" + szAttributeName + szControlNameSuffixGroup + szControlNameSuffixAttribute
      TZCONTROL.Control.Text = TZWINDOWL.AD_MappingAttribute.PromptValue
      SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )

      // Build the Editbox, Checkbox, Calendar or Combobox controls depending on ControlType.
      szControlType = TZWINDOWL.AD_MappingAttribute.ControlType
      IF szControlType = "CheckBox" OR szControlType = "Calendar"
         SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = szControlType
      ELSE
         IF szControlType = "ComboBox"
            SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "GridComboCtl"
         ELSE
            SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "GridEditCtl"
            // If this is an Editbox, add Edit WebControlProperty entry.
            IF szControlType = "EditBox"
               CreateMetaEntity( TZCONTROL, TZCONTROL, "WebControlProperty", zPOS_AFTER )
               TZCONTROL.WebControlProperty.Name = "Edit"
            END
         END
      END
      INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef

      // Width of Control is Data Width multiplied by the number of pixels per character.
      lControlWidth = TZWINDOWL.AD_MappingAttribute.DataWidth * lAveragPixelWidth

      TZCONTROL.Control.PSDLG_X = lControlPosition
      TZCONTROL.Control.SZDLG_X = lControlWidth
      TZCONTROL.Control.PSDLG_Y = 0
      TZCONTROL.Control.SZDLG_Y = 15
      lControlPosition = lControlPosition + lControlWidth

      // Build CtrlMap subobject for list control entity from Entity.Attribute of FlatListSelectedAttribute
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlMap", zPOS_AFTER )
      SET CURSOR FIRST SelectedLOD.LOD_Entity WHERE SelectedLOD.LOD_Entity.Name = TZWINDOWL.AD_MappingAttribute.EntityName
      SET CURSOR FIRST SelectedLOD.ER_Attribute WITHIN SelectedLOD.LOD_Entity
                 WHERE SelectedLOD.ER_Attribute.Name = TZWINDOWL.AD_MappingAttribute.AttributeName
      INCLUDE TZCONTROL.CtrlMapLOD_Attribute FROM SelectedLOD.LOD_Attribute
      INCLUDE TZCONTROL.CtrlMapView FROM TZWINDOWL.ViewObjRef

      ResetViewFromSubobject( TZCONTROL )
   END

   // Add any Grid subcontrols that have Actions tied to them.
   SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
   SET CURSOR FIRST AD_Base.Control
   szFirstControlTag = AD_Base.Control.Tag
   FOR EACH AD_Base.Control

      IF AD_Base.EventAct EXISTS

         // If this is an event on the first mapping Control for the base Grid, add it to the first Control in the generated
         // Grid, rather than add a new Control.
         IF AD_Base.Control.Tag = szFirstControlTag
            SET CURSOR FIRST TZCONTROL.Control
         ELSE

            // Create Control and set basic Control values.
            szControlDefName = AD_Base.ControlDef.Tag
            SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = szControlDefName
            CreateMetaEntity( TZWINDOWL, TZCONTROL, "Control", zPOS_AFTER )
            INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
            TZCONTROL.Control.PSDLG_X = lControlPosition
            szControlBaseName         = AD_Base.Control.Tag
            TZCONTROL.Control.Tag     = szControlBaseName + szActionSuffix + szControlNameSuffixGroup
            SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )
            lControlPosition = lControlPosition + TZCONTROL.Control.SZDLG_X
         END

         // Add the Action (unless it already exists) and include it under the Control.
         SET CURSOR FIRST AD_BaseRoot.Action WHERE AD_BaseRoot.Action.Tag = AD_Base.EventAct.Tag
         szActionName = AD_BaseRoot.Action.Tag + szActionSuffix
         SET CURSOR FIRST TZWINDOWL.Action WHERE TZWINDOWL.Action.Tag = szActionName
         IF RESULT < zCURSOR_SET
            // Add the Action.
            CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Action", zPOS_AFTER )
            TZWINDOWL.Action.Tag = szActionName
            TZWINDOWL.Action.Type = AD_BaseRoot.Action.Type
            // Add Operation, if necessary.
            IF AD_BaseRoot.ActOper EXISTS
               SET CURSOR FIRST TZWINDOWL.OperationList WHERE TZWINDOWL.OperationList.Name = szActionName
               IF RESULT < zCURSOR_SET
                  SET CURSOR FIRST AD_BaseRoot.Operation WHERE AD_BaseRoot.Operation.Name = szActionName
                  CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Operation", zPOS_AFTER )
                  TZWINDOWL.Operation.Name = szActionName
                  SetMatchingAttributesByName( TZWINDOWL, "Operation", AD_BaseRoot, "Operation", zSET_NULL )
                  FOR EACH AD_BaseRoot.Parameter
                     CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Parameter", zPOS_AFTER )
                     SetMatchingAttributesByName( TZWINDOWL, "Parameter", AD_BaseRoot, "Parameter", zSET_NULL )
                  END
                  INCLUDE TZWINDOWL.OperationList FROM TZWINDOWL.Operation
               END
               INCLUDE TZWINDOWL.ActOper FROM TZWINDOWL.OperationList
            END
         END

         // Tie the Action to an Event on the Control
         CreateMetaEntity( TZCONTROL, TZCONTROL, "Event", zPOS_AFTER )
         TZCONTROL.Event.Type = AD_Base.Event.Type
         INCLUDE TZCONTROL.EventAct FROM TZWINDOWL.Action

         // If this is an event on the first mapping Control, we've just processed the action on that Control and need
         // to reposition on the last Control
         IF AD_Base.Control.Tag = szFirstControlTag
            SET CURSOR LAST TZCONTROL.Control
         END
      END
   END

   // Position back to top for both created Controls and Base.
   ResetViewFromSubobject( AD_Base )   // Go back to second Group.
   ResetViewFromSubobject( AD_Base )   // Go back to first Group.
   ResetViewFromSubobject( TZCONTROL )   // Go back to second Group.
   ResetViewFromSubobject( TZCONTROL )   // Go back to first Group.

   ResetViewFromSubobject( TZCONTROL )
   DropView( AD_BaseRoot )

END

/*************************************************************************************************
**
**    OPERATION: AutodesignUpdateCtrls
**
*************************************************************************************************/
LOCAL OPERATION
AutodesignUpdateCtrls( VIEW TZWINDOWL   BASED ON LOD TZWDLGSO,
                       VIEW TZCONTROL   BASED ON LOD TZWDLGSO,
                       VIEW AD_Base     BASED ON LOD TZWDLGSO,
                       VIEW SelectedLOD BASED ON LOD TZZOLODO )

   VIEW TZPESRCO    BASED ON LOD TZPESRCO
   VIEW AD_BaseRoot BASED ON LOD TZWDLGSO
   INTEGER lGroupWidth
   INTEGER lMappingDataWidth
   INTEGER lMaxMappingDataWidth
   INTEGER lPromptWidth
   INTEGER lControlPositionX
   INTEGER lControlPositionY
   INTEGER lCurrentPosition
   INTEGER lTotalDataWidth
   INTEGER lAveragPixelWidth
   INTEGER lAttributeCount
   STRING ( 100 ) szAttributeName
   STRING ( 100 ) szControlDefName
   STRING ( 100 ) szActionSuffix
   STRING ( 100 ) szActionName
   STRING ( 100 ) szControlNameSuffix
   STRING ( 1 )   szControlNameSuffixGroup
   STRING ( 1 )   szControlNameSuffixAttribute
   STRING ( 10 )  szGroupName
   STRING ( 8 )   szGroupName8
   STRING ( 20 )  szControlType

   // Build a Grid control, with a subentity for each AD_MappingAttribute entry.

   GET VIEW TZPESRCO NAMED "TZPESRCO"
   szActionSuffix = TZWINDOWL.AutoDesignGroup.ActionNameSuffix
   CreateViewFromView( AD_BaseRoot, AD_Base )
   NAME VIEW AD_BaseRoot "AD_BaseRoot"
   TZCONTROL.Control.Text = ""            // We don't want any text in the highest level Group.

   // To generate unique Control Names when multiple Groups are autodesigned for the same Window, we
   // will try to use the 9th character of the Group Name, as it should be unique with groups named like
   // "GroupBox2".
   szGroupName = TZCONTROL.Control.Tag
   szGroupName8 = szGroupName[1:8]
   IF szGroupName8 = "GroupBox"
      szControlNameSuffixGroup = szGroupName[9:1]
   END

   // If there is a Title for the Group, add the control set.
   IF TZWINDOWL.AutoDesignGroup.Title != ""

      // Position on Title Base Control and step down into it.
      SET CURSOR FIRST AD_Base.CtrlCtrl WHERE AD_Base.CtrlCtrl.Tag = "TitleGroup"
      IF RESULT < zCURSOR_SET
         MessageSend( TZWINDOWL, "", "Autodesign Window Group",
                      "The Base group doesn't have a TitleGroup Control defined.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( TZWINDOWL, zWAB_StayOnWindow, 0, 0 )
         RETURN -2
      END
      SetViewToSubobject( AD_Base, "CtrlCtrl" )

      // Create Group to hold text and optional Add/Select button.
      SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "GroupBox"
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlCtrl", zPOS_AFTER )
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
      TZCONTROL.Control.Tag  = "TitleGroup" + TZWINDOWL.AD_ListBoxEntity.EntityName + szControlNameSuffixGroup
      TZCONTROL.Control.Text = ""
      SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )
      TZCONTROL.Control.SZDLG_X = TZWINDOWL.AutoDesignGroup.ControlWidthInPixels - 10
      FOR EACH AD_Base.WebControlProperty
         CreateMetaEntity( TZWINDOWL, TZCONTROL, "WebControlProperty", zPOS_AFTER )
         TZCONTROL.WebControlProperty.Name = AD_Base.WebControlProperty.Name
      END

      // Step down to Title Group subcontrols (Title and possibly Add/Select button) and add each.
      SetViewToSubobject( AD_Base, "CtrlCtrl" )
      SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
      OrderEntityForView( AD_Base, "Control", "PSDLG_X A" )
      FOR EACH AD_Base.Control

         // Set basic Control values.
         szControlDefName = AD_Base.ControlDef.Tag
         SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = szControlDefName
         CreateMetaEntity( TZWINDOWL, TZCONTROL, "Control", zPOS_AFTER )
         INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
         TZCONTROL.Control.Tag = szControlDefName + szActionSuffix + szControlNameSuffixGroup
         SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )

         // The Title Control gets the Title text.
         IF AD_Base.Control.Tag = "Title"
            TZCONTROL.Control.Text = TZWINDOWL.AutoDesignGroup.Title
         END

         // If this Control has an Action, add it (unless it already exists) and include it under the Control.
         IF TZCONTROL.EventAct EXISTS
            SET CURSOR FIRST AD_BaseRoot.Action WHERE AD_BaseRoot.Action.Tag = AD_Base.EventAct.Tag
            szActionName = AD_BaseRoot.Action.Tag + szActionSuffix
            SET CURSOR FIRST TZWINDOWL.Action WHERE TZWINDOWL.Action.Tag = szActionName
            IF RESULT < zCURSOR_SET
               // Add the Action.
               CreateMetaEntity( TZWINDOWL, TZCONTROL, "Action", zPOS_AFTER )
               TZWINDOWL.Action.Tag = szActionName
               TZWINDOWL.Action.Type = AD_BaseRoot.Action.Type
               // Add Operation, if necessary.
               IF AD_BaseRoot.ActOper EXISTS
                  SET CURSOR FIRST TZWINDOWL.OperationList WHERE TZWINDOWL.OperationList.Name = szActionName
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST AD_BaseRoot.Operation WHERE AD_BaseRoot.Operation.Name = szActionName
                     CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Operation", zPOS_AFTER )
                     TZWINDOWL.Operation.Name = szActionName
                     SetMatchingAttributesByName( TZWINDOWL, "Operation", AD_BaseRoot, "Operation", zSET_NULL )
                     FOR EACH AD_BaseRoot.Parameter
                        CreateMetaEntity( TZWINDOWL, TZWINDOWL, "Parameter", zPOS_AFTER )
                        SetMatchingAttributesByName( TZWINDOWL, "Parameter", AD_BaseRoot, "Parameter", zSET_NULL )
                     END
                     INCLUDE TZWINDOWL.OperationList FROM TZWINDOWL.Operation
                  END
                  INCLUDE TZWINDOWL.ActOper FROM TZWINDOWL.OperationList
               END
            END
            CreateMetaEntity( TZCONTROL, TZCONTROL, "Event", zPOS_AFTER )
            TZCONTROL.Event.Type = AD_Base.Event.Type
            INCLUDE TZCONTROL.EventAct FROM TZWINDOWL.Action
         END

      END

      // Position back to top for both created Controls and Base.
      ResetViewFromSubobject( AD_Base )   // Go back to second Group.
      ResetViewFromSubobject( AD_Base )   // Go back to first Group.
      ResetViewFromSubobject( TZCONTROL )   // Go back to second Group.
      ResetViewFromSubobject( TZCONTROL )   // Go back to first Group.
   END

   // Position on Update Base Control.
   SET CURSOR FIRST AD_Base.CtrlCtrl WHERE AD_Base.CtrlCtrl.Tag = "UpdateGroup"
   IF RESULT < zCURSOR_SET
      MessageSend( TZWINDOWL, "", "Autodesign Window Group",
                   "The Base group doesn't have an UpdateGroup Control defined.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( TZWINDOWL, zWAB_StayOnWindow, 0, 0 )
      RETURN -2
   END

   // Determine Width of Prompt and Mapping Controls.
   // We will take the UpdateFieldPromptLength value (which is max field prompt size) and multiply it by a character
   // size of 8 pixels to get the width for Prompt entries. The width of the Mapping entries will be the
   // difference in the size of the Group.
   lPromptWidth         = TZWINDOWL.AutoDesignGroup.UpdateFieldPromptLength * 5
   lGroupWidth          = TZWINDOWL.AutoDesignGroup.ControlWidthInPixels - 10
   lMaxMappingDataWidth = lGroupWidth - lPromptWidth

   // Create Group, which will hold individual field values.
   CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlCtrl", zPOS_AFTER )
   SetViewToSubobject( AD_Base, "CtrlCtrl" )
   SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
   SetMatchingAttributesByName( TZCONTROL, "Control", AD_Base, "Control", zSET_NULL )
   TZCONTROL.Control.SZDLG_X = lGroupWidth    // Size is same as parent Group - 10.
   SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = AD_Base.ControlDef.Tag
   INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef
   TZCONTROL.Control.Tag = "Groupbox" + TZWINDOWL.AD_ListBoxEntity.EntityName + szControlNameSuffixGroup
   FOR EACH AD_Base.WebControlProperty
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "WebControlProperty", zPOS_AFTER )
      TZCONTROL.WebControlProperty.Name = AD_Base.WebControlProperty.Name
   END

   // Build a Prompt and Mapping entry for each FlatListSelectedAttribute entry.
   // Starting Y position will be from first control in UpdateGroup.
   SetViewToSubobject( AD_Base, "CtrlCtrl" )
   SetViewToSubobject( TZCONTROL, "CtrlCtrl" )
   SET CURSOR FIRST AD_Base.Control
   lControlPositionY = AD_Base.Control.PSDLG_Y
   lControlPositionX = AD_Base.Control.PSDLG_X
   lAttributeCount = 0
   FOR EACH TZWINDOWL.AD_MappingAttribute

      lAttributeCount = lAttributeCount + 1
      szControlNameSuffixAttribute = lAttributeCount

      // Create Prompt entry, which is a Text field. We will use any CSS Class from the first entry in AD_Base.
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "Control", zPOS_AFTER )
      szControlNameSuffix = TZWINDOWL.AD_MappingAttribute.AttributeName + szControlNameSuffixGroup + szControlNameSuffixAttribute
      TZCONTROL.Control.Tag       = "P_" + szControlNameSuffix
      TZCONTROL.Control.Text      = TZWINDOWL.AD_MappingAttribute.PromptValue
      TZCONTROL.Control.CSS_Class = AD_Base.Control.CSS_Class
      TZCONTROL.Control.PSDLG_X   = lControlPositionX
      TZCONTROL.Control.SZDLG_Y   = 10
      TZCONTROL.Control.SZDLG_X   = lPromptWidth
      TZCONTROL.Control.PSDLG_Y   = lControlPositionY
      SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "Text"
      INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef

      // Create the link between the Prompt attribute and the control that it goes with. It's the same name as the tag of the generated control below.
      TZCONTROL.Control.WebCtrlLabelLink = "M_" + szControlNameSuffix

      // Create Mapping entry.
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "Control", zPOS_AFTER )
      TZCONTROL.Control.Tag       = "M_" + szControlNameSuffix
      TZCONTROL.Control.CSS_Class = AD_Base.Control.CSS_Class
      TZCONTROL.Control.PSDLG_X   = lControlPositionX + lPromptWidth
      TZCONTROL.Control.SZDLG_Y   = 10
      TZCONTROL.Control.PSDLG_Y   = lControlPositionY

      // The width of the  Control will normally be determined by the size of the associated attribute, but
      // there will always be a max size (lMaxMappingDataWidth) determined above and a min size of 80..
      lMappingDataWidth = TZWINDOWL.AD_MappingAttribute.DataWidth * 5
      IF lMappingDataWidth > lMaxMappingDataWidth
         lMappingDataWidth = lMaxMappingDataWidth
      ELSE
         IF lMappingDataWidth < 80
            lMappingDataWidth = 80
         END
      END
      TZCONTROL.Control.SZDLG_X   = lMappingDataWidth

      // Build the Editbox, Checkbox, Calendar, MLEdit or Combobox controls depending on ControlType.
      szControlType = TZWINDOWL.AD_MappingAttribute.ControlType

      SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = szControlType
      IF RESULT < zCURSOR_SET
         SET CURSOR FIRST TZPESRCO.ControlDef WHERE TZPESRCO.ControlDef.Tag = "Text"
      END
      INCLUDE TZCONTROL.ControlDef FROM TZPESRCO.ControlDef

      // If this is a CheckBox, add Prompt as Text.
      IF szControlType = "CheckBox"
         TZCONTROL.Control.Text = TZWINDOWL.AD_MappingAttribute.PromptValue
      END

      // Build CtrlMap subobject for list control entity from Entity.Attribute of FlatListSelectedAttribute
      CreateMetaEntity( TZWINDOWL, TZCONTROL, "CtrlMap", zPOS_AFTER )
      SET CURSOR FIRST SelectedLOD.LOD_Entity WHERE SelectedLOD.LOD_Entity.Name = TZWINDOWL.AD_MappingAttribute.EntityName
      SET CURSOR FIRST SelectedLOD.ER_Attribute WITHIN SelectedLOD.LOD_Entity
                 WHERE SelectedLOD.ER_Attribute.Name = TZWINDOWL.AD_MappingAttribute.AttributeName
      INCLUDE TZCONTROL.CtrlMapLOD_Attribute FROM SelectedLOD.LOD_Attribute
      INCLUDE TZCONTROL.CtrlMapView FROM TZWINDOWL.ViewObjRef

      // If the Control is MLEdit, then we want to change the height of the Control from 10 to 36.
      IF szControlType = "MLEdit"
         TZCONTROL.Control.SZDLG_Y   = 36
         lControlPositionY = lControlPositionY + 36
      ELSE
         lControlPositionY = lControlPositionY + 10
      END

   END

   // Position back to top for both created Controls and Base.
   ResetViewFromSubobject( AD_Base )   // Go back to second Group.
   ResetViewFromSubobject( AD_Base )   // Go back to first Group.
   ResetViewFromSubobject( TZCONTROL )   // Go back to second Group.
   ResetViewFromSubobject( TZCONTROL )   // Go back to first Group.
   DropView( AD_BaseRoot )

END

/*************************************************************************************************
**
**    OPERATION: PostbuildAutodesignForGroup
**
*************************************************************************************************/
DIALOG OPERATION
PostbuildAutodesignForGroup( VIEW ViewToWindow )

   VIEW TZWINDOWL   REGISTERED AS TZWINDOWL
   VIEW TZCONTROL   REGISTERED AS TZCONTROL
   VIEW TZADCSDO    BASED ON LOD  TZADCSDO
   VIEW SelectedLOD BASED ON LOD  TZZOLODO
   VIEW AD_Base     BASED ON LOD  TZWDLGSO
   STRING ( 100 ) szTopEntityName
   SHORT nRC

   // This function is triggered for autodesigning a specific Group control within a Window.
   // Try to position on an existing AutoDesignWindow and AutoDesignGroup entry and if they don't exist,
   // create new ones. In any case, make the AutoDesignGroup temporal.

   // Make sure an Auto Design Base dialog has been loaded.
   GET VIEW AD_Base NAMED "AD_Base"
   IF RESULT < 0
      // The AD_Base object isn't in memory, so load it.
      nRC = ActivateMetaOI_ByName( ViewToWindow, AD_Base, 0, zREFER_DIALOG_META, zSINGLE, "AD_Base", 0 )
      IF nRC < 0
         MessageSend( ViewToWindow, "", "Autodesign Window Group",
                      "No AD_Base Dialog exists for Autodesign.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN -2
      END
      NAME VIEW AD_Base "AD_Base"
   END

   SET CURSOR FIRST TZWINDOWL.AutoDesignWindow WHERE TZWINDOWL.AutoDesignWindow.WindowTag = TZWINDOWL.Window.Tag
   IF RESULT < zCURSOR_SET
      CreateMetaEntity( TZWINDOWL, TZWINDOWL, "AutoDesignWindow", zPOS_AFTER )
      TZWINDOWL.AutoDesignWindow.WindowTag = TZWINDOWL.Window.Tag
   END
   SET CURSOR FIRST TZWINDOWL.AutoDesignGroup WHERE TZWINDOWL.AutoDesignGroup.GroupTag = TZCONTROL.Control.Tag
   IF RESULT >= zCURSOR_SET
      // Make the existing subobject temporal.
      CreateTemporalSubobjectVersion( TZWINDOWL, "AutoDesignGroup" )
   ELSE
      // Make the new subobject temporal.
      CreateTemporalEntity( TZWINDOWL, "AutoDesignGroup", zPOS_AFTER )
      TZWINDOWL.AutoDesignGroup.GroupTag = TZCONTROL.Control.Tag
   END
   TZWINDOWL.AutoDesignGroup.ControlWidthInPixels = TZCONTROL.Control.SZDLG_X

   // Always delete any existing auto design selection object.
   GET VIEW TZADCSDO NAMED "TZADCSDO"
   IF RESULT >= 0
      DropObjectInstance( TZADCSDO )
   END

   // If the Group has previous mapping entries, build the TZADCSDO object, which will have the selection entries,
   // FlatListPotentialAttribute and FlatListSelectedAttribute.
   IF TZWINDOWL.AD_MappingAttribute EXISTS

      // Initialize new Auto Design object.
      ActivateEmptyMetaOI( ViewToWindow, TZADCSDO, zSOURCE_UIS_META, zSINGLE )
      NAME VIEW TZADCSDO "TZADCSDO"
      CREATE ENTITY TZADCSDO.UI_Spec

      // Activate LOD for creation of potential attributes.
      nRC = ActivateMetaOI_ByZKey( ViewToWindow, SelectedLOD, 0, zREFER_LOD_META, zSINGLE, TZWINDOWL.AD_GroupViewObjRefLOD.ZKey, 0 )
      IF nRC < 0
         MessageSend( ViewToWindow, "", "Autodesign Window Group",
                      "The Lod Object could not be read.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN -2
      END
      NAME VIEW SelectedLOD "AutodesignSelectedLOD"

      // Build list of potential attributes to be selected. This will contain all subobject entities/attributes for
      // the selected Top Entity.
      szTopEntityName = TZWINDOWL.AutoDesignGroup.TopLevelEntityName
      SET CURSOR FIRST SelectedLOD.LOD_Entity WHERE SelectedLOD.LOD_Entity.Name = szTopEntityName
      CREATE ENTITY TZADCSDO.FlatListPotentialTopEntity
      SetMatchingAttributesByName( TZADCSDO, "FlatListPotentialTopEntity", SelectedLOD, "LOD_Entity", zSET_ALL )
      SET CURSOR FIRST SelectedLOD.LOD_EntityParent
      LocateTopEntityRecurs( TZADCSDO, SelectedLOD, szTopEntityName )

      // Build currently Selected Flat List of entities.
      CREATE ENTITY TZADCSDO.FlatListSelectedEntity
      FOR EACH TZWINDOWL.AD_MappingAttribute
         CREATE ENTITY TZADCSDO.FlatListSelectedAttribute
         SetMatchingAttributesByName( TZADCSDO, "FlatListSelectedAttribute", TZWINDOWL, "AD_MappingAttribute", zSET_ALL )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: SET_SelectedControlTypes
**
*************************************************************************************************/
DIALOG OPERATION
SET_SelectedControlTypes( VIEW ViewToWindow )

   VIEW TZWINDOWL BASED ON LOD TZWDLGSO
   VIEW TZADCSDO  BASED ON LOD TZADCSDO
   SHORT nRC

   // Set the Control Type for each selected entry in TZADCSDO.FlatListSelectedAttribute.

   GET VIEW TZWINDOWL NAMED "TZWINDOWL"
   GET VIEW TZADCSDO NAMED "TZADCSDO"

   FOR EACH TZADCSDO.FlatListSelectedAttribute
      nRC = GetSelectStateOfEntity( TZADCSDO, "FlatListSelectedAttribute" )
      IF nRC = 1
         TZADCSDO.FlatListSelectedAttribute.ControlType = TZWINDOWL.AutoDesignGroup.TempControlType
         SetSelectStateOfEntity( TZADCSDO, "FlatListSelectedAttribute", 0 )
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: RECALCULATE_UpdatePromptLength
**
*************************************************************************************************/
DIALOG OPERATION
RECALCULATE_UpdatePromptLength( VIEW ViewToWindow )

   VIEW TZADCSDO  REGISTERED AS TZADCSDO
   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   STRING ( 100 ) szTempString
   INTEGER lMaxPromptLength
   INTEGER lPromptLength

   // Recalculate the Length.
   lMaxPromptLength = 0
   FOR EACH TZADCSDO.FlatListSelectedAttribute
      szTempString = TZADCSDO.FlatListSelectedAttribute.PromptValue
      lPromptLength = GetStringLength( szTempString )
      IF lPromptLength > lMaxPromptLength
         lMaxPromptLength = lPromptLength
      END
   END
   TZWINDOWL.AutoDesignGroup.UpdateFieldPromptLength = lMaxPromptLength

END

/*************************************************************************************************
**
**    OPERATION: CHECK_ReorderAttributes
**
*************************************************************************************************/
DIALOG OPERATION
CHECK_ReorderAttributes( VIEW ViewToWindow )

   VIEW TZADCSDO  REGISTERED AS TZADCSDO
   VIEW TZADCSDO2 BASED ON LOD  TZADCSDO

   // Make sure that any Entity entries are properly positioned before their corresponding attributes.
   CreateViewFromView( TZADCSDO2, TZADCSDO )
   FOR EACH TZADCSDO.FlatListSelectedAttribute
      IF TZADCSDO.FlatListSelectedAttribute.IndentEntityName != ""
         SET CURSOR FIRST TZADCSDO2.FlatListSelectedAttribute
                    WHERE TZADCSDO2.FlatListSelectedAttribute.EntityName = TZADCSDO.FlatListSelectedAttribute.EntityName
         IF TZADCSDO2.FlatListSelectedAttribute.IndentEntityName != TZADCSDO.FlatListSelectedAttribute.IndentEntityName
            // An Entity entry has been moved, so put it back.
            CREATE ENTITY TZADCSDO2.FlatListSelectedAttribute BEFORE
            SetMatchingAttributesByName( TZADCSDO2, "FlatListSelectedAttribute", TZADCSDO, "FlatListSelectedAttribute", zSET_ALL )
            DELETE ENTITY TZADCSDO.FlatListSelectedAttribute
         END
      END
   END
   SET CURSOR FIRST TZADCSDO.FlatListSelectedAttribute
   RefreshWindow( ViewToWindow )
   DropView( TZADCSDO2 )

END

/*************************************************************************************************
**
**    OPERATION: CANCEL_AutoDesignGroup
**
*************************************************************************************************/
DIALOG OPERATION
CANCEL_AutoDesignGroup( VIEW ViewToWindow )

   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZCONTROL REGISTERED AS TZCONTROL

   // Cancel the subobjects for Control and AutoDesignGroup.
   CancelSubobject( TZCONTROL, "Control" )
   CancelSubobject( TZWINDOWL, "AutoDesignGroup" )

END

/*************************************************************************************************
**
**    OPERATION: ACCEPT_AutoDesignGroup
**
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_AutoDesignGroup( VIEW ViewToWindow )

   VIEW TZWINDOWL REGISTERED AS TZWINDOWL
   VIEW TZCONTROL REGISTERED AS TZCONTROL

   // Accept changes to the AutoDesignGroup subobject, but cancel the Control subobject, since we're
   // not making any changes to it and it's a temporal subobject.
   CancelSubobject( TZCONTROL, "Control" )
   AcceptSubobject( TZWINDOWL, "AutoDesignGroup" )

END
