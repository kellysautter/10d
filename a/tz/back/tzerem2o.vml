
//   LAST MESSAGE ID: ER00413

/*
CHANGE LOG
2002.04.16    FH
   change "usally" to "usually"
2000.05.30    PAS  Adding operations for Dimension Hierarchy maintainance
   DimHierInitLevels, DimHierSyncLevels
2000.10.20    SR   Z2000  Size of path variables
   Modified size of SourceFileName in function ERD_Migrate
   because size of attributes ExecDir, MetaSrcDir and PgmSrcDir has
   been changed to 254 in datamodel. Correct the size of messagetext variables.
2000.06.30    BL   Z10
   Modified NewAttributeSequence for check NULL value
2000.06.10    BL   Z10  ADW Export
   Added ADW_Exp_EntityDesc, ADW_Exp_CreateEntities, ADW_Export,
   ADW_Exp_OpenFiles, ADW_Exp_CheckFiles, ADW_Exp_CreateAttrProp,
   ADW_Exp_CreateAttr_TE, ADW_Exp_SetAttrDesc, ADW_Exp_CreateAttrType,
   ADW_Exp_CreateAttribute, ADW_Exp_RelER_Entity, ADW_Exp_CreateRelEntity1,
   ADW_Exp_CreateRelEntity2, ADW_Exp_CreateRelSA, ADW_Exp_CreateRel,
   ADW_Exp_Create_Key1, ADW_Exp_RelLinkId, ADW_Exp_NoRelLinkId,
   ADW_Exp_Create_Key2, ADW_Exp_CreateRel_ID
2000.05.25    BL   Z10
   Modified ImportADW_Model for set new attribute sequence
2000.05.12    BL   Z10
   Added NewAttributeSequence, DelAttribFromSequence, MoveAttribInSequence:
   if insert new Attribute, delete Attribute or move Attribute, then set
   new Attribute Sequence
   Added SetAttributeSequence: set Attribute Sequence for Data Models without
   Attribute Sequence
   Added SortAttributes: sort Attributes before commit ERD
1999.12.08    DC   Z10
   Added and corrected CompareDataModels operation.
1999.04.09    DC   Z10   QS999
   Added constraint to AttributeConstraints for DerivedExpression.
20.02.1997    DonC
   Improved functionality of ER/SA Merge.
04.05.1997    DonC
   Corrected Identifier generation in ER/SA Merge.
04.05.1997    DonC
   Added AttributeConstraints operation to give meaningful message when no Domain
   is selected.
07.06.1997    DonC
   Added migration of Domain if the Domain is not in the target but its Domain
   Group is.
19.07.1997    DonC
   Corrected merge of SA's when forcing entity values so that entities would not
   be repositioned.
11.10.1997    DonC
   Modified merge of SA's so that a Domain change in the source is reflected as a
   Domin change in the target if force merge is requested.
24.10.1997    DonC
   Modified IdentifierConstraints to check that a System Maintained key specification is
   valid (Ex., the key Attribute must be of DataType Integer).
31.10.1997     DonC
   Modified ERD_Migrate to compare the OldERD Domain by name as well as by ZKey, since we had
   a case where ZKeys didn't match.
02.03.1998    DonC
   Modified IdentifierConstraints so that constraint added above is not triggered for a
   System Maintained Identifier without a FactType.
*/

ENTITY CONSTRAINT OPERATION
DimHierConstraints( VIEW  vERD BASED ON LOD TZEREMDO,
                    STRING ( 32 ) sEntityName,
                    SHORT Event,
                    SHORT State )

   STRING ( 999 ) szMsg

   CASE Event
   OF   zECE_ACCEPT:

      // Make sure that the DimensionHier entity has one root level
      IF sEntityName = "ER_DimensionHier"
            AND vERD.ER_DimensionHier EXISTS
         SET CURSOR FIRST vERD.ER_DimHierLevel
         IF vERD.ER_DimHierLevel DOES NOT EXIST
            MessageSend( vERD, "ER01404", "Dimension Specification",
                         "There must be exactly one 'root' level for each Dimension Hierarchy.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN -1
         END
         SET CURSOR NEXT vERD.ER_DimHierLevel
         IF RESULT >= zCURSOR_SET
            szMsg = "There must be exactly one 'root' level for each Dimension Hierarchy."
                 + zNEW_LINE + zNEW_LINE + "You can have multiple 'roots' while editting, but you must eliminate all but one prior to accepting the level."
            MessageSend( vERD, "ER01404", "Dimension Specification",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN -1
         END
      END

        /* end zECE_ACCEPT */
   OF   zECE_CANCEL:

        /* end zECE_CANCEL */
   OF   zECE_CREATE:

        /* end zECE_CREATE */
   OF   zECE_DELETE:

        /* end zECE_DELETE */
   OF   zECE_EXCLUDE:

        /* end zECE_EXCLUDE */
   OF   zECE_INCLUDE:

        /* end zECE_INCLUDE */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: DimHierInitLevels
**
**    Initialize Dimension Hierarchy with Levels in attribute order for the current Entity (must have
**    purpose set to Dim).  Each attribute gets it's own level and drilldown is based on inverse order.
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierInitLevels( VIEW vTZEREMDO BASED ON LOD TZEREMDO, VIEW vSubtask )

   VIEW vERDWork  BASED ON LOD TZEREMDO
   VIEW vDimWork  BASED ON LOD TZEREMDO
   STRING ( 200 ) sTemp
   INTEGER nRC
   SHORT   nListOrder

   // check if it ER_Entity is right type and that no Level exists
   IF vTZEREMDO.ER_Entity DOES NOT EXIST
      RETURN -4
   END
   IF vTZEREMDO.ER_Entity.Purpose != "2"
      RETURN -2
   END
   IF vTZEREMDO.ER_DimHierLevel EXISTS
      RETURN -1
   END

   // Create the Dimension, if it doesn't exist
   IF vTZEREMDO.ER_DimensionHier DOES NOT EXIST
      CreateMetaEntity( vSubtask, vTZEREMDO, "ER_DimensionHier", zPOS_AFTER )
      sTemp = vTZEREMDO.ER_Entity.Name
      vTZEREMDO.ER_DimensionHier.Name = sTemp
      vTZEREMDO.ER_DimensionHier.Desc = sTemp + " dimension"
   END

   // Add the levels by processing the attributes in reverse order
   CreateViewFromViewForTask( vERDWork, vTZEREMDO, 0 )
   CreateViewFromViewForTask( vDimWork, vTZEREMDO, 0 )
   nListOrder = 0
   nRC = SetCursorLastEntity( vERDWork, "ER_Attribute", 0 )
   LOOP WHILE nRC >= zCURSOR_SET
      IF vERDWork.ER_FactTypeForDelete DOES NOT EXIST
         // not part of identifier or relationship
         // add the top level
   // flat side init --------
   // -----------------------
         CreateMetaEntity( vSubtask, vDimWork, "ER_DimensionLevel", zPOS_AFTER )
         sTemp = vERDWork.ER_Attribute.Name
         vDimWork.ER_DimensionLevel.Name = sTemp
         vDimWork.ER_DimensionLevel.Desc = sTemp + " level"
         nListOrder = nListOrder + 1
         vDimWork.ER_DimensionLevel.ListOrder = nListOrder
         CreateMetaEntity( vSubtask, vDimWork, "ER_DimensionAttr", zPOS_AFTER )
         vDimWork.ER_DimensionAttr.Name = sTemp + " attribute"
         vDimWork.ER_DimensionAttr.Desc = vERDWork.ER_Attribute.Desc
         INCLUDE vDimWork.ER_AttributeForDim FROM vERDWork.ER_Attribute
   // end flat side init ----

   /* recursive init --------
   == -----------------------
         CreateMetaEntity( vSubtask, vDimWork, "ER_DimHierLevel", zPOS_AFTER )
         sTemp = vERDWork.ER_Attribute.Name
         vDimWork.ER_DimHierLevel.Name = sTemp
         vDimWork.ER_DimHierLevel.Desc = sTemp + " level"
         nListOrder = nListOrder + 1
         vDimWork.ER_DimHierLevel.ListOrder = nListOrder
         CreateMetaEntity( vSubtask, vDimWork, "ER_DimHierAttr", zPOS_AFTER )
         vDimWork.ER_DimHierAttr.Name = sTemp + " attribute"
         vDimWork.ER_DimHierAttr.Desc = vERDWork.ER_Attribute.Desc
         INCLUDE vDimWork.ER_AttributeForDimHier FROM vERDWork.ER_Attribute
         nRC = SetCursorPrevEntity( vERDWork, "ER_Attribute", 0 )
         LOOP WHILE nRC >= zCURSOR_SET
            IF vERDWork.ER_FactTypeForDelete DOES NOT EXIST
               // not part of identifier or relationship
               // child level
               CreateMetaEntity( vSubtask, vDimWork, "ER_DimHierLevelChild", zPOS_AFTER )
               sTemp = vERDWork.ER_Attribute.Name
               vDimWork.ER_DimHierLevelChild.Name = sTemp
               vDimWork.ER_DimHierLevelChild.Desc = sTemp + " level"
               nListOrder = nListOrder + 1
               vDimWork.ER_DimHierLevelChild.ListOrder = nListOrder
               SetViewToSubobject( vDimWork, "ER_DimHierLevelChild" )
            //
            // // just for testing
            // IF  nListOrder > 3
            //    CreateEntity( vERDWork, "ER_DimHierLevelChild", zPOS_AFTER )
            //    SetMatchingAttributesByName( vERDWork, "ER_DimHierLevelChild",
            //                                 vDimWork, "ER_DimHierLevel", zSET_ALL )
            //    RelinkInstanceToInstance( vERDWork, "ER_DimHierLevelChild",
            //                              vDimWork, "ER_DimHierLevel" )
            // END
            //
               CreateMetaEntity( vSubtask, vDimWork, "ER_DimHierAttr", zPOS_AFTER )
               vDimWork.ER_DimHierAttr.Name = sTemp + " attribute"
               vDimWork.ER_DimHierAttr.Desc = vERDWork.ER_Attribute.Desc
               INCLUDE vDimWork.ER_AttributeForDimHier FROM vERDWork.ER_Attribute
            END
            nRC = SetCursorPrevEntity( vERDWork, "ER_Attribute", 0 )
         END
   == -----------------------
   == recursive init ------ */
      END // if check for last attribute is not an identifier

      nRC = SetCursorPrevEntity( vERDWork, "ER_Attribute", 0 )
   END //loop to find last attribute for top

   // now add all possible "hierarchy" from these levels
   FOR EACH vERDWork.ER_DimensionLevel
      SetViewFromView( vDimWork, vERDWork )
      FOR EACH vDimWork.ER_DimensionLevel
            WHERE vDimWork.ER_DimensionLevel.ListOrder >
                  vERDWork.ER_DimensionLevel.ListOrder
         INCLUDE vERDWork.ER_DimensionLevelChild FROM vDimWork.ER_DimensionLevel
      END
   END
   // Now count the children and parents
   DimHierSetCounts( vERDWork, vSubtask )

   DropView( vDimWork )
   DropView( vERDWork )

   // Now we will set the flat side
   //DimHierSyncLevelsR2F( vTZEREMDO, vTZEREMDO )
   DimHierSyncLevelsF2R( vTZEREMDO, vTZEREMDO, vSubtask )

END

/*************************************************************************************************
**
**    OPERATION: DimHierCopyLevelSub
**
**    Copy an existing DimHierLevel subobject from a source view as either a Sibling or Child of
**    the currently positioned DimHierLevel.
**    NOTE: The flat side is deleted and rebuilt.
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierCopyLevelSub( VIEW  vTZEREMDO BASED ON LOD TZEREMDO,
                     VIEW  vTZEREMDO_Source BASED ON LOD TZEREMDO,
                     VIEW  vTZEREMDOflat BASED ON LOD TZEREMDO,
                     INTEGER bAsChild,
                     VIEW  vSubtask )

   STRING ( 34 ) szEntityName

   IF vTZEREMDO_Source.ER_DimHierLevel DOES NOT EXIST
      IssueError( vTZEREMDO, 0, 0,
                  "Internal error DimHierCopyLevelSub: source Dimension Hierarchy Level does not exist." )
      RETURN -1
   END
   IF bAsChild = TRUE
      szEntityName = "ER_DimHierLevelChild"
      IF vTZEREMDO.ER_DimHierLevel DOES NOT EXIST
         IssueError( vTZEREMDO, 0, 0,
                     "Internal error DimHierCopyLevelSub: target Dimension Hierarchy Level does not exist, so no drill down level can be created." )
         RETURN -1
      END
   ELSE
      szEntityName = "ER_DimHierLevel"
   END

   DimHierRemoveFlatSide( vTZEREMDOflat, vSubtask )

   // Add the "root" of the subobject as sibling or child
   DimHierCopyLevel( vTZEREMDO, vTZEREMDO_Source, bAsChild, vSubtask )
   IF bAsChild = TRUE
      // move view to the added child
      SetViewToSubobject( vTZEREMDO, "ER_DimHierLevelChild" )
   END

   // Now recursively process the source children
   fnDimHierCopyChildSub( vSubtask, vTZEREMDO, vTZEREMDO_Source )

   // Now reset view if we started as child
   IF bAsChild = TRUE
      ResetViewFromSubobject( vTZEREMDO )
   END

   // Now we will set the flat side
   DimHierSyncLevelsR2F( vTZEREMDO, vTZEREMDOflat, vSubtask )

END

LOCAL OPERATION
fnDimHierCopyChildSub( VIEW vSubtask,
                       VIEW vTZEREMDO BASED ON LOD TZEREMDO,
                       VIEW vTZEREMDO_Source BASED ON LOD TZEREMDO )

   // recursively process the source children
   FOR EACH vTZEREMDO_Source.ER_DimHierLevelChild
      SetViewToSubobject( vTZEREMDO_Source, "ER_DimHierLevelChild" )
      DimHierCopyLevel( vTZEREMDO, vTZEREMDO_Source, TRUE, vSubtask )
      SetViewToSubobject( vTZEREMDO, "ER_DimHierLevelChild" )

      fnDimHierCopyChildSub( vTZEREMDO, vTZEREMDO_Source, vSubtask )

      ResetViewFromSubobject( vTZEREMDO )
      ResetViewFromSubobject( vTZEREMDO_Source )
   END

END

/*************************************************************************************************
**
**    OPERATION: DimHierCopyLevel
**
**    Copy an existing DimHierLevel from a source view as either a Sibling or Child of
**    the currently positioned DimHierLevel.
**    NOTE: It is the callers responsiblity to rebuild the flat side.
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierCopyLevel( VIEW vTZEREMDO BASED ON LOD TZEREMDO,
                  VIEW vTZEREMDO_Source BASED ON LOD TZEREMDO,
                  INTEGER bAsChild,
                  VIEW vSubtask )

// NOTE: It is the callers responsiblity to rebuild the flat side.

   STRING ( 34 ) szEntityName

   IF vTZEREMDO_Source.ER_DimHierLevel DOES NOT EXIST
      IssueError( vTZEREMDO, 0, 0,
                  "Internal error DimHierCopyLevel: source Dimension Hierarchy Level does not exist." )
      RETURN -1
   END
   IF bAsChild = TRUE
      szEntityName = "ER_DimHierLevelChild"
      IF vTZEREMDO.ER_DimHierLevel DOES NOT EXIST
         IssueError( vTZEREMDO, 0, 0,
                     "Internal error DimHierCopyLevel: target Dimension Hierarchy Level does not exist, so no drill down level can be created." )
         RETURN -1
      END
   ELSE
      szEntityName = "ER_DimHierLevel"
   END

   // add the the level and relink
   IF szEntityName = "ER_DimHierLevelChild"
      INCLUDE vTZEREMDO.ER_DimHierLevelChild FROM vTZEREMDO_Source.ER_DimHierLevel
   ELSE
   IF szEntityName = "ER_DimHierLevel"
      INCLUDE vTZEREMDO.ER_DimHierLevel FROM vTZEREMDO_Source.ER_DimHierLevel
   ELSE
      CreateEntity( vTZEREMDO, szEntityName, zPOS_AFTER )
      SetMatchingAttributesByName( vTZEREMDO, szEntityName,
                                   vTZEREMDO_Source, "ER_DimHierLevel", zSET_ALL )
      RelinkInstanceToInstance( vTZEREMDO, szEntityName,
                                vTZEREMDO_Source, "ER_DimHierLevel" )
   END
   END

END

/*************************************************************************************************
**
**    OPERATION: DimHierAddSiblingLevel
**
**    Routine adds a level that is a sibling to the current level and set
**    the view to be postioned on that sibling
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierAddSiblingLevel( VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                        VIEW vTZEREMDOflat BASED ON LOD TZEREMDO,
                        VIEW vSubtask )

// SHORT nRC

   // Check if the initial sibling exists
   IF vTZEREMDOrecurs.ER_DimHierLevel DOES NOT EXIST
      RETURN 0
   END

   // if it doesnt have a parent, we just create the level
   IF vTZEREMDOrecurs.ER_DimHierLevel.NbrParents = 0
      CreateMetaEntity( vSubtask, vTZEREMDOrecurs, "ER_DimHierLevel", zPOS_AFTER )
      vTZEREMDOrecurs.ER_DimHierLevel.Name = "<new>"
   ELSE
      ResetViewFromSubobject( vTZEREMDOrecurs )
      CreateMetaEntity( vSubtask, vTZEREMDOrecurs, "ER_DimHierLevelChild", zPOS_AFTER )
      vTZEREMDOrecurs.ER_DimHierLevelChild.Name = "<new>"
      SetViewToSubobject( vTZEREMDOrecurs, "ER_DimHierLevelChild" )
   END

   // Now we will set the flat side
   DimHierSyncLevelsR2F( vTZEREMDOrecurs, vTZEREMDOflat, vSubtask )

END

/*************************************************************************************************
**
**    OPERATION: DimHierDeleteLevel
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierDeleteLevel( VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                    VIEW vTZEREMDOflat BASED ON LOD TZEREMDO,
                    VIEW vSubtask )

// SHORT nRC

   // Check if the initial sibling exists
   IF vTZEREMDOrecurs.ER_DimHierLevel DOES NOT EXIST
      RETURN 0
   END

   DELETE ENTITY vTZEREMDOrecurs.ER_DimHierLevel
   IF vTZEREMDOrecurs.ER_DimHierLevel DOES NOT EXIST
      SET CURSOR PREVIOUS vTZEREMDOrecurs.ER_DimHierLevel
   END

   // Now we will set the flat side
   DimHierSyncLevelsR2F( vTZEREMDOrecurs, vTZEREMDOflat, vSubtask )

END

/*************************************************************************************************
**
**    OPERATION: DimHierAddChildLevel
**
**    Routine adds a level that is a child to the current level and set
**    the view to be postioned on that child
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierAddChildLevel( VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                      VIEW vTZEREMDOflat BASED ON LOD TZEREMDO,
                      VIEW vSubtask )

// SHORT nRC

   // Check if the initial sibling exists
   IF vTZEREMDOrecurs.ER_DimHierLevel DOES NOT EXIST
      RETURN 0
   END

   // create the level as a child
   CreateMetaEntity( vSubtask, vTZEREMDOrecurs, "ER_DimHierLevelChild", zPOS_AFTER )
   vTZEREMDOrecurs.ER_DimHierLevelChild.Name = "<new>"
   SetViewToSubobject( vTZEREMDOrecurs, "ER_DimHierLevelChild" )

   // Now we will set the flat side
   DimHierSyncLevelsR2F( vTZEREMDOrecurs, vTZEREMDOflat, vSubtask )

END

/*************************************************************************************************
**
**    OPERATION: DimHierRemoveChildLevel
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierRemoveChildLvl( VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                       VIEW vTZEREMDOflat BASED ON LOD TZEREMDO,
                       VIEW vSubtask )

// SHORT nRC

   // Check if the initial Child exists
   IF vTZEREMDOrecurs.ER_DimHierLevelChild DOES NOT EXIST
      RETURN -1
   END

   // create the level as a child
   EXCLUDE vTZEREMDOrecurs.ER_DimHierLevelChild
   IF vTZEREMDOrecurs.ER_DimHierLevel DOES NOT EXIST
      SET CURSOR PREVIOUS vTZEREMDOrecurs.ER_DimHierLevel
   END

   // Now we will set the flat side
   DimHierSyncLevelsR2F( vTZEREMDOrecurs, vTZEREMDOflat, vSubtask )

END

/*************************************************************************************************
**
**    OPERATION: DimHierAddAttribute
**
**    Routine adds a HierAttribute to the current level.  It uses either the Flat or
**    Recursive side.  The ER_Attribute can optionally be added.
**
*************************************************************************************************/

TRANSFORMATION OPERATION
DimHierAddAttribute( VIEW  vTZEREMDO BASED ON LOD TZEREMDO,
                     SHORT bUseRecursiveSide,
                     SHORT bIncudeER_ATTRIBUTE,
                     VIEW  vERD_ATTR BASED ON LOD TZEREMDO,
                     VIEW  vSubtask )

// SHORT nRC

   IF bUseRecursiveSide = TRUE
      CreateMetaEntity( vSubtask, vTZEREMDO, "ER_DimHierAttr", zPOS_AFTER )
      IF bIncudeER_ATTRIBUTE = TRUE
         vTZEREMDO.ER_DimHierAttr.Name = vERD_ATTR.ER_Attribute.Name + " attribute"
         vTZEREMDO.ER_DimHierAttr.Desc = vERD_ATTR.ER_Attribute.Desc
         INCLUDE vTZEREMDO.ER_AttributeForDimHier FROM vERD_ATTR.ER_Attribute
      ELSE
         vTZEREMDO.ER_DimHierAttr.Name = "<new attribute>"
      END
   ELSE
      CreateMetaEntity( vSubtask, vTZEREMDO, "ER_DimensionAttr", zPOS_AFTER )
      IF bIncudeER_ATTRIBUTE = TRUE
         vTZEREMDO.ER_DimensionAttr.Name = vERD_ATTR.ER_Attribute.Name + " attribute"
         vTZEREMDO.ER_DimensionAttr.Desc = vERD_ATTR.ER_Attribute.Desc
         INCLUDE vTZEREMDO.ER_AttributeForDim FROM vERD_ATTR.ER_Attribute
      ELSE
         vTZEREMDO.ER_DimensionAttr.Name = "<new attribute>"
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: DimHierSyncLevelsF2R
**
**    Routine will syncronize the "flat" level side (source)
**    to the "recursive" level side (target).
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierSyncLevelsF2R( VIEW vTZEREMDO BASED ON LOD TZEREMDO,
                      VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                      VIEW vSubtask )

   VIEW vDimBase  BASED ON LOD TZEREMDO
   VIEW vDimWork  BASED ON LOD TZEREMDO
   SHORT nRC

   // Make  sure that there we start at the top level
   // Can't use "ResetView ( vTZEREMDO )" since all cursor positioning is lost
   CreateViewFromViewForTask( vDimBase, vTZEREMDOrecurs, 0 )
   LOOP
      nRC = ResetViewFromSubobject( vDimBase )
   UNTIL nRC != 0

   CreateViewFromViewForTask( vDimWork, vDimBase, 0 )

   // Process multiple Dimension Hierarchies (future) per ER_Entity
   FOR EACH vDimWork.ER_DimensionHier
      // remove the Hierarchy
      FOR EACH vTZEREMDOrecurs.ER_DimHierLevel
         DropEntity( vDimWork, "ER_DimHierLevel", zREPOS_NONE )
      END
   END

   // Now include them back
   FOR EACH vDimWork.ER_DimensionHier
      FOR EACH vDimWork.ER_DimensionLevel
         IF vDimWork.ER_DimensionLevelParent DOES NOT EXIST
            INCLUDE vDimWork.ER_DimHierLevel FROM vDimWork.ER_DimensionLevel
            // I don't understand why we don't need recursion here
            // ... going down one level gives full recursion
            FOR EACH vDimWork.ER_DimHierLevelChild
               SetViewToSubobject( vDimWork, "ER_DimHierLevelChild" )
               SET CURSOR FIRST vDimBase.ER_DimensionLevel
                      WHERE vDimBase.ER_DimensionLevel.ZKey =
                            vDimWork.ER_DimHierLevel.ZKey
               IF vDimBase.ER_DimensionLevelChild EXISTS
                  INCLUDE vDimWork.ER_DimHierLevelChild
                       FROM vDimBase.ER_DimensionLevelChild
               END
               ResetViewFromSubobject( vDimWork )
            END
         END
      END
   END

   // Finally, re-include the Attributes
   FOR EACH vDimWork.ER_DimensionHier
      FOR EACH vDimWork.ER_DimHierLevel
         fnDimHierF2R_Attrs( vDimWork, vDimBase, vSubtask )
      END
   END

   DropView( vDimBase )
   DropView( vDimWork )

END

/*************************************************************************************************
**
**    OPERATION: DimHierSyncLevelsR2F
**
**    Routine will syncronize the "recursive" level side (source)
**    to the "flat" level side (target).
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierSyncLevelsR2F( VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                      VIEW vTZEREMDOflat BASED ON LOD TZEREMDO,
                      VIEW vSubtask )

   VIEW vDimBase  BASED ON LOD TZEREMDO
   VIEW vDimWork  BASED ON LOD TZEREMDO
   SHORT nRC

   // Make  sure that there we start at the top level
   // Can't use "ResetView ( vTZEREMDO )" since all cursor positioning is lost
   CreateViewFromViewForTask( vDimBase, vTZEREMDOrecurs, 0 )
   LOOP
      nRC = ResetViewFromSubobject( vDimBase )
   UNTIL nRC != 0

   CreateViewFromViewForTask( vDimWork, vDimBase, 0 )

   // Process multiple Dimension Hierarchies (future) per ER_Entity
   FOR EACH vDimWork.ER_DimensionHier
      // remove all flat side entities
      FOR EACH vDimWork.ER_DimensionLevel
         DropEntity( vDimWork, "ER_DimensionLevel", zREPOS_NONE )
      END
      // Now recursively include them back
      fnDimHierR2F( vSubtask, vDimWork, vDimBase )

      // Now count the children and parents
      DimHierSetCounts( vDimWork, vSubtask )
   END

   DropView( vDimBase )
   DropView( vDimWork )

   // position flat side to current recursive side position
   SetCursorFirstEntityByEntityCsr( vTZEREMDOflat, "ER_DimensionLevel",
                                    vTZEREMDOrecurs, "ER_DimHierLevel", "ER_Entity"  )

END

/*************************************************************************************************
**
**    OPERATION: DimHierSetCounts
**
**    Routine will set the counts for the current ER_DimensionHier Subobject
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierSetCounts( VIEW vTZEREMDO BASED ON LOD TZEREMDO,
                  VIEW vSubtask )

   VIEW vDimWork  BASED ON LOD TZEREMDO
   SHORT nCount

   CreateViewFromViewForTask( vDimWork, vTZEREMDO, 0 )

  // Count the children and parents
   FOR EACH vDimWork.ER_DimensionLevel
      nCount = 0
      FOR EACH vDimWork.ER_DimensionLevelChild
         nCount = nCount + 1
      END
      vDimWork.ER_DimensionLevel.NbrChildren = nCount
      nCount = 0
      FOR EACH vDimWork.ER_DimensionLevelParent
         nCount = nCount + 1
      END
      vDimWork.ER_DimensionLevel.NbrParents = nCount
   END

   DropView( vDimWork )

END

LOCAL OPERATION
fnDimHierR2F( VIEW vSubtask,
              VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
              VIEW vTZEREMDObase BASED ON LOD TZEREMDO )

   VIEW vParent BASED ON LOD TZEREMDO

   FOR EACH vTZEREMDOrecurs.ER_DimHierLevel

      // Add the flat side if not already done
      SET CURSOR FIRST vTZEREMDObase.ER_DimensionLevel
            WHERE vTZEREMDObase.ER_DimensionLevel.ZKey = vTZEREMDOrecurs.ER_DimHierLevel.ZKey
      IF RESULT < zCURSOR_SET
         SET CURSOR LAST vTZEREMDObase.ER_DimensionLevel
         INCLUDE vTZEREMDObase.ER_DimensionLevel FROM vTZEREMDOrecurs.ER_DimHierLevel
      ELSE
         // make sure that multiple parents are handled
         CreateViewFromViewForTask( vParent, vTZEREMDOrecurs, 0 )
         ResetViewFromSubobject( vParent )
         SET CURSOR FIRST vTZEREMDObase.ER_DimensionLevelParent
               WHERE vTZEREMDObase.ER_DimensionLevelParent.ZKey = vParent.ER_DimHierLevel.ZKey
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST vTZEREMDObase.ER_DimensionLevelParent
            INCLUDE vTZEREMDObase.ER_DimensionLevelParent FROM vParent.ER_DimHierLevel BEFORE
         END
         DropView( vParent )
         SET CURSOR LAST vTZEREMDObase.ER_DimensionLevel
      END

      // Now process each child
      FOR EACH vTZEREMDOrecurs.ER_DimHierLevelChild
         SetViewToSubobject( vTZEREMDOrecurs, "ER_DimHierLevelChild" )
         fnDimHierR2F( vSubtask, vTZEREMDOrecurs, vTZEREMDObase )
         ResetViewFromSubobject( vTZEREMDOrecurs )
      END

   END

END

LOCAL OPERATION
fnDimHierF2R_Attrs( VIEW vSubtask,
                    VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                    VIEW vTZEREMDObase BASED ON LOD TZEREMDO )

   SHORT nRC

   SET CURSOR FIRST vTZEREMDObase.ER_DimensionLevel
          WHERE vTZEREMDObase.ER_DimensionLevel.ZKey =
                vTZEREMDOrecurs.ER_DimHierLevel.ZKey
   IF RESULT < zCURSOR_SET
      TraceLineS( "Internal error fnDimHierF2R_Attrs: Level Name = ",
                  vTZEREMDObase.ER_DimHierLevel.Name )
      TraceLineI( "Internal error fnDimHierF2R_Attrs: Level ZKey = ",
                  vTZEREMDOrecurs.ER_DimHierLevel.ZKey )
      IssueError( vTZEREMDOrecurs, 0, 0,
                  "Internal error fnDimHierF2R_Attrs: Flat side is missing ER_DimensionLevel.  See Trace." )
      RETURN -1
   END
   FOR EACH vTZEREMDObase.ER_DimensionAttr
      nRC = SetCursorFirstEntityByEntityCsr( vTZEREMDOrecurs, "ER_DimHierAttr",
                                       vTZEREMDObase, "ER_DimensionAttr", "" )
      IF nRC < zCURSOR_SET
         SET CURSOR LAST vTZEREMDOrecurs.ER_DimHierAttr
         INCLUDE vTZEREMDOrecurs.ER_DimHierAttr
               FROM vTZEREMDObase.ER_DimensionAttr AFTER
      END
   END

   FOR EACH vTZEREMDOrecurs.ER_DimHierLevelChild
      SetViewToSubobject( vTZEREMDOrecurs, "ER_DimHierLevelChild" )
      fnDimHierF2R_Attrs( vSubtask, vTZEREMDOrecurs, vTZEREMDObase )
      ResetViewFromSubobject( vTZEREMDOrecurs )
   END

END

/*************************************************************************************************
**
**    OPERATION: DimSetLevelByZKeys
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimSetLevelByZKeys( VIEW vTZEREMDOrecurs BASED ON LOD TZEREMDO,
                    INTEGER lZKey,
                    INTEGER lParentZkey,
                    SHORT   bFound,
                    VIEW    vSubtask )

   VIEW vParent BASED ON LOD TZEREMDO

   IF bFound != FALSE
      RETURN TRUE
   END

   FOR EACH vTZEREMDOrecurs.ER_DimHierLevel

      IF vTZEREMDOrecurs.ER_DimHierLevel.ZKey = lZKey
         IF lParentZkey = 0
            IF vTZEREMDOrecurs.ER_DimHierLevel.NbrParents = 0
               RETURN TRUE
            END
         ELSE
            CreateViewFromViewForTask( vParent, vTZEREMDOrecurs, 0 )
            ResetViewFromSubobject( vParent )
            IF vParent.ER_DimHierLevel.ZKey = lParentZkey
               DropView( vParent )
               RETURN TRUE
            END
            DropView( vParent )
         END
      END

      // Now process each child
      FOR EACH vTZEREMDOrecurs.ER_DimHierLevelChild
         IF bFound = FALSE
            SetViewToSubobject( vTZEREMDOrecurs, "ER_DimHierLevelChild" )
            bFound = DimSetLevelByZKeys( vTZEREMDOrecurs, lZKey,
                                         lParentZkey, bFound, vSubtask )
            IF bFound = TRUE
               RETURN TRUE
            END

            ResetViewFromSubobject( vTZEREMDOrecurs )
         END
      END
   END

   RETURN bFound
END

/*************************************************************************************************
**
**    OPERATION: dParentNames
**
**    concatenated string of all parents
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dParentNames( VIEW vTZEREMDO BASED ON LOD TZEREMDO,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   SHORT nParents
   STRING ( 1000 ) szNames
   STRING ( 10 ) szOrder

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
      nParents = 0
      szNames = ""
      FOR EACH vTZEREMDO.ER_DimensionLevelParent
         nParents = nParents + 1
         IF nParents > 1
            szNames = szNames + " :: "
         END
         szOrder = vTZEREMDO.ER_DimensionLevelParent.ListOrder
         szNames = szNames + "(" + szOrder + ") "
                 + vTZEREMDO.ER_DimensionLevelParent.Name
      END

      StoreStringInRecord( vTZEREMDO, InternalEntityStructure, InternalAttribStructure, szNames )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: dCardinality
**
**    concatenated string of min and max cardinality
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dCardinality( VIEW vTZEREMDO BASED ON LOD TZEREMDO,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   STRING ( 16 ) CardMin
   STRING ( 16 ) CardMax
   STRING ( 64 ) szCardinality

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
      CardMin = vTZEREMDO.ER_RelLink.CardMin
      CardMax = vTZEREMDO.ER_RelLink.CardMax
      szCardinality = CardMin + " - " + CardMax
      StoreStringInRecord( vTZEREMDO, InternalEntityStructure, InternalAttribStructure, szCardinality )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: DimHierRemoveFlatSide
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DimHierRemoveFlatSide( VIEW ViewToInstance BASED ON LOD TZEREMDO,
                       VIEW vSubtask )

   VIEW vDimWork  BASED ON LOD TZEREMDO
   SHORT nRC

   // Make  sure that there we start at the top level
   // Can't use "ResetView ( vTZEREMDO )" since all cursor positioning is lost
   CreateViewFromViewForTask( vDimWork, ViewToInstance, 0 )
   LOOP
      nRC = ResetViewFromSubobject( vDimWork )
   UNTIL nRC != 0

   // Process multiple Dimension Hierarchies (future) per ER_Entity
   FOR EACH vDimWork.ER_DimensionHier
      // remove all flat side entities
      FOR EACH vDimWork.ER_DimensionLevel
         DropEntity( vDimWork, "ER_DimensionLevel", zREPOS_NONE )
      END
   END

   DropView( vDimWork )

END

TRANSFORMATION OPERATION
ERD_RelationshipCopy(  VIEW NewERD     BASED ON LOD TZEREMDO,
                       VIEW OldERD     BASED ON LOD TZEREMDO,
                       VIEW vSubtask )

   VIEW OldERD2     BASED ON LOD TZEREMDO
   VIEW OldERD3     BASED ON LOD TZEREMDO
   VIEW NewERD2     BASED ON LOD TZEREMDO
   VIEW NewERD3     BASED ON LOD TZEREMDO
   INTEGER FoundInd

   // Copy the Relationship from the source ERD to the target ERD.
   // At the beginning of this operation, we need to be positioned on the ER_RelLink in the source ERD that
   // we need to copy.


   SET CURSOR FIRST OldERD.ER_RelType WHERE OldERD.ER_RelType.ZKey = OldERD.ER_RelType_1.ZKey
   IF RESULT < zCURSOR_SET
      IssueError( OldERD,0,0, "Programming Error ERD Migrate" )
   END
   SET CURSOR LAST NewERD.ER_RelType
   CreateMetaEntity( vSubtask, NewERD, "ER_RelType", zPOS_AFTER )
   SetMatchingAttributesByName( NewERD, "ER_RelType", OldERD, "ER_RelType", zSET_NULL )

   // Create first side of relationship.
   // NewERD will point to this side of relationship.
   CreateMetaEntity( vSubtask, NewERD, "ER_RelLink_2", zPOS_AFTER )
   SetMatchingAttributesByName( NewERD, "ER_RelLink_2", OldERD, "ER_RelLink_2", zSET_NULL )
   SET CURSOR FIRST NewERD.ER_Entity WHERE NewERD.ER_Entity.Name = OldERD.ER_Entity_2.Name
   INCLUDE NewERD.ER_Entity_2 FROM NewERD.ER_Entity
   // Position on other side of relationship just included.
   SET CURSOR FIRST NewERD.ER_RelLink WHERE NewERD.ER_RelLink.ZKey = NewERD.ER_RelLink_2.ZKey

   // We must now do any includes of ER_RelLinkIdentifier under ER_FactType.
   // This is complex because the ER_RelLink entity has no unique logical key
   // (only the ZKey is unique), which makes it difficult to position on the
   // correct ER_RelLink to include. The same is true for ER_RelLinkIdentifier and
   // ER_FactType. We thus have to use the relative position of ER_FactType within
   // ER_Entity to determine position.
   CreateViewFromView( NewERD3, NewERD )
   NAME VIEW NewERD3 "NewERD3"
   CreateViewFromView( OldERD3, OldERD )
   NAME VIEW OldERD3 "OldERD3"
   SET CURSOR FIRST OldERD3.ER_RelLinkIdentifier WITHIN OldERD3.EntpER_Model
              WHERE OldERD3.ER_RelLinkIdentifier.ZKey = OldERD.ER_RelLink_2.ZKey
   LOOP WHILE RESULT >= zCURSOR_SET
      SET CURSOR FIRST NewERD3.ER_Entity WHERE NewERD3.ER_Entity.Name = OldERD3.ER_Entity.Name
      CreateViewFromViewForTask( OldERD2, OldERD3, 0 )
      SET CURSOR FIRST OldERD2.ER_EntIdentifier
      FoundInd = 0
      LOOP WHILE FoundInd = 0
         IF OldERD2.ER_RelLinkIdentifier EXISTS AND
            OldERD2.ER_RelLinkIdentifier.ZKey = OldERD3.ER_RelLinkIdentifier.ZKey

            FoundInd = 1
            INCLUDE NewERD3.ER_RelLinkIdentifier FROM NewERD3.ER_RelLink_2
         ELSE
            SET CURSOR NEXT OldERD2.ER_FactType WITHIN OldERD2.ER_Entity
            SET CURSOR NEXT NewERD3.ER_FactType WITHIN NewERD3.ER_Entity
         END
      END
      DropView( OldERD2 )
      SET CURSOR NEXT OldERD3.ER_RelLinkIdentifier WITHIN OldERD3.EntpER_Model
                WHERE OldERD3.ER_RelLinkIdentifier.ZKey = OldERD.ER_RelLink_2.ZKey
   END
   DropView( NewERD3 )

   // Create second side of relationship.
   // NewERD2 will point to this side of relationship.
   CreateViewFromView( NewERD2, NewERD )
   NAME VIEW NewERD2 "NewERD2"
   SET CURSOR NEXT OldERD.ER_RelLink_2

   CreateMetaEntity( vSubtask, NewERD2, "ER_RelLink_2", zPOS_AFTER )
   SetMatchingAttributesByName( NewERD2, "ER_RelLink_2", OldERD, "ER_RelLink_2", zSET_NULL )
   SET CURSOR FIRST NewERD2.ER_Entity WHERE NewERD2.ER_Entity.Name = OldERD.ER_Entity_2.Name

   INCLUDE NewERD2.ER_Entity_2 FROM NewERD2.ER_Entity
   // Position on other side of relationship just included.
   SET CURSOR FIRST NewERD2.ER_RelLink WHERE NewERD2.ER_RelLink.ZKey = NewERD2.ER_RelLink_2.ZKey

   // We must now do any includes of ER_RelLinkIdentifier under ER_FactType.
   // This is complex because the ER_RelLink entity has no unique logical key
   // (only the ZKey is unique), which makes it difficult to position on the
   // correct ER_RelLink to include. The same is true for ER_RelLinkIdentifier and
   // ER_FactType. We thus have to use the relative position of ER_FactType within
   // ER_Entity to determine position.
   CreateViewFromView( NewERD3, NewERD2 )
   NAME VIEW NewERD3 "NewERD3"
   SET CURSOR FIRST OldERD3.ER_RelLinkIdentifier WITHIN OldERD3.EntpER_Model
              WHERE OldERD3.ER_RelLinkIdentifier.ZKey = OldERD.ER_RelLink_2.ZKey
   LOOP WHILE RESULT >= zCURSOR_SET
      SET CURSOR FIRST NewERD3.ER_Entity WHERE NewERD3.ER_Entity.Name = OldERD3.ER_Entity.Name
      CreateViewFromViewForTask( OldERD2, OldERD3, 0 )
      SET CURSOR FIRST OldERD2.ER_EntIdentifier
      FoundInd = 0
      LOOP WHILE FoundInd = 0
         IF OldERD2.ER_RelLinkIdentifier EXISTS AND
            OldERD2.ER_RelLinkIdentifier.ZKey = OldERD3.ER_RelLinkIdentifier.ZKey

            FoundInd = 1
            INCLUDE NewERD3.ER_RelLinkIdentifier FROM NewERD3.ER_RelLink_2
         ELSE
            SET CURSOR NEXT OldERD2.ER_FactType WITHIN OldERD2.ER_Entity
            SET CURSOR NEXT NewERD3.ER_FactType WITHIN NewERD3.ER_Entity
         END
      END
      DropView( OldERD2 )
      SET CURSOR NEXT OldERD3.ER_RelLinkIdentifier WITHIN OldERD3.EntpER_Model
                WHERE OldERD3.ER_RelLinkIdentifier.ZKey = OldERD.ER_RelLink_2.ZKey
   END
   DropView( OldERD3 )

   // Now include the lower level substructures.
   INCLUDE NewERD.ER_RelLink_Other  FROM NewERD2.ER_RelLink
   INCLUDE NewERD2.ER_RelLink_Other FROM NewERD.ER_RelLink

   DropView( NewERD2 )

END

TRANSFORMATION OPERATION
ERD_Migrate(  VIEW  NewERD     BASED ON LOD TZEREMDO,
              VIEW  SourceLPLR BASED ON LOD TZCMLPLO,
              VIEW  vSubtask )

   VIEW OldERD      BASED ON LOD TZEREMDO
   VIEW OldERD2     BASED ON LOD TZEREMDO
   VIEW OldERD3     BASED ON LOD TZEREMDO
   VIEW NewERD2     BASED ON LOD TZEREMDO
   VIEW CurrentLPLR BASED ON LOD TZCMLPLO
   VIEW TempLPLR    BASED ON LOD TZCMLPLO
   VIEW NewDomainGroup   BASED ON LOD TZDGSRCO

   STRING ( 513 ) SourceFileName     // size according to zMAX_FILESPEC_LTH+1
   STRING ( 513 ) Msg                // size according to zMAX_MESSAGE_LTH+1
   STRING ( 32 )  DomainGroupName
   STRING ( 32 )  DomainName
   STRING ( 1 )   NewEntityFlag
   INTEGER FoundInd
   INTEGER nRC

   // Activate existing source meta OldERD
   SourceFileName = SourceLPLR.LPLR.MetaSrcDir + "\" + SourceLPLR.W_MetaDef.Name + ".PMD"
   ActivateOI_FromFile( OldERD, "TZEREMDO", SourceLPLR, SourceFileName, 8192 )
   // 8192 IS zIGNORE_ATTRIB_ERRORS
   NAME VIEW OldERD "OldERD"

   IF NewERD.EntpER_Model DOES NOT EXIST
      CreateMetaEntity( vSubtask, NewERD, "EntpER_Model", zPOS_AFTER )
      SetMatchingAttributesByName ( NewERD, "EntpER_Model", OldERD, "EntpER_Model", zSET_NULL )
   END

   RetrieveViewForMetaList( vSubtask, CurrentLPLR, zSOURCE_ERD_META )
   ResetViewFromSubobject( CurrentLPLR )
   NewERD.EntpER_Model.Name = CurrentLPLR.LPLR.Name
   NAME VIEW CurrentLPLR "CurrentLPLR"

   // Set up CurrentLPLR and SourceLPLR for Domain lookup.
   // Refer Meta Type is 2003.
   SET CURSOR FIRST SourceLPLR.W_MetaType WHERE SourceLPLR.W_MetaType.Type = 2003
   SET CURSOR FIRST CurrentLPLR.W_MetaType WHERE CurrentLPLR.W_MetaType.Type = 2003

   // First create all "create" entities, "including" only Domain, ER_Entity_2 and
   // ER_AttributeIdentifier.  Then loop again, "including" ER_RelLink_Other.
   FOR EACH OldERD.ER_Entity

      NewEntityFlag = ""
      SET CURSOR FIRST NewERD.ER_Entity WHERE NewERD.ER_Entity.Name = OldERD.ER_Entity.Name
      IF RESULT < zCURSOR_SET
         // Add Entity at end.
         SET CURSOR LAST NewERD.ER_Entity
         CreateMetaEntity( vSubtask, NewERD, "ER_Entity", zPOS_BEFORE )
         SetMatchingAttributesByName( NewERD, "ER_Entity", OldERD, "ER_Entity", zSET_NULL )
         NewEntityFlag = "Y"
      END

      FOR EACH OldERD.ER_Attribute

         SET CURSOR FIRST NewERD.ER_Attribute WHERE NewERD.ER_Attribute.Name = OldERD.ER_Attribute.Name
         IF RESULT < zCURSOR_SET

            // Add the new Attribute since it doesn't exist.
            SET CURSOR LAST NewERD.ER_Attribute
            CreateMetaEntity( vSubtask, NewERD, "ER_Attribute", zPOS_AFTER )
            SetMatchingAttributesByName( NewERD, "ER_Attribute", OldERD, "ER_Attribute", zSET_NULL )

            nRC = 0
            IF OldERD.Domain EXISTS
               SET CURSOR FIRST SourceLPLR.W_MetaDef WHERE SourceLPLR.W_MetaDef.CPLR_ZKey = OldERD.Domain.ZKey
               IF RESULT < zCURSOR_SET
                  SET CURSOR FIRST SourceLPLR.W_MetaDef WHERE
                             SourceLPLR.W_MetaDef.Name = OldERD.Domain.Name
                  IF RESULT < zCURSOR_SET
                     // Somehow the Domain in the ERD is not in the Domain List.
                     DomainName = OldERD.Domain.Name
                     Msg = "Domain '" + DomainName + "' used in the source ERD " +
                           " does not exist in the list of Domains." + NEW_LINE +
                           "Aborting migration. "
                     MessageSend( vSubtask, "ER00411", "ERD Migrate",
                                  Msg,
                                  zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                     RETURN -1
                  END
               END

               SET CURSOR FIRST CurrentLPLR.W_MetaDef WHERE
                          CurrentLPLR.W_MetaDef.Name = SourceLPLR.W_MetaDef.Name
               IF RESULT = zCURSOR_SET
                  // Use TempLPLR in Activate because ActivateMetaOI for a Domain alters the
                  // LPLR position to Domain Group.
                  CreateViewFromViewForTask( TempLPLR, CurrentLPLR, 0 )
                  nRC = ActivateMetaOI( vSubtask, NewDomainGroup, TempLPLR, zREFER_DOMAIN_META, 0 )
                  DropView( TempLPLR )
               ELSE
                  // Indicate DomainGroup must be migrated.
                  nRC = -1
               END

               IF nRC < 0
                  // We couldn't find the Domain in the target LPLR. If its Domain Group
                  // is also not in the target LPLR, we will migrate the Domain Group.
                  // If its Domain Group is already in the target LPLR, we will ask the
                  // operator if he wants to migrate the Domain to the existing Domain
                  // Group. We will give him the choice of:
                  // 1. Migrating the Domain.
                  // 2. Setting the Domain to "Text".
                  // 3. Canceling Migrate.
                  DomainGroupName = SourceLPLR.W_MetaDef.GroupName
                  nRC = ActivateMetaOI_ByName( vSubtask, NewDomainGroup, 0, zSOURCE_DOMAINGRP_META,
                                               zSINGLE, DomainGroupName, 0 )
                  IF nRC < 0
                     ActivateEmptyMetaOI( vSubtask, NewDomainGroup, zSOURCE_DOMAINGRP_META, zSINGLE )
                     Msg = "Auto migration for Domain Group: " + DomainGroupName
                     MessageSend( vSubtask, "ER00403", "ERD Migrate",
                                  Msg,
                                  zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     DomainGrpMigrate( NewDomainGroup,
                                       DomainGroupName,
                                       SourceLPLR, vSubtask )
                  ELSE
                     DomainName = OldERD.Domain.Name
                     Msg = "Domain '" + DomainName + "' used in the source ERD " +
                           " does not exist in the target Domain Group '" +
                           DomainGroupName + "', which is the Domain Group containing " +
                           DomainName + " in the source LPLR.  You have the " +
                           "following three options:" + NEW_LINE +
                           "  YES    - Migrate the Domain " + DomainName +
                           " to Domain Group " + DomainGroupName + "." + NEW_LINE +
                           "  NO     - Use Domain Text instead of Domain " + DomainName + " in the new ERD." + NEW_LINE +
                           "  CANCEL - Cancel ERD Migration. "
                     nRC = MessagePrompt( vSubtask, "ER00406", "ERD Migrate", Msg, 0,
                                          zBUTTONS_YESNOCANCEL, 0, zICON_QUESTION )
                     IF nRC = zRESPONSE_YES
                        // Migrate Domain to existing DomainGroup
                        DomainMigrate( NewDomainGroup,
                                       SourceLPLR.W_MetaDef.Name,
                                       DomainGroupName,
                                       SourceLPLR, vSubtask )
                     ELSE
                        IF nRC = zRESPONSE_NO
                           // Use Text Domain for the Attribute
                           DropMetaOI( vSubtask, NewDomainGroup )
                           nRC = ActivateMetaOI_ByName( vSubtask, NewDomainGroup,
                                                        0, zREFER_DOMAIN_META,
                                                        zSINGLE, "Text", 0 )
                           IF nRC < 0
                              MessageSend( vSubtask, "ER00407", "ERD Migrate",
                                           "Can't load Text Domain. Aborting migrate.",
                                           zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                              RETURN -1
                           END
                        ELSE
                           // Abort ERD migration.
                           RETURN -1
                        END
                     END

                  END
               END

               INCLUDE NewERD.Domain FROM NewDomainGroup.Domain
               DropMetaOI( vSubtask, NewDomainGroup )

            END  // END Attribute processing
         END

      END

      IF NewEntityFlag = "Y"
         // If this is a new entity, migrate any Identifiers.
         FOR EACH OldERD.ER_EntIdentifier
            CreateMetaEntity( vSubtask, NewERD, "ER_EntIdentifier", zPOS_AFTER )
            SetMatchingAttributesByName( NewERD, "ER_EntIdentifier", OldERD, "ER_EntIdentifier", zSET_NULL )
            FOR EACH OldERD.ER_FactType
               CreateMetaEntity( vSubtask, NewERD, "ER_FactType", zPOS_AFTER )
               SetMatchingAttributesByName( NewERD, "ER_FactType", OldERD, "ER_FactType", zSET_NULL )
               IF OldERD.ER_AttributeIdentifier EXISTS
                  SET CURSOR FIRST NewERD.ER_Attribute WHERE NewERD.ER_Attribute.Name = OldERD.ER_AttributeIdentifier.Name
                  INCLUDE NewERD.ER_AttributeIdentifier FROM NewERD.ER_Attribute
               END
            END

         END
      END

   END

   // Migrate ER Relationships based on LOD Entities.
   CreateViewFromView( NewERD2, NewERD )
   NAME VIEW NewERD2 "NewERD2"
   FOR EACH OldERD.ER_Entity

      // Position on same entity in old and new ERD.
      SET CURSOR FIRST NewERD.ER_Entity WHERE NewERD.ER_Entity.Name = OldERD.ER_Entity.Name

      // Migrate via RelLinks under each entity.
      FOR EACH OldERD.ER_RelLink
         SET CURSOR FIRST NewERD.ER_Entity_Other WITHIN NewERD.ER_Entity
                    WHERE NewERD.ER_RelLink.Name      = OldERD.ER_RelLink.Name
                      AND NewERD.ER_Entity_Other.Name = OldERD.ER_Entity_Other.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST NewERD2.ER_Entity WHERE NewERD2.ER_Entity.Name = OldERD.ER_Entity_Other.Name
            SET CURSOR FIRST NewERD2.ER_RelLink_Other WITHIN NewERD2.ER_Entity
                       WHERE NewERD2.ER_RelLink_Other.Name = OldERD.ER_RelLink.Name
                         AND NewERD2.ER_Entity_Other.Name  = OldERD.ER_Entity.Name
         END
         IF RESULT < zCURSOR_SET

            // Copy the ER Relationship
            ERD_RelationshipCopy( NewERD, OldERD, vSubtask )

         END
      END

   END
   DropView( NewERD2 )

   // Now go back and loop through all the ER_FactTypes and delete any that
   // do not have an ER_AttributeIdentifier or an ER_RelLinkIdentifier as a
   // subordinate.  This gets rid of any hanging ER_FactTypes.
   FOR EACH NewERD.ER_FactType WITHIN NewERD.EntpER_Model
      IF NewERD.ER_AttributeIdentifier DOES NOT EXIST AND
         NewERD.ER_RelLinkIdentifier DOES NOT EXIST
         DELETE ENTITY NewERD.ER_FactType NONE
      END
   END

   DropObjectInstance( OldERD )
   CommitMetaOI( vSubtask, NewERD, zSOURCE_ERD_META )

END


TRANSFORMATION OPERATION
ImportADW_Model( VIEW vER_Model BASED ON LOD TZEREMDO,
                 VIEW vADW_Work BASED ON LOD TZERADWO, VIEW vSubtask )

   VIEW        vADW_Work2 BASED ON LOD TZERADWO
   VIEW        vER_Model2 BASED ON LOD TZEREMDO
   VIEW        vDomain BASED ON LOD TZDGSRCO
   INTEGER     nRC
   INTEGER     nXPOS
   INTEGER     nYPOS
   INTEGER     nLastXPOS
   INTEGER     nCount
   STRING (10) CardWork
   STRING (32) QS_Name

   // This section creates ER_Entity entries, ER_Attributes and Domains.
   CreateViewFromViewForTask( vADW_Work2, vADW_Work, 0 )
   CreateViewFromViewForTask( vER_Model2, vER_Model, 0 )

   NAME VIEW vADW_Work2 "***vADW_Work2"
   NAME VIEW vADW_Work  "***vADW_Work"
   NAME VIEW vER_Model2 "***vER_Model2"
   NAME VIEW vER_Model  "***vER_Model"

   // Loop through each object entry that represents an Entity.  These
   // entries have Type = 1007.  The Text value is the Entity name.
   FOR EACH vADW_Work.OI WHERE vADW_Work.OI.Type = 10007
      CreateMetaEntity( vSubtask, vER_Model, "ER_Entity", zPOS_AFTER )

      // Entity Name must have blanks removed.
      QS_Name = vADW_Work.OI.Text
      ConvertStringToQSName( QS_Name )
      vER_Model.ER_Entity.Name = QS_Name

      SET CURSOR FIRST vADW_Work.TI WHERE
                vADW_Work.TI.Key1 = vADW_Work.OI.Key1 AND
                vADW_Work.TI.Type = 30076             AND
                vADW_Work.TI.TextEntrySeqNo = 1
      IF RESULT >= zCURSOR_SET
         vER_Model.ER_Entity.Desc = vADW_Work.TI.Text
      END

      // Loop through each AI entry that is an Attribute of the Entity
      // just processed.  These entries match the Entity on Key1 and are
      // of Type 20007.
      FOR EACH vADW_Work.AI WHERE vADW_Work.AI.Key3 = vADW_Work.OI.Key1 AND
                                 vADW_Work.AI.Type = 20007
         CreateMetaEntity( vSubtask, vER_Model, "ER_Attribute", zPOS_AFTER )
         SET CURSOR FIRST vADW_Work.PI WHERE
                   vADW_Work.PI.Key1 = vADW_Work.AI.Key2 AND
                   vADW_Work.PI.Type = 30011

         // Attribute Name must have blanks removed.
         QS_Name = vADW_Work.PI.Text
         ConvertStringToQSName( QS_Name )
         vER_Model.ER_Attribute.Name = QS_Name
         // set new attribute sequence
         NewAttributeSequence( vER_Model )

         SET CURSOR FIRST vADW_Work.TI WHERE
                   vADW_Work.TI.Key1 = vADW_Work.OI.Key1 AND
                   vADW_Work.TI.Type = 30076             AND
                   vADW_Work.TI.TextEntrySeqNo = 1
         IF RESULT >= zCURSOR_SET
            vER_Model.ER_Attribute.Desc = vADW_Work.TI.Text
         END

         // Now position on the corresponding Info Type.
         // Type 20450 is relationship between Attribute and Info Type.
         // If there is no Info Type for the Attribute, use Text.
         // If there is an Info Type for the Attribute but we cannot find
         // a Domain with the same name, give an error message and use Text.
         SET CURSOR FIRST vADW_Work2.AI WHERE
                   vADW_Work2.AI.Key2 = vADW_Work.AI.Key2 AND
                   vADW_Work2.AI.Type = 20450
         // Initialize nRC for cases where set cursor doesn't find a match.
         nRC = -1
         IF RESULT >= zCURSOR_SET
            SET CURSOR FIRST vADW_Work2.OI WHERE
                      vADW_Work2.OI.Key1 = vADW_Work2.AI.Key3 AND
                      vADW_Work2.OI.Type = 10094
            IF RESULT >= zCURSOR_SET
               // 1. First try to find the InfoType in the InfoType section of
               //    the work object.
               // 2. If it's not found there, then try to Activate it as a Domain.
               // 3. If all that fails, add the InfoType to the work object with
               //    Domain Text.
               SET CURSOR FIRST vADW_Work.InfoTypeDef  WHERE
                  vADW_Work.InfoTypeDef.Mask = vADW_Work2.OI.Text
               IF RESULT >= zCURSOR_SET
                  nRC = ActivateMetaOI_ByName( vSubtask, vDomain, 0,
                                               zREFER_DOMAIN_META,
                                               zSINGLE, vADW_Work.InfoTypeDef.DomainName, 0 )
               ELSE
                  // The InfoType wasn't found in the work object.  Try to Activate it
                  // as a Domain.
                  nRC = ActivateMetaOI_ByName( vSubtask, vDomain, 0,
                                               zREFER_DOMAIN_META,
                                               zSINGLE, vADW_Work2.OI.Text, 0 )
                  IF nRC < 0
                     // As defined in 3. above, we'll add the InfoType to the work
                     // object as Text.
                     CREATE ENTITY vADW_Work.InfoTypeDef
                     vADW_Work.InfoTypeDef.Mask       = vADW_Work2.OI.Text
                     vADW_Work.InfoTypeDef.DomainName = "Text"
                  END
               END
            END
         END

         // If we didn't find the Domain above, we'll access it as Text.
         IF nRC < 1
            nRC = ActivateMetaOI_ByName( vSubtask, vDomain, 0,
                                         zREFER_DOMAIN_META,
                                         zSINGLE, "Text", 0 )
            IF nRC < 1
               MessageSend( vSubtask, "ER00402", "ADW Import",
                            "Undefined Domain: Text",
                             zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END
         END

         // nRC is 1 if we have been able to activate a Domain.
         IF nRC = 1
            INCLUDE vER_Model.Domain FROM vDomain.Domain
            DropMetaOI( vSubtask, vDomain )
         END

      END
   END

   // This section creates ER_RelType entries, ER_RelLinks and includes
   // ER_Entity_2 entries.

   // Loop for Relationship, which is an AI Type of 20044

   FOR EACH vADW_Work.AI WHERE vADW_Work.AI.Type = 20044
      CreateMetaEntity( vSubtask, vER_Model, "ER_RelType", zPOS_AFTER )

      // Position on first Entity of relationship
      SET CURSOR FIRST vADW_Work.OI WHERE
             vADW_Work.OI.Key1 = vADW_Work.AI.Key2
      SET CURSOR FIRST vER_Model.ER_Entity WHERE
             vER_Model.ER_Entity.Name = vADW_Work.OI.Text

      // Create First RelLink and include ER_Entity
      CreateMetaEntity( vSubtask, vER_Model, "ER_RelLink_2", zPOS_AFTER )
      SET CURSOR FIRST vADW_Work.PI WHERE
             vADW_Work.PI.Key1 = vADW_Work.AI.Key1 AND
             vADW_Work.PI.Type = 30034
      vER_Model.ER_RelLink_2.Name = vADW_Work.PI.Text
      SET CURSOR FIRST vADW_Work.PI WHERE
             vADW_Work.PI.Key1 = vADW_Work.AI.Key1 AND
             vADW_Work.PI.Type = 30035
      CardWork = vADW_Work.PI.Text
      vER_Model.ER_RelLink_2.CardMin = CardWork
      SET CURSOR FIRST vADW_Work.PI WHERE
             vADW_Work.PI.Key1 = vADW_Work.AI.Key1 AND
             vADW_Work.PI.Type = 30036
      CardWork = vADW_Work.PI.Text
      vER_Model.ER_RelLink_2.CardMax = CardWork
      INCLUDE vER_Model.ER_Entity_2 FROM vER_Model.ER_Entity

      // Position on second Entity of relationship
      SET CURSOR FIRST vADW_Work2.OI WHERE
             vADW_Work2.OI.Key1 = vADW_Work.AI.Key3
      SET CURSOR FIRST vER_Model2.ER_Entity WHERE
             vER_Model2.ER_Entity.Name = vADW_Work2.OI.Text

      // Create second RelLink and include ER_Entity
      CreateMetaEntity( vSubtask, vER_Model, "ER_RelLink_2", zPOS_AFTER )
      SET CURSOR FIRST vADW_Work2.PI WHERE
             vADW_Work2.PI.Key1 = vADW_Work.AI.Key1 AND
             vADW_Work2.PI.Type = 30037
      vER_Model.ER_RelLink_2.Name = vADW_Work2.PI.Text
      SET CURSOR FIRST vADW_Work2.PI WHERE
             vADW_Work2.PI.Key1 = vADW_Work.AI.Key1 AND
             vADW_Work2.PI.Type = 30038
      CardWork = vADW_Work2.PI.Text
      vER_Model.ER_RelLink_2.CardMin = CardWork
      SET CURSOR FIRST vADW_Work2.PI WHERE
             vADW_Work2.PI.Key1 = vADW_Work.AI.Key1 AND
             vADW_Work2.PI.Type = 30039
      CardWork = vADW_Work2.PI.Text
      vER_Model.ER_RelLink_2.CardMax = CardWork
      INCLUDE vER_Model.ER_Entity_2 FROM vER_Model2.ER_Entity
   END

   DropView ( vADW_Work2 )
   DropView ( vER_Model2 )

   // Go back and complete the relationship path under each
   // ER_RelLink entity.
   FOR EACH vER_Model.ER_RelLink WITHIN vER_Model.EntpER_Model
      IF vER_Model.ER_RelLink_Other DOES NOT EXIST
         SET CURSOR FIRST vER_Model.ER_RelLink_2 WITHIN vER_Model.EntpER_Model
             WHERE vER_Model.ER_RelLink_2.ZKey = vER_Model.ER_RelLink.ZKey
         // Set cursor to the other side of the relationship.
         SET CURSOR NEXT vER_Model.ER_RelLink_2
         IF RESULT < zCURSOR_SET
            SET CURSOR PREVIOUS vER_Model.ER_RelLink_2
         END
         INCLUDE vER_Model.ER_RelLink_Other FROM vER_Model.ER_RelLink_2
      END
   END

   // Finish the process by setting the entity position within the ERD.
   // Initially we will just increment each entity into a grid.
   // The grid will place the first member at (x,y) position (5,5).  We
   // will then increment the X positions by 25 and the y positions by 15.
   // If there are less than 24 entities, we will put 4 in a row.
   // If there are over 24 entities, we will put 8 in a row.

   nCount = 0
   FOR EACH vER_Model.ER_Entity
     nCount = nCount + 1
   END
   IF nCount < 24
      nLastXPOS = 80
   ELSE
      nLastXPOS = 180
   END

   nXPOS = 5
   nYPOS = 5
   FOR EACH vER_Model.ER_Entity
      vER_Model.ER_Entity.ER_DiagramPosX = nXPOS
      vER_Model.ER_Entity.ER_DiagramPosY = nYPOS
      nXPOS = nXPOS + 15
      IF nXPOS > nLastXPOS
         nXPOS = 25
         nYPOS = nYPOS + 8
      END

   END

END


TRANSFORMATION OPERATION
MergeSA_ToER( VIEW vTargetERD BASED ON LOD TZEREMDO,
              VIEW vSourceERD BASED ON LOD TZEREMDO,
              VIEW vSourceSA  BASED ON LOD TZERSASO,
              STRING ( 1 ) szMergeType,
              VIEW vSubtask )

   VIEW    vBrowse     BASED ON LOD TZBRERLO
   INTEGER FoundInd
   SHORT   nRC

   // This routine takes a Source SA and merges all its entities and
   // relationships (that is the entities and relationships of the
   // associated ERD) into the Target ERD.
   // If an entity by the same name exists in the Target ERD, it does not
   // create a new entity, but merges the attributes of the source into
   // the target.
   // It is assumed here that the target ERD exists and has at least the
   // root entity EntpER_Model.

   // A work object, TZBRERLO, is created in the process to list the
   // modifications made to the original ER.

   // Initialize the TZBRERLO object.
   GET VIEW vBrowse NAMED "TZBRERLO"
   IF RESULT >= 0
      DropObjectInstance( vBrowse )
   END
   ACTIVATE vBrowse MULTIPLE EMPTY
   NAME VIEW vBrowse "TZBRERLO"

   // Loop through all the SA entities, and merge the corresponding
   // ERD entities.
   FOR EACH vSourceSA.SA_Entity
      SET CURSOR FIRST vSourceERD.ER_Entity WHERE
          vSourceERD.ER_Entity.ZKey = vSourceSA.ER_Entity.ZKey
      SET CURSOR FIRST vTargetERD.ER_Entity WHERE
          vTargetERD.ER_Entity.Name = vSourceERD.ER_Entity.Name

      // If the entity in the target does not already exist, create it.
      IF RESULT < zCURSOR_SET
         // Create entity in alphabetical order.
         SET CURSOR FIRST vTargetERD.ER_Entity WHERE vTargetERD.ER_Entity.Name > vSourceERD.ER_Entity.Name
         IF RESULT >= zCURSOR_SET
            CreateMetaEntity( vSubtask, vTargetERD, "ER_Entity", zPOS_BEFORE )
         ELSE
            SET CURSOR LAST vTargetERD.ER_Entity
            CreateMetaEntity( vSubtask, vTargetERD, "ER_Entity", zPOS_AFTER )
         END
         SetMatchingAttributesByName ( vTargetERD, "ER_Entity",
                                       vSourceERD, "ER_Entity", zSET_NULL )

         // Create browse information.
         CREATE ENTITY vBrowse.ER_Entity
         vBrowse.ER_Entity.Name      = vSourceERD.ER_Entity.Name
         vBrowse.ER_Entity.Purpose   = vSourceERD.ER_Entity.Purpose
         vBrowse.ER_Entity.MergeType = "New"
      ELSE
         // If the Source is to be forced on top of the Target, set attribute values
         // from the source entity to the target entity.
         IF szMergeType = "S"
            vTargetERD.ER_Entity.Purpose    = vSourceERD.ER_Entity.Purpose
            vTargetERD.ER_Entity.Desc       = vSourceERD.ER_Entity.Desc
            vTargetERD.ER_Entity.OwningArea = vSourceERD.ER_Entity.OwningArea
         END

         // Create browse information.
         CREATE ENTITY vBrowse.ER_Entity
         vBrowse.ER_Entity.Name      = vSourceERD.ER_Entity.Name
         vBrowse.ER_Entity.Purpose   = vSourceERD.ER_Entity.Purpose
         vBrowse.ER_Entity.MergeType = "Update"
      END

      FOR EACH vSourceERD.ER_Attribute

         SET CURSOR FIRST vTargetERD.ER_Attribute WHERE
            vTargetERD.ER_Attribute.Name = vSourceERD.ER_Attribute.Name
         IF RESULT < zCURSOR_SET
            CreateMetaEntity( vSubtask, vTargetERD, "ER_Attribute", zPOS_AFTER )
            SetMatchingAttributesByName ( vTargetERD, "ER_Attribute",
                                          vSourceERD, "ER_Attribute", zSET_NULL )

            // Create browse information.
            CREATE ENTITY vBrowse.Attribute
            vBrowse.Attribute.Name = vSourceERD.ER_Attribute.Name
            vBrowse.Attribute.MergeType = "New"

            // Include the Domain
            IF vSourceERD.Domain EXISTS

               nRC = MergeIncludeDomain( vSubtask, vTargetERD, vSourceERD )
               IF nRC < 0
                  RETURN -1
               END

            END
         ELSE
            // If the Source is to be forced on top of the Target, set matching
            // attributes for the ER_Attribute entity.
            IF szMergeType = "S"
               SetMatchingAttributesByName ( vTargetERD, "ER_Attribute",
                                             vSourceERD, "ER_Attribute", zSET_NOTNULL )
               IF vSourceERD.Domain.Name != vTargetERD.Domain.Name

                  EXCLUDE vTargetERD.Domain
                  nRC = MergeIncludeDomain( vSubtask, vTargetERD, vSourceERD )
                  IF nRC < 0
                     RETURN -1
                  END

               END
            END

         END
      END

      // If there are no attributes underneath a Browse ER_Entity, delete that entity
      // unless it was created as a new ER_Entity (MergeType = "New").
      IF vBrowse.Attribute DOES NOT EXIST AND
         vBrowse.ER_Entity.MergeType != "New"
         DELETE ENTITY vBrowse.ER_Entity
      END

   END

   // Now loop through all the SA Relationships and merge the corresponding
   // ERD Relationships.
   FOR EACH vSourceSA.SA_RelType
      SET CURSOR FIRST vSourceERD.ER_RelType WHERE
         vSourceERD.ER_RelType.ZKey = vSourceSA.ER_RelType.ZKey
      // Now comes the difficult part.  We need to determine if the ER_RelType
      // already exists in the Target ERD.  This is a problem because there
      // is no logical name to equate a source and target relationship.  What
      // we must do is perform a compare on the RelLink names, as well as the
      // Entity Name to which the relationship points.
      FoundInd = 0
      FOR EACH vTargetERD.ER_Entity_2 WITHIN vTargetERD.EntpER_Model
          WHERE vTargetERD.ER_Entity_2.Name = vSourceERD.ER_Entity_2.Name
          AND   vTargetERD.ER_RelLink_2.Name = vSourceERD.ER_RelLink_2.Name
         // Now switch to the other ER_Relink_2 entity of the pair on both
         // source and target to see if they also match.  It's only then that
         // we have a match on the RelType.
         SET CURSOR NEXT vSourceERD.ER_RelLink_2
         IF RESULT < zCURSOR_SET
           SET CURSOR PREVIOUS vSourceERD.ER_RelLink_2
         END
         SET CURSOR NEXT vTargetERD.ER_RelLink_2
         IF RESULT < zCURSOR_SET
           SET CURSOR PREVIOUS vTargetERD.ER_RelLink_2
         END
         IF vTargetERD.ER_RelLink_2.Name = vSourceERD.ER_RelLink_2.Name AND
            vTargetERD.ER_Entity_2.Name  = vSourceERD.ER_Entity_2.Name

            FoundInd = 1
         END
      END

      IF FoundInd = 0  // The RelType was not found, so create it.
         SET CURSOR LAST vTargetERD.ER_RelType
         CreateMetaEntity( vSubtask, vTargetERD, "ER_RelType", zPOS_AFTER )
         SetMatchingAttributesByName ( vTargetERD, "ER_RelType",
                                       vSourceERD, "ER_RelType", zSET_NULL )

         // Create browse information.
         // Add the relationship under each entity involved in the relationship
         // that is in the browse object.
         SET CURSOR FIRST vSourceERD.ER_RelLink_2
         SET CURSOR FIRST vBrowse.ER_Entity WHERE
              vBrowse.ER_Entity.Name = vSourceERD.ER_Entity_2.Name
         IF RESULT >= zCURSOR_SET
            CREATE ENTITY vBrowse.ER_RelLink
            vBrowse.ER_RelLink.FromRelName    = vSourceERD.ER_RelLink_2.Name
            vBrowse.ER_RelLink.FromEntityName = vSourceERD.ER_Entity_2.Name
            SET CURSOR NEXT vSourceERD.ER_RelLink_2
            vBrowse.ER_RelLink.ToRelName      = vSourceERD.ER_RelLink_2.Name
            vBrowse.ER_RelLink.ToEntityName   = vSourceERD.ER_Entity_2.Name
         ELSE
            SET CURSOR NEXT vSourceERD.ER_RelLink_2
         END

         SET CURSOR FIRST vBrowse.ER_Entity WHERE
              vBrowse.ER_Entity.Name = vSourceERD.ER_Entity_2.Name
         IF RESULT >= zCURSOR_SET
            CREATE ENTITY vBrowse.ER_RelLink
            vBrowse.ER_RelLink.FromRelName    = vSourceERD.ER_RelLink_2.Name
            vBrowse.ER_RelLink.FromEntityName = vSourceERD.ER_Entity_2.Name
            SET CURSOR PREVIOUS vSourceERD.ER_RelLink_2
            vBrowse.ER_RelLink.ToRelName      = vSourceERD.ER_RelLink_2.Name
            vBrowse.ER_RelLink.ToEntityName   = vSourceERD.ER_Entity_2.Name
         END

         FOR EACH vSourceERD.ER_RelLink_2
            CreateMetaEntity( vSubtask, vTargetERD, "ER_RelLink_2", zPOS_AFTER )
            SetMatchingAttributesByName ( vTargetERD, "ER_RelLink_2",
                                          vSourceERD, "ER_RelLink_2", zSET_NULL )
            SET CURSOR FIRST vTargetERD.ER_Entity WHERE
                vTargetERD.ER_Entity.Name = vSourceERD.ER_Entity_2.Name
            INCLUDE vTargetERD.ER_Entity_2 FROM vTargetERD.ER_Entity
         END
      ELSE
         // If the Source is to be forced on top of the Target, set matching
         // attributes for the ER_RelLink entities.
         IF szMergeType = "S"
            vTargetERD.ER_RelLink_2.CardMin = vSourceERD.ER_RelLink_2.CardMin
            vTargetERD.ER_RelLink_2.CardMax = vSourceERD.ER_RelLink_2.CardMax
            vTargetERD.ER_RelLink_2.AutoSeq = vSourceERD.ER_RelLink_2.AutoSeq

            SET CURSOR NEXT vSourceERD.ER_RelLink_2
            IF RESULT < zCURSOR_SET
              SET CURSOR PREVIOUS vSourceERD.ER_RelLink_2
            END
            SET CURSOR NEXT vTargetERD.ER_RelLink_2
            IF RESULT < zCURSOR_SET
              SET CURSOR PREVIOUS vTargetERD.ER_RelLink_2
            END
            vTargetERD.ER_RelLink_2.CardMin = vSourceERD.ER_RelLink_2.CardMin
            vTargetERD.ER_RelLink_2.CardMax = vSourceERD.ER_RelLink_2.CardMax
            vTargetERD.ER_RelLink_2.AutoSeq = vSourceERD.ER_RelLink_2.AutoSeq
         END

      END

   END

   // Now loop for each ER_RelLink and include the whole path beneath it.
   FOR EACH vTargetERD.ER_RelLink WITHIN vTargetERD.EntpER_Model
      IF vTargetERD.ER_RelLink_Other DOES NOT EXIST
         SetCursorFirstEntityByEntityCsr ( vTargetERD, "ER_RelLink_2",
                                           vTargetERD, "ER_RelLink", "EntpER_Model" )
         SET CURSOR NEXT vTargetERD.ER_RelLink_2
         IF RESULT != zCURSOR_SET
            SET CURSOR PREVIOUS vTargetERD.ER_RelLink_2
         END
         INCLUDE vTargetERD.ER_RelLink_Other FROM vTargetERD.ER_RelLink_2
      END
   END

   // Finally go back through all the entities and create the Identifiers
   // to both Attributes and Relationships.  It is easier here because the
   // Relationships have already been added under the entity and the
   // Identifier Relationship must be one of those.
   FOR EACH vSourceSA.SA_Entity
      SET CURSOR FIRST vSourceERD.ER_Entity WHERE
          vSourceERD.ER_Entity.ZKey = vSourceSA.ER_Entity.ZKey
      SET CURSOR FIRST vTargetERD.ER_Entity WHERE
          vTargetERD.ER_Entity.Name = vSourceERD.ER_Entity.Name

      FOR EACH vSourceERD.ER_EntIdentifier
         SET CURSOR FIRST vTargetERD.ER_EntIdentifier WHERE
             vTargetERD.ER_EntIdentifier.Name = vSourceERD.ER_EntIdentifier.Name
         IF RESULT < zCURSOR_SET
            CreateMetaEntity( vSubtask, vTargetERD, "ER_EntIdentifier", zPOS_AFTER )
            SetMatchingAttributesByName ( vTargetERD, "ER_EntIdentifier",
                                          vSourceERD, "ER_EntIdentifier", zSET_NULL )
         END

         FOR EACH vSourceERD.ER_FactType

            // Only add ER_FactTypes if they are not already there.  We will determine
            // that by finding a name match on Attribute or on Relationship and Target
            // Entity.
            IF vSourceERD.ER_AttributeIdentifier EXISTS
               SET CURSOR FIRST vTargetERD.ER_AttributeIdentifier WITHIN vTargetERD.ER_EntIdentifier WHERE
                  vTargetERD.ER_AttributeIdentifier.Name = vSourceERD.ER_AttributeIdentifier.Name
               IF RESULT < zCURSOR_SET
                  SET CURSOR LAST vTargetERD.ER_FactType
                  CreateMetaEntity( vSubtask, vTargetERD, "ER_FactType", zPOS_AFTER )
                  SetMatchingAttributesByName ( vTargetERD, "ER_FactType",
                                                vSourceERD, "ER_FactType", zSET_NULL )
                  // Position on the correct Attribute for Attribute identifier
                  SET CURSOR FIRST vTargetERD.ER_Attribute WHERE
                      vTargetERD.ER_Attribute.Name = vSourceERD.ER_AttributeIdentifier.Name
                  INCLUDE vTargetERD.ER_AttributeIdentifier FROM vTargetERD.ER_Attribute
               END
            END
            IF vSourceERD.ER_RelLinkIdentifier  EXISTS
               SET CURSOR FIRST vTargetERD.ER_RelLinkIdentifier WITHIN vTargetERD.ER_EntIdentifier WHERE
                  vTargetERD.ER_RelLinkIdentifier.Name       = vSourceERD.ER_RelLinkIdentifier.Name AND
                  vTargetERD.ER_Entity_Other_Identifier.Name = vSourceERD.ER_Entity_Other_Identifier.Name
               IF RESULT < zCURSOR_SET
                  // Position on the correct ER_RelLinkOther for the
                  // relationship identifier.  If we can't position on the
                  // correct relationship, don't add the FactType.
                  SET CURSOR FIRST vTargetERD.ER_RelLink_Other WITHIN vTargetERD.ER_Entity
                     WHERE vTargetERD.ER_RelLink_Other.Name = vSourceERD.ER_RelLinkIdentifier.Name
                     AND   vTargetERD.ER_Entity_Other.Name  = vSourceERD.ER_Entity_Other_Identifier.Name
                  IF RESULT >= zCURSOR_SET
                     CreateMetaEntity( vSubtask, vTargetERD, "ER_FactType", zPOS_AFTER )
                     SetMatchingAttributesByName ( vTargetERD, "ER_FactType",
                                                   vSourceERD, "ER_FactType", zSET_NULL )
                     INCLUDE vTargetERD.ER_RelLinkIdentifier FROM vTargetERD.ER_RelLink_Other
                  END
               END
            END
         END
      END
   END

END


LOCAL OPERATION
MergeIncludeDomain( VIEW vSubtask,
                    VIEW vTargetERD BASED ON LOD TZEREMDO,
                    VIEW vSourceERD BASED ON LOD TZEREMDO )

   VIEW   vDomainGrp BASED ON LOD TZDGSRCO
   SHORT  nRC

   nRC = ActivateMetaOI_ByName( vSubtask, vDomainGrp, 0, zREFER_DOMAIN_META,
                                0, vSourceERD.Domain.Name, 0 )
   IF nRC < 0
      nRC = ActivateMetaOI_ByName( vSubtask, vDomainGrp, 0, zREFER_DOMAIN_META,
                                   0, "Text", 0 )
      IF nRC < 0
         MessageSend( vSubtask, "ER00402", "SA Merge",
                      "Undefined Domain: Text - Aborting merge.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         return( -1 )
      END
   END

   INCLUDE vTargetERD.Domain FROM vDomainGrp.Domain
   DropView ( vDomainGrp )

END

ENTITY CONSTRAINT OPERATION
IdentifierConstraints( VIEW vERD BASED ON LOD TZEREMDO,
                       STRING ( 32 ) sEntityName,
                       SHORT Event,
                       SHORT State )

   CASE Event
   OF   zECE_ACCEPT:

      // If the entity is fundamental, give a warning error if any
      // relationships are identified as part of an Identifier.
      IF vERD.ER_Entity.Purpose = "F"
         SET CURSOR FIRST vERD.ER_RelLinkIdentifier WITHIN vERD.ER_EntIdentifier
         IF RESULT >= zCURSOR_SET
            MessageSend( vERD, "ER00404", "Identifier Specification",
                         "It is usually not valid for a Fundamental entity to have a relationship as part of an Identifier.",
                         zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         END
      END

      // If the Identifier is system maintained, make sure that there is only one FactType
      // of type attribute and that the Domain for that attribute is of DataType Integer.
      IF vERD.ER_EntIdentifier.SystemMaintained = "Y" AND
         vERD.ER_FactType EXISTS
         SET CURSOR FIRST vERD.ER_FactType
         SET CURSOR NEXT vERD.ER_FactType
         IF RESULT >= zCURSOR_SET
            // Error: More than one FactType exists.
               MessageSend( vERD, "ER00408", "Identifier Specification",
                            "A single Attribute and no Relationship can exist for a System Maintained key.",
                            zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
         ELSE
            IF vERD.ER_AttributeIdentifier EXISTS
               // KJS 08/24/15 - Per request of DG, we are taking out this contraint. In the new world, we want to be
               // able to use db system generated keys, not just zeidon generated keys.
               /*
               SET CURSOR FIRST vERD.ER_Attribute WHERE
                     vERD.ER_Attribute.ZKey = vERD.ER_AttributeIdentifier.ZKey
               IF vERD.Domain.DataType != "L"
                  // Error: System generated Key must be of type Integer.
                  MessageSend( vERD, "ER00409", "Identifier Specification",
                               "An Attribute that is a System Maintained key must have Domain of Data Type Number.",
                               zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                  RETURN -1
               END
               */
            ELSE
               // System Error: Invalid FactType
               MessageSend( vERD, "ER00410", "Identifier Specification",
                            "System Error: FactType without Attribute or Relationship",
                            zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END
         END
      END

        /* end zECE_ACCEPT */
   OF   zECE_CANCEL:

        /* end zECE_CANCEL */
   OF   zECE_CREATE:

        /* end zECE_CREATE */
   OF   zECE_DELETE:

        /* end zECE_DELETE */
   OF   zECE_EXCLUDE:

        /* end zECE_EXCLUDE */
   OF   zECE_INCLUDE:

        /* end zECE_INCLUDE */
   END  /* case */

END

ENTITY CONSTRAINT OPERATION
AttributeConstraints( VIEW vERD BASED ON LOD TZEREMDO,
                      STRING ( 32 ) sEntityName,
                      SHORT Event,
                      SHORT State )

   CASE Event
   OF   zECE_ACCEPT:

      // Make sure that a Domain exists for the Attribute.  If not, give a
      // meaningful message.  (The automatic cardinality message is meaningless.)
      IF vERD.Domain DOES NOT EXIST
         MessageSend( vERD, "ER00404", "Attribute Specification",
                      "A Domain must be selected for the Attribute.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN -1
      END

      // If a DerivedExpression value was entered, make sure the attribute type
      // is work.
      IF vERD.ER_Attribute.DerivedExpression != "" AND
         vERD.ER_Attribute.Work != "Y"

         MessageSend( vERD, "ER00405", "Attribute Specification",
                      "A Derived Expression is only valid on a Work attribute.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN -1
      END

      // If insert new Attribute, then set new Attribute Sequence
      NewAttributeSequence( vERD )

        /* end zECE_ACCEPT */
   OF   zECE_CANCEL:

        /* end zECE_CANCEL */
   OF   zECE_CREATE:

        /* end zECE_CREATE */
   OF   zECE_DELETE:

      // If delete Attribute, then set new Attribute Sequence
      DelAttribFromSequence( vERD )

        /* end zECE_DELETE */
   OF   zECE_EXCLUDE:

        /* end zECE_EXCLUDE */
   OF   zECE_INCLUDE:

        /* end zECE_INCLUDE */
   END  /* case */

END

//************************************************************************************************//
//
//    OPERATION: CompareDataModels
//
TRANSFORMATION OPERATION
CompareDataModels( VIEW CurrentER    BASED ON LOD TZEREMDO,
                   VIEW OtherER      BASED ON LOD TZEREMDO,
                   VIEW CurrentLPLR  BASED ON LOD TZCMLPLO,
                   VIEW OtherLPLR    BASED ON LOD TZCMLPLO,
                   VIEW vSubtask )

   VIEW Work BASED ON LOD TZERRPTO
   STRING ( 100 ) szWork

   // Create the work object TZERRPTO which contains the differences between the two data models.

   ACTIVATE Work EMPTY
   NAME VIEW Work "TZERRPTO"
   CREATE ENTITY Work.Root
   Work.Root.CurrentLPLR_Name = CurrentLPLR.LPLR.Name
   Work.Root.OtherLPLR_Name   = OtherLPLR.LPLR.Name

   // First create the "Deleted Entries", those in the Other ER but not in the Current ER.

   CREATE ENTITY Work.ChangeGroup
   szWork = CurrentLPLR.LPLR.Name
   Work.ChangeGroup.Type = "Deleted Entries in " + szWork

   FOR EACH OtherER.ER_Entity
      SET CURSOR FIRST CurrentER.ER_Entity WHERE
            CurrentER.ER_Entity.Name = OtherER.ER_Entity.Name
      IF RESULT < zCURSOR_SET

         // Process Deleted Entities
         CREATE ENTITY Work.Entity
         Work.Entity.Name = OtherER.ER_Entity.Name
         Work.Entity.Type = "Deleted"
      ELSE

         // Create Entity for deleted attributes or relationships.
         // We will delete it later if there aren't any of those.
         CREATE ENTITY Work.Entity
         Work.Entity.Name = OtherER.ER_Entity.Name
         Work.Entity.Type = "Deleted Children"

         // Process Deleted Attributes
         FOR EACH OtherER.ER_Attribute
            SET CURSOR FIRST CurrentER.ER_Attribute WHERE
                  CurrentER.ER_Attribute.Name = OtherER.ER_Attribute.Name
            IF RESULT < zCURSOR_SET
               CREATE ENTITY Work.Attribute
               Work.Attribute.ChangeDescription = OtherER.ER_Attribute.Name
            END
         END

         // Process Deleted Relationships
         FOR EACH OtherER.ER_RelLink
            SET CURSOR FIRST CurrentER.ER_RelLink WHERE
                  CurrentER.ER_RelLink.Name      = OtherER.ER_RelLink.Name AND
                  CurrentER.ER_Entity_Other.Name = OtherER.ER_Entity_Other.Name
            IF RESULT < zCURSOR_SET
               CREATE ENTITY Work.Relationship
               Work.Relationship.ChangeDescription = Work.Entity.Name + " " +
                       OtherER.ER_RelLink.Name + " " + OtherER.ER_Entity_Other.Name
            END
         END

         IF Work.Attribute    DOES NOT EXIST AND
            Work.Relationship DOES NOT EXIST

            DELETE ENTITY Work.Entity
         END

      END
   END

   // Next create the "Added/Updated Entries", those in the Current ER that are changed from the Other ER.

   CREATE ENTITY Work.ChangeGroup
   Work.ChangeGroup.Type = "Added / Updated Entries to " + szWork

   FOR EACH CurrentER.ER_Entity
      SET CURSOR FIRST OtherER.ER_Entity WHERE
            OtherER.ER_Entity.Name = CurrentER.ER_Entity.Name
      IF RESULT < zCURSOR_SET

         // Process Added Entity
         CREATE ENTITY Work.Entity
         Work.Entity.Name = CurrentER.ER_Entity.Name
         Work.Entity.Type = "Added"

         // Add the attributes for the Added Entity.
         FOR EACH CurrentER.ER_Attribute
            CREATE ENTITY Work.Attribute
            Work.Attribute.ChangeDescription = CurrentER.ER_Attribute.Name
         END

         // Add the relationships for the Added Entity.
         FOR EACH CurrentER.ER_RelLink
            CREATE ENTITY Work.Relationship
            Work.Relationship.ChangeDescription = Work.Entity.Name + " " +
                    CurrentER.ER_RelLink.Name + " " + CurrentER.ER_Entity_Other.Name
         END

      ELSE

         // Create Entity for added attributes or relationships.
         // We will delete it later if there are none.
         CREATE ENTITY Work.Entity
         Work.Entity.Name = CurrentER.ER_Entity.Name
         Work.Entity.Type = "Updated"

         // Process Added / Updated Attributes
         FOR EACH CurrentER.ER_Attribute
            SET CURSOR FIRST OtherER.ER_Attribute WHERE
                  OtherER.ER_Attribute.Name = CurrentER.ER_Attribute.Name
            IF RESULT < zCURSOR_SET
               CREATE ENTITY Work.Attribute
               Work.Attribute.ChangeDescription = CurrentER.ER_Attribute.Name
            END
         END

         // Process Added / Updated Relationships
         FOR EACH CurrentER.ER_RelLink
            SET CURSOR FIRST OtherER.ER_RelLink WHERE
                  OtherER.ER_RelLink.Name      = CurrentER.ER_RelLink.Name AND
                  OtherER.ER_Entity_Other.Name = CurrentER.ER_Entity_Other.Name
            IF RESULT < zCURSOR_SET
               CREATE ENTITY Work.Relationship
               Work.Relationship.ChangeDescription = Work.Entity.Name + " " +
                       CurrentER.ER_RelLink.Name + " " + CurrentER.ER_Entity_Other.Name
            END
         END

         // Delete the entity if there are no changes in children.
         IF Work.Attribute    DOES NOT EXIST AND
            Work.Relationship DOES NOT EXIST

            DELETE ENTITY Work.Entity
         END

      END

   END

END


/*************************************************************************************************
**
**    OPERATION: SetAttributeSequence
**
**    set Attribute Sequence for Data Models without Attribute Sequence
**
*************************************************************************************************/
TRANSFORMATION OPERATION
SetAttributeSequence( VIEW vTZEREMDO BASED ON LOD TZEREMDO )

  VIEW vTZEREMDO_Copy BASED ON LOD TZEREMDO
  INTEGER lSequence

  CreateViewFromViewForTask( vTZEREMDO_Copy, vTZEREMDO, 0 )

  FOR EACH vTZEREMDO_Copy.ER_Entity
      lSequence = 1
      FOR EACH vTZEREMDO_Copy.ER_Attribute
          vTZEREMDO_Copy.ER_Attribute.wkSequence = lSequence
          lSequence = lSequence + 1
      END
  END

  DropView( vTZEREMDO_Copy )
END


/*************************************************************************************************
**
**    OPERATION: NewAttributeSequence
**
**    if insert new Attribute, then set new Attribute Sequence
**
*************************************************************************************************/
TRANSFORMATION OPERATION
NewAttributeSequence( VIEW vTZEREMDO BASED ON LOD TZEREMDO )
   VIEW    vTZEREMDO_Copy BASED ON LOD TZEREMDO
   INTEGER lSequenceNo
   INTEGER lNewSequenceNo

   IF vTZEREMDO.ER_Attribute.wkSequence = ""

      CreateViewFromViewForTask( vTZEREMDO_Copy, vTZEREMDO, 0 )

      // set cursor on previous attribute and get the sequence number
      SET CURSOR PREVIOUS vTZEREMDO_Copy.ER_Attribute
      IF RESULT = zCURSOR_SET
         lSequenceNo = vTZEREMDO_Copy.ER_Attribute.wkSequence
         lSequenceNo = lSequenceNo + 1
      ELSE
         lSequenceNo = 1
      END

      // set new sequence number for the attribute with greater number
      FOR EACH vTZEREMDO_Copy.ER_Attribute
         IF vTZEREMDO_Copy.ER_Attribute.wkSequence >= lSequenceNo
            lNewSequenceNo = vTZEREMDO_Copy.ER_Attribute.wkSequence
            lNewSequenceNo = lNewSequenceNo + 1
            vTZEREMDO_Copy.ER_Attribute.wkSequence = lNewSequenceNo
         END
      END

      // set sequence number for new attribute
      vTZEREMDO.ER_Attribute.wkSequence = lSequenceNo

      DropView( vTZEREMDO_Copy )

   END
END

/*************************************************************************************************
**
**    OPERATION: DelAttribFromSequence
**
**    if delete Attribute, then set new Attribute Sequence
**
*************************************************************************************************/
TRANSFORMATION OPERATION
DelAttribFromSequence( VIEW vTZEREMDO BASED ON LOD TZEREMDO )
   VIEW    vTZEREMDO_Copy BASED ON LOD TZEREMDO
   INTEGER lSequenceNo
   INTEGER lNewSequenceNo

   IF vTZEREMDO.ER_Attribute.wkSequence > 0

      CreateViewFromViewForTask( vTZEREMDO_Copy, vTZEREMDO, 0 )

      lSequenceNo = vTZEREMDO.ER_Attribute.wkSequence

      // set new sequence number for the attribute with greater number
      FOR EACH vTZEREMDO_Copy.ER_Attribute
         IF vTZEREMDO_Copy.ER_Attribute.wkSequence > lSequenceNo
            lNewSequenceNo = vTZEREMDO_Copy.ER_Attribute.wkSequence
            lNewSequenceNo = lNewSequenceNo - 1
            vTZEREMDO_Copy.ER_Attribute.wkSequence = lNewSequenceNo
         END
      END

      DropView( vTZEREMDO_Copy )

   END
END

/*************************************************************************************************
**
**    OPERATION: SortAttributes
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
SortAttributes( VIEW vTZEREMDO BASED ON LOD TZEREMDO )

   VIEW    vTZEREMDO_Copy BASED ON LOD TZEREMDO

   CreateViewFromViewForTask( vTZEREMDO_Copy, vTZEREMDO, 0 )

   FOR EACH vTZEREMDO_Copy.ER_Entity
       IF vTZEREMDO.ER_Attribute EXISTS AND vTZEREMDO.ER_Attribute.wkSequence > 0
          OrderEntityForView( vTZEREMDO_Copy, "ER_Attribute", "wkSequence A" )
       END
   END
   DropView( vTZEREMDO_Copy )
END

/*************************************************************************************************
**
**    OPERATION: MoveAttribInSequence
**
**    move Attribute from a Sequence No to a other Sequence No
**
*************************************************************************************************/
TRANSFORMATION OPERATION
MoveAttribInSequence( VIEW vTZEREMDO BASED ON LOD TZEREMDO )

   VIEW    vTZEREMDO_Copy BASED ON LOD TZEREMDO
   INTEGER lSequenceNo
   INTEGER lOldSequenceNo
   INTEGER lNewSequenceNo

   lOldSequenceNo = vTZEREMDO.ER_Entity.wkSelectedAttributeForDragSort

   IF lOldSequenceNo > 0

      CreateViewFromViewForTask( vTZEREMDO_Copy, vTZEREMDO, 0 )

      // set cursor on previous attribute and get the sequence number
      SET CURSOR PREVIOUS vTZEREMDO_Copy.ER_Attribute
      IF RESULT = zCURSOR_SET
         lNewSequenceNo = vTZEREMDO_Copy.ER_Attribute.wkSequence
         IF lNewSequenceNo <= lOldSequenceNo
            lNewSequenceNo = lNewSequenceNo + 1
         END
      ELSE
         lNewSequenceNo = 1
      END

      // set new sequence number for the attribute with greater number
      FOR EACH vTZEREMDO_Copy.ER_Attribute
         IF lNewSequenceNo < lOldSequenceNo
            AND vTZEREMDO_Copy.ER_Attribute.wkSequence >= lNewSequenceNo
            AND vTZEREMDO_Copy.ER_Attribute.wkSequence <= lOldSequenceNo
            lSequenceNo = vTZEREMDO_Copy.ER_Attribute.wkSequence
            lSequenceNo = lSequenceNo + 1
            vTZEREMDO_Copy.ER_Attribute.wkSequence = lSequenceNo
         ELSE
            IF lNewSequenceNo > lOldSequenceNo
               AND vTZEREMDO_Copy.ER_Attribute.wkSequence >= lOldSequenceNo
               AND vTZEREMDO_Copy.ER_Attribute.wkSequence <= lNewSequenceNo
               lSequenceNo = vTZEREMDO_Copy.ER_Attribute.wkSequence
               lSequenceNo = lSequenceNo - 1
               vTZEREMDO_Copy.ER_Attribute.wkSequence = lSequenceNo
            END
         END
      END

      // set sequence number for new attribute
      vTZEREMDO.ER_Attribute.wkSequence = lNewSequenceNo

      DropView( vTZEREMDO_Copy )

   END
END

/*************************************************************************************************
**
**    OPERATION: ERD_Compare
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ERD_Compare( VIEW TargetERD BASED ON LOD TZEREMDO,
             VIEW SourceERD BASED ON LOD TZEREMDO )

   VIEW TargetERD2 BASED ON LOD TZEREMDO
   INTEGER SourceLength
   INTEGER TargetLength
   STRING ( 5 ) szSourceLength
   STRING ( 5 ) szTargetLength

   // Compare the SourceERD to the Target ERD. We will only show Entities/Attributes/Relationships that are
   // in the Source but not in the Target, and not the other way.

   // Delete any current work entries.
   FOR EACH TargetERD.CompareEntityResult
      DELETE ENTITY TargetERD.CompareEntityResult NONE
   END
   FOR EACH TargetERD.DisplayCompareResult
      DELETE ENTITY TargetERD.DisplayCompareResult NONE
   END

   // Loop through each Source Entity, looking for a match on EntityName.
   FOR EACH SourceERD.ER_Entity
      SET CURSOR FIRST TargetERD.ER_Entity WHERE TargetERD.ER_Entity.Name = SourceERD.ER_Entity.Name
      IF RESULT < zCURSOR_SET
         // There is no match, so create difference for both Attributes and Relationships.
         CREATE ENTITY TargetERD.CompareEntityResult
         TargetERD.CompareEntityResult.EntityName = SourceERD.ER_Entity.Name
         TargetERD.CompareEntityResult.EntityID   = SourceERD.ER_Entity.ZKey
         TargetERD.CompareEntityResult.CompareResultType = "New Entity"

         // Add Attributes.
         FOR EACH SourceERD.ER_Attribute
            CREATE ENTITY TargetERD.CompareAttributeResult
            TargetERD.CompareAttributeResult.AttributeID               = SourceERD.ER_Attribute.ZKey
            TargetERD.CompareAttributeResult.AttributeName             = SourceERD.ER_Attribute.Name
            TargetERD.CompareAttributeResult.SourceDifferentDomainName = SourceERD.Domain.Name
         END

         // Add Relationships.
         FOR EACH SourceERD.ER_RelLink
            CREATE ENTITY TargetERD.CompareRelationshipResult
            TargetERD.CompareRelationshipResult.RelTypeID           = SourceERD.ER_RelType_1.ZKey
            TargetERD.CompareRelationshipResult.ER_RelLinkName      = SourceERD.ER_RelLink.Name
            TargetERD.CompareRelationshipResult.ER_RelLinkOtherName = SourceERD.ER_RelLink_Other.Name
            TargetERD.CompareRelationshipResult.ER_EntityOtherName  = SourceERD.ER_Entity_Other.Name
         END

      ELSE

         // There is a match on Entity. Create Entity entry and look for a match on Attribute.
         // We will delete the entry if there are no Attribute or Relationship differences.
         CREATE ENTITY TargetERD.CompareEntityResult
         TargetERD.CompareEntityResult.EntityName = SourceERD.ER_Entity.Name
         TargetERD.CompareEntityResult.EntityID   = SourceERD.ER_Entity.ZKey
         TargetERD.CompareEntityResult.CompareResultType = "Old Entity"
         FOR EACH SourceERD.ER_Attribute
            SET CURSOR FIRST TargetERD.ER_Attribute WHERE TargetERD.ER_Attribute.Name = SourceERD.ER_Attribute.Name
            IF RESULT < zCURSOR_SET
               // There is no match on Attribute, create new Attribute entry.
               CREATE ENTITY TargetERD.CompareAttributeResult
               TargetERD.CompareAttributeResult.AttributeID               = SourceERD.ER_Attribute.ZKey
               TargetERD.CompareAttributeResult.AttributeName             = SourceERD.ER_Attribute.Name
               TargetERD.CompareAttributeResult.SourceDifferentDomainName = SourceERD.Domain.Name
            ELSE
               // There is a match on Attribute. Compare Domain and String Length.
               IF TargetERD.Domain.Name != SourceERD.Domain.Name
                  // There is no match on Domain.
                  CREATE ENTITY TargetERD.CompareAttributeResult
                  TargetERD.CompareAttributeResult.AttributeID               = SourceERD.ER_Attribute.ZKey
                  TargetERD.CompareAttributeResult.AttributeName             = SourceERD.ER_Attribute.Name
                  TargetERD.CompareAttributeResult.SourceDifferentDomainName = SourceERD.Domain.Name
                  TargetERD.CompareAttributeResult.TargetDifferentDomainName = TargetERD.Domain.Name
               ELSE
                  // There is a match on Domain. For string domains, check for difference on length.
                  IF TargetERD.Domain.DataType = "S"
                     IF SourceERD.ER_Attribute.Lth = ""
                        SourceLength = SourceERD.Domain.MaxStringLth
                     ELSE
                        SourceLength = SourceERD.ER_Attribute.Lth
                     END
                     IF TargetERD.ER_Attribute.Lth = ""
                        TargetLength = TargetERD.Domain.MaxStringLth
                     ELSE
                        TargetLength = TargetERD.ER_Attribute.Lth
                     END
                     IF TargetLength != SourceLength
                        CREATE ENTITY TargetERD.CompareAttributeResult
                        TargetERD.CompareAttributeResult.AttributeID                 = SourceERD.ER_Attribute.ZKey
                        TargetERD.CompareAttributeResult.AttributeName               = SourceERD.ER_Attribute.Name
                        TargetERD.CompareAttributeResult.SourceDifferentDomainName   = TargetERD.Domain.Name
                        TargetERD.CompareAttributeResult.SourceDifferentStringLength = SourceLength
                        TargetERD.CompareAttributeResult.TargetDifferentStringLength = TargetLength
                     END
                  END
               END
            END
         END

         // There is a match on Entity. Now look for a match on Relationship.
         FOR EACH SourceERD.ER_RelLink
            SET CURSOR FIRST TargetERD.ER_RelLink
                       WHERE TargetERD.ER_RelLink.Name       = SourceERD.ER_RelLink.Name
                         AND TargetERD.ER_RelLink_Other.Name = SourceERD.ER_RelLink_Other.Name
                         AND TargetERD.ER_Entity_Other.Name  = SourceERD.ER_Entity_Other.Name
            IF RESULT < zCURSOR_SET
               // No match on Relationship.
               CREATE ENTITY TargetERD.CompareRelationshipResult
               TargetERD.CompareRelationshipResult.RelTypeID           = SourceERD.ER_RelType_1.ZKey
               TargetERD.CompareRelationshipResult.ER_RelLinkName      = SourceERD.ER_RelLink.Name
               TargetERD.CompareRelationshipResult.ER_RelLinkOtherName = SourceERD.ER_RelLink_Other.Name
               TargetERD.CompareRelationshipResult.ER_EntityOtherName  = SourceERD.ER_Entity_Other.Name
            END
         END

         // Eliminate any Entity entry that does not have any Attribute or Relationship differences.
         IF TargetERD.CompareRelationshipResult DOES NOT EXIST AND
            TargetERD.CompareAttributeResult DOES NOT EXIST

            DELETE ENTITY TargetERD.CompareEntityResult NONE
         END
      END
   END

   // Eliminate duplicate Relationship entries since one would be created for each side of the relationship.
   FOR EACH TargetERD.CompareRelationshipResult WITHIN TargetERD.EntpER_Model
      CreateViewFromView( TargetERD2, TargetERD )
      SET CURSOR NEXT TargetERD2.CompareRelationshipResult
                WHERE TargetERD2.CompareRelationshipResult.RelTypeID = TargetERD.CompareRelationshipResult.RelTypeID
      IF RESULT >= zCURSOR_SET
         DELETE ENTITY TargetERD2.CompareRelationshipResult NONE
      END
      DropView( TargetERD2 )
   END

   // Finally build the display entries.
   FOR EACH TargetERD.CompareEntityResult

      // Build Display Entity
      IF TargetERD.CompareEntityResult.CompareResultType = "New Entity"
         CREATE ENTITY TargetERD.DisplayCompareResult
         TargetERD.DisplayCompareResult.MetaID            = TargetERD.CompareEntityResult.EntityID
         TargetERD.DisplayCompareResult.SourceEntityName  = TargetERD.CompareEntityResult.EntityName
         TargetERD.DisplayCompareResult.CompareResultType = "New Entity"
      ELSE
         IF TargetERD.CompareEntityResult.CompareResultType = "Old Entity"
            CREATE ENTITY TargetERD.DisplayCompareResult
            TargetERD.DisplayCompareResult.MetaID            = TargetERD.CompareEntityResult.EntityID
            TargetERD.DisplayCompareResult.SourceEntityName  = TargetERD.CompareEntityResult.EntityName
            TargetERD.DisplayCompareResult.CompareResultType = "Old Entity"
         END
      END

      // Build Attributes.
      FOR EACH TargetERD.CompareAttributeResult
         CREATE ENTITY TargetERD.DisplayCompareResult
         TargetERD.DisplayCompareResult.MetaID              = TargetERD.CompareAttributeResult.AttributeID
         TargetERD.DisplayCompareResult.SourceEntityName    = TargetERD.CompareEntityResult.EntityName
         TargetERD.DisplayCompareResult.SourceAttributeName = TargetERD.CompareAttributeResult.AttributeName
         TargetERD.DisplayCompareResult.CompareResultType = "Attr"
         IF TargetERD.CompareAttributeResult.TargetDifferentDomainName != ""
            TargetERD.DisplayCompareResult.DomainDifference  = TargetERD.CompareAttributeResult.TargetDifferentDomainName + "/" +
                                                               TargetERD.CompareAttributeResult.SourceDifferentDomainName
            TargetERD.DisplayCompareResult.CompareResultType = "Domain"
         ELSE
            IF TargetERD.CompareAttributeResult.TargetDifferentStringLength != ""
               szSourceLength = TargetERD.CompareAttributeResult.SourceDifferentStringLength
               szTargetLength = TargetERD.CompareAttributeResult.TargetDifferentStringLength
               TargetERD.DisplayCompareResult.DomainDifference = "Str Lth " + szSourceLength + "/" + szTargetLength
               TargetERD.DisplayCompareResult.CompareResultType = "String Lth"
            END
         END

      END

      // Build Relationships.
      FOR EACH TargetERD.CompareRelationshipResult
         CREATE ENTITY TargetERD.DisplayCompareResult
         TargetERD.DisplayCompareResult.MetaID                 = TargetERD.CompareRelationshipResult.RelTypeID
         TargetERD.DisplayCompareResult.SourceEntityName       = TargetERD.CompareEntityResult.EntityName
         TargetERD.DisplayCompareResult.SourceRelationshipName = TargetERD.CompareRelationshipResult.ER_RelLinkName + " " +
                                                                 TargetERD.CompareRelationshipResult.ER_EntityOtherName
         TargetERD.DisplayCompareResult.CompareResultType = "Rel"
      END

   END

END

/*************************************************************************************************
**
**    OPERATION: ERD_Merge
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ERD_Merge( VIEW TargetERD BASED ON LOD TZEREMDO,
           VIEW SourceERD BASED ON LOD TZEREMDO,
           VIEW vSubtask )

   VIEW TargetERD2     BASED ON LOD TZEREMDO
   VIEW SourceERD2     BASED ON LOD TZEREMDO
   VIEW CurrentLPLR    BASED ON LOD TZCMLPLO
   VIEW SourceLPLR     BASED ON LOD TZCMLPLO
   VIEW NewDomain      BASED ON LOD TZDGSRCO
   STRING ( 200 ) szFileName
   STRING ( 300 ) szMsg
   STRING ( 32 )  DomainName
   SHORT          nRC
   INTEGER        MetaID
   INTEGER        Count

   // Merge the SourceERD into the TargetERD based on the selection specified in the
   // CompareEntityResult and CompareOperationResult subobjects in TargetERD.

   // If an LPLR Name has been specified, activate the XLP and pass the File Directory structure to any
   // sub-operations so that necessary Domains can be imported.
   // Also activate the Source ERD.
   GET VIEW CurrentLPLR NAMED "TaskLPLR"
   IF CurrentLPLR.LPLR.wMergeSourceLPLR_Name != ""
      szFileName = CurrentLPLR.LPLR.wFullyQualifiedFileName + "\bin\" +
                   CurrentLPLR.LPLR.wMergeSourceLPLR_Name + ".XLP"
      nRC = ActivateOI_FromFile( SourceLPLR, "TZCMLPLO", TargetERD, szFileName, zSINGLE )
      IF nRC >= 0
         NAME VIEW SourceLPLR "SourceLPLR"
      ELSE
         MessageSend( TargetERD, "", "ERD Merge",
                      "The LPLR Name specified does not have an XLP file. No Source ERD will be used.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SourceLPLR = 0
      END
   ELSE
      SourceLPLR = 0
   END

   // Loop through the selected Display entries and copy over those selected Entities, Attributes and Relationships.
   FOR EACH TargetERD.DisplayCompareResult
      IF TargetERD.DisplayCompareResult.SelectedFlag = "Y"
         // ER_Entity Type.
         IF TargetERD.DisplayCompareResult.CompareResultType = "New Entity" OR
            TargetERD.DisplayCompareResult.CompareResultType = "Old Entity"

            // New or OLD ER_Entity Type
            IF TargetERD.DisplayCompareResult.CompareResultType = "Old Entity"
               // We're adding Attributes and/or Relationships to an existing entity. Position on the ER_Entity in
               // both Source and Target OI's.
               SET CURSOR FIRST SourceERD.ER_Entity WHERE SourceERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
               SET CURSOR FIRST TargetERD.ER_Entity WHERE TargetERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
            ELSE
               // We're adding a new Entity. Position on the ER_Entity in the Source OI and copy to Target OI.
               SET CURSOR FIRST SourceERD.ER_Entity WHERE SourceERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
               SET CURSOR LAST TargetERD.ER_Entity
               CreateMetaEntity( vSubtask, TargetERD, "ER_Entity", zPOS_AFTER )
               SetMatchingAttributesByName( TargetERD, "ER_Entity", SourceERD, "ER_Entity", zSET_NULL )
            END

            // Turn off selected flag so if we execute again, we won't repeat this entry.
            TargetERD.DisplayCompareResult.SelectedFlag = ""

         ELSE

            // Attribute Type.
            IF TargetERD.DisplayCompareResult.CompareResultType = "Attr"

               // Make sure we're positioned on correct Target ER_Entity.
               IF TargetERD.ER_Entity.Name != TargetERD.DisplayCompareResult.SourceEntityName
                  SET CURSOR FIRST TargetERD.ER_Entity
                             WHERE TargetERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
                  IF RESULT < zCURSOR_SET
                     szMsg = "Entity " + TargetERD.DisplayCompareResult.SourceEntityName  +
                             " for Attribute " + TargetERD.DisplayCompareResult.SourceAttributeName +
                             " does not exist in the current ERD. The Merge function is aborted."
                     MessageSend( TargetERD, "", "ERD Merge", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                     RETURN -1
                  END
               END

               // Make sure we're positioned on correct Source ER_Entity and ER_Attribute.
               IF SourceERD.ER_Entity.Name != TargetERD.DisplayCompareResult.SourceEntityName
                  SET CURSOR FIRST SourceERD.ER_Entity
                             WHERE SourceERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
               END
               SET CURSOR FIRST SourceERD.ER_Attribute WHERE SourceERD.ER_Attribute.Name = TargetERD.DisplayCompareResult.SourceAttributeName

               // Create ER_Attribute at end of current ER_Attributes.
               SET CURSOR LAST TargetERD.ER_Attribute
               CreateMetaEntity( vSubtask, TargetERD, "ER_Attribute", zPOS_AFTER )
               SetMatchingAttributesByName( TargetERD, "ER_Attribute", SourceERD, "ER_Attribute", zSET_NULL )

               // Get Domain or create new Domain.
               DomainName = SourceERD.Domain.Name
               nRC = ActivateMetaOI_ByName( vSubtask, NewDomain, 0, zREFER_DOMAIN_META, zSINGLE, DomainName, 0 )
               IF nRC >= 0
                  // The Domain exists in Current LPLR, so include it here.
                  INCLUDE TargetERD.Domain FROM NewDomain.Domain
                  DropMetaOI( vSubtask, NewDomain )
               ELSE
                  // The Domain doesn't exist in Current LPLR, so add it, if there is a Source LPLR.
                  IF SourceLPLR != 0
                     DomainAddForMerge( NewDomain, SourceLPLR, CurrentLPLR,
                                        CurrentLPLR.LPLR.wFullyQualifiedFileName,    // Source LPLR Directory Structure
                                        DomainName, vSubtask )
                  ELSE
                     szMsg = "Domain, " + DomainName + ", from the Source ERD does not exist in the current LPLR and " +
                             "no Source LPLR was specified. The Merge function is aborted."
                     MessageSend( TargetERD, "", "ERD Merge", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                     RETURN -1
                  END
               END

               // Turn off selected flag so if we execute again, we won't repeat this entry.
               TargetERD.DisplayCompareResult.SelectedFlag = ""

            END

         END
      END
   END

   // Remove any duplication Relationship requests, as the User could have selected each side of the Relationship.
   FOR EACH TargetERD.DisplayCompareResult
      IF TargetERD.DisplayCompareResult.SelectedFlag = "Y"
         IF TargetERD.DisplayCompareResult.CompareResultType = "Rel"
            CreateViewFromView( TargetERD2, TargetERD )
            // DonC 3/10/2010: The following SET CURSOR NEXT statement was keeping position on the same entity. (In other words,
            // it was starting the search on the current entity not the next entity.) Thus the code following was used instead.
            //SET CURSOR NEXT TargetERD2.DisplayCompareResult WHERE TargetERD2.DisplayCompareResult.MetaID = TargetERD.DisplayCompareResult.MetaID
            Count = 0
            MetaID = TargetERD.DisplayCompareResult.MetaID
            FOR EACH TargetERD2.DisplayCompareResult
               IF TargetERD2.DisplayCompareResult.MetaID = MetaID
                  Count = Count + 1
                  IF Count > 1
                     TargetERD2.DisplayCompareResult.SelectedFlag = ""
                  END
               END
            END
            DropView( TargetERD2 )
         END
      END
   END

   // We will handle Relationships in a separate pass, because we may need to add the ER_Entities above.
   FOR EACH TargetERD.DisplayCompareResult
      IF TargetERD.DisplayCompareResult.SelectedFlag = "Y"
         // Relationship Type.
         IF TargetERD.DisplayCompareResult.CompareResultType = "Rel"

            // First position on the Relationship to be copied in the Source ERD.
            SET CURSOR FIRST SourceERD.ER_RelType WHERE SourceERD.ER_RelType.ZKey = TargetERD.DisplayCompareResult.MetaID
            SET CURSOR LAST TargetERD.ER_RelType

            // SourceERD2/TargetERD2 will be positioned on one ER_Entity of the relationship and SourceERD/TargetERD will
            // be positioned on the other.

            // First SourceERD/TargetERD.
            SET CURSOR FIRST TargetERD.ER_Entity WHERE TargetERD.ER_Entity.Name = SourceERD.ER_Entity_2.Name
            IF RESULT < zCURSOR_SET
               szMsg = "Entity, " + SourceERD.ER_Entity_2.Name + ", of Relationship does not exist. The Copy Relationship function is aborted."
               MessageSend( TargetERD, "", "ERD Merge", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END

            // Second SourceERD2/TargetERD2.
            CreateViewFromView( SourceERD2, SourceERD )
            CreateViewFromView( TargetERD2, TargetERD )
            NAME VIEW TargetERD2 "TargetERD2"
            SET CURSOR NEXT SourceERD2.ER_RelLink_2
            SET CURSOR FIRST TargetERD2.ER_Entity WHERE TargetERD2.ER_Entity.Name = SourceERD2.ER_Entity_2.Name
            IF RESULT < zCURSOR_SET
               szMsg = "Entity, " + SourceERD2.ER_Entity_2.Name + ", of Relationship does not exist. The Copy Relationship function is aborted."
               MessageSend( TargetERD, "", "ERD Merge", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
               RETURN -1
            END

            // Create Relationship in Target.
            CreateMetaEntity( vSubtask, TargetERD, "ER_RelType", zPOS_AFTER )
            SetMatchingAttributesByName( TargetERD, "ER_RelType", SourceERD, "ER_RelType", zSET_NULL )

            // TargetERD Relationship Side.
            CreateMetaEntity( vSubtask, TargetERD, "ER_RelLink_2", zPOS_AFTER )
            SetMatchingAttributesByName( TargetERD, "ER_RelLink_2", SourceERD, "ER_RelLink_2", zSET_NULL )
            INCLUDE TargetERD.ER_Entity_2 FROM TargetERD.ER_Entity

            SET CURSOR FIRST TargetERD.ER_RelLink WHERE TargetERD.ER_RelLink.ZKey = TargetERD.ER_RelLink_2.ZKey

            // TargetERD Relationship Side.
            CreateMetaEntity( vSubtask, TargetERD, "ER_RelLink_2", zPOS_AFTER )
            SetMatchingAttributesByName( TargetERD, "ER_RelLink_2", SourceERD2, "ER_RelLink_2", zSET_NULL )
            INCLUDE TargetERD.ER_Entity_2 FROM TargetERD2.ER_Entity

            // Now include the lower level substructures.
            // We will first have to position TargetERD2 on the new RelType and on the first RelLink for that type.
            // TargetERD is already positioned on the 2nd RelLink.
            // We will also have to position TargetERD2 on the correct ER_RelLink for the corresponding ER_RelLink_2
            // for the 2nd side of the relationship (the TargetERD.ER_RelLink_2 entity).
            SET CURSOR FIRST TargetERD2.ER_RelType WHERE TargetERD2.ER_RelType.ZKey = TargetERD.ER_RelType.ZKey
            SET CURSOR FIRST TargetERD2.ER_RelLink WHERE TargetERD2.ER_RelLink.ZKey = TargetERD.ER_RelLink_2.ZKey
            INCLUDE TargetERD.ER_RelLink_Other  FROM TargetERD2.ER_RelLink
            INCLUDE TargetERD2.ER_RelLink_Other FROM TargetERD.ER_RelLink
            DropView( TargetERD2 )
            DropView( SourceERD2 )

         END
      END
   END

   // We will handle Identifiers for New Entities in a separate pass, because we may need to add necessary Attributes above.
   FOR EACH TargetERD.DisplayCompareResult
      IF TargetERD.DisplayCompareResult.SelectedFlag = "Y"
         // Relationship Type.
         IF TargetERD.DisplayCompareResult.CompareResultType = "New Entity"

            // Position on Source and Target ER_Entities and loop through each Source Identifier to create Target entries.
            SET CURSOR FIRST SourceERD.ER_Entity WHERE SourceERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
            SET CURSOR FIRST TargetERD.ER_Entity WHERE TargetERD.ER_Entity.Name = TargetERD.DisplayCompareResult.SourceEntityName
            FOR EACH SourceERD.ER_EntIdentifier
               // Identifier.
               CreateMetaEntity( vSubtask, TargetERD, "ER_EntIdentifier", zPOS_AFTER )
               SetMatchingAttributesByName( TargetERD, "ER_EntIdentifier", SourceERD, "ER_EntIdentifier", zSET_NULL )

               // Multiple FactTypes per Identifier.
               FOR EACH SourceERD.ER_FactType
                  // We'll only handle Attribute FactTypes at this time.
                  IF SourceERD.ER_RelLinkIdentifier EXISTS
                     IssueError( vSubtask,0,0, "RelLink Identifiers are not being handled at this time." )
                  ELSE
                     // Create FactType.
                     CreateMetaEntity( vSubtask, TargetERD, "ER_FactType", zPOS_AFTER )
                     SetMatchingAttributesByName( TargetERD, "ER_FactType", SourceERD, "ER_EntIdentifier", zSET_NULL )
                     SET CURSOR FIRST TargetERD.ER_Attribute WHERE TargetERD.ER_Attribute.Name = SourceERD.ER_AttributeIdentifier.Name
                     INCLUDE TargetERD.ER_AttributeIdentifier FROM TargetERD.ER_Attribute
                  END
               END

            END

         END
      END
   END

END

/*************************************************************************************************
**
**    OPERATION: ConvertZKeyDomains
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ConvertZKeyDomains( VIEW vERD BASED ON LOD TZEREMDO )

   VIEW vDomain BASED ON LOD TZDGSRCO
   SHORT  nRC

   // Convert all ZKey Attributes to use the ZKey Domain.
   nRC = ActivateMetaOI_ByName( vERD, vDomain, 0, zREFER_DOMAIN_META, zSINGLE, "ZKey", 0 )
   IF nRC < 0
      MessageSend( vERD, "", "ZKey Domains", "No ZKey Domain has been defined.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN -1
   END
   NAME VIEW vDomain "ZKey_Domain"
   IssueError( vERD,0,0, "after activate" )

   FOR EACH vERD.ER_Entity
      SET CURSOR FIRST vERD.ER_Attribute WHERE vERD.ER_Attribute.Name = "ZKey"
      IF RESULT >= zCURSOR_SET
         EXCLUDE vERD.Domain
         INCLUDE vERD.Domain FROM vDomain.Domain
      END
   END

END


// Generate ID Identifiers for each ER Entity
// 1. Without any current Identifier
// 2. With an attribute named ID

TRANSFORMATION OPERATION
GenerateID_Identifiers( VIEW vERD BASED ON LOD TZEREMDO )

   FOR EACH vERD.ER_Entity
      IF vERD.ER_EntIdentifier DOES NOT EXIST
         SET CURSOR FIRST vERD.ER_Attribute WHERE vERD.ER_Attribute.Name = "ID"
         IF RESULT >= zCURSOR_SET
            CreateMetaEntity( vERD, vERD, "ER_EntIdentifier", zPOS_AFTER )
            vERD.ER_EntIdentifier.Name = vERD.ER_Attribute.Name
            vERD.ER_EntIdentifier.SystemMaintained = "Y"
            CreateMetaEntity( vERD, vERD, "ER_FactType", zPOS_AFTER )
            vERD.ER_FactType.Type = "ATR"
            INCLUDE vERD.ER_AttributeIdentifier FROM vERD.ER_Attribute
         END
      END

   END
   SET CURSOR FIRST vERD.ER_Entity
END

