/*
** TZEDCMPD.VML
CHANGE LOG
2001.09.13  DC
   Added back operation Prebuild_Init for window "Init" that was incorrectly
   deleted during clean up.
2001.08.21  BL
   Added Operation SystemClose_Init for DG Window "Init"
2001.06.30  BL
   Maintained Compiler Specification
2000.10.23  SR  Z2000 Size of path variables
   Modified size of szName and szDLL_Name in function RebuildTargetList
   because size of attributes ExecDir, MetaSrcDir and PgmSrcDir has
   been changed to 254 in datamodel.
2000.01.13  BL
   set comments for unreferenced local variable
1999.10.29  DGC  Z10
   Updated variables sizes to handle longer file names.
1999.04.13  DGC  Z10
   Added zIGNORE_ATTRIB_ERRORS to all ActivateOI_FromFile() calls.
14.11.96 GT
   In RebuildTargetList: Don't show Targets without source
20.03.97 GT
   Allow external libs/objs in a compiler spec
30.06.97 GT
   Delete no more existing Targets from external Target list
23.10.97 DonC
   Added NONE to "DELETE ENTITY vTaskLPLR.ExternalTarget" within loop
   so that no entries would be skipped when deleting.
11.11.97 GT
   Take external libs/objs, too, when copying a compiler spec
*/




/*
    This operation rebuilds the TargetExecutable information stored in
    the LPLR OI.  The TargetExecutable contains the name of the target
    executable (eg. .DLL) and all Global Operation Groups, LODs, and
    Dialogs that make up the executable.
*/
DIALOG OPERATION
RebuildTargetList( VIEW vSubtask )
   VIEW vTaskLPLR REGISTERED AS TaskLPLR
   VIEW vMetaList BASED ON LOD TZCMLPLO
   VIEW vGOG_Meta BASED ON LOD TZOGSRCO
   VIEW vDLG_Meta BASED ON LOD TZWDLGSO
   VIEW vLOD_Meta BASED ON LOD TZZOLODO
   VIEW vDomainMeta BASED ON LOD TZDGSRCO
   STRING ( 513 ) szName                    // zMAX_FILESPEC_LTH+1
   STRING ( 513 ) szDLL_Name                // zMAX_FILESPEC_LTH+1
   STRING ( 513 ) szMsg                     // zMAX_MESSAGE_LTH+1
   INTEGER nRC

   // Delete all the TargetExecutable entities.
   FOR EACH vTaskLPLR.TargetExecutable
       DELETE ENTITY vTaskLPLR.TargetExecutable NONE
   END

   // Loop through each of the metas that have operations: Operation
   // groups, dialogs, objects, and domains and retrieve the name of
   // the target executable from each one.

   // Retrieve every Global Operation Group meta and copy every source file
   // reference to TargetExecutable.
   RetrieveViewForMetaList( vSubtask, vMetaList, zREFER_GOPGRP_META )
   FOR EACH vMetaList.W_MetaDef
       szMsg = "Searching Operation Group " + vMetaList.W_MetaDef.Name
       MB_SetMessage( vSubtask, 0, szMsg )

       szName = vTaskLPLR.LPLR.MetaSrcDir + "\" + vMetaList.W_MetaDef.Name + ".POG"
       nRC = ActivateOI_FromFile( vGOG_Meta, "TZOGSRCO", vSubtask,
                                  szName, zACTIVATE_ROOTONLY + zIGNORE_ATTRIB_ERRORS )

       IF nRC >= 0
          szDLL_Name = vGOG_Meta.GlobalOperationGroup.DomainAndGlobalOpGroupName
          // KJS 02/25/15 - In the java world, we don't put values in the DLL_Name field, so 
          // use the object name in the list.
          IF szDLL_Name = ""
             szDLL_Name = vGOG_Meta.GlobalOperationGroup.Name   
          END

          IF szDLL_Name != ""
             // Check to see if the DLL name of the GOPGRP is specified as a
             // TargetExecutable.  If not, create it.
             // NOTE: Assume that the DLL name for the group is the group name!!!
             SET CURSOR FIRST vTaskLPLR.TargetExecutable
                        WHERE vTaskLPLR.TargetExecutable.Name = szDLL_Name
             IF RESULT < zCURSOR_SET
                CREATE ENTITY vTaskLPLR.TargetExecutable LAST
                vTaskLPLR.TargetExecutable.Name = szDLL_Name
             END

             // Add the GOP meta to the Target's list.
             CREATE ENTITY vTaskLPLR.Meta
             vTaskLPLR.Meta.Name = vGOG_Meta.GlobalOperationGroup.Name
             vTaskLPLR.Meta.ZKey = vGOG_Meta.GlobalOperationGroup.ZKey
             SetAttributeFromInteger( vTaskLPLR, "Meta", "MetaType", zREFER_GOPGRP_META )
          END

          DropObjectInstance( vGOG_Meta )
       END
   END

   DropView( vMetaList )

   // Retrieve every Dialog meta and copy every source file reference
   // to TargetExecutable.
   RetrieveViewForMetaList( vSubtask, vMetaList, zREFER_DIALOG_META )
   FOR EACH vMetaList.W_MetaDef
       szMsg = "Searching Dialog " + vMetaList.W_MetaDef.Name
       MB_SetMessage( vSubtask, 0, szMsg )

       szName = vTaskLPLR.LPLR.MetaSrcDir + "\" + vMetaList.W_MetaDef.Name + ".PWD"
       nRC = ActivateOI_FromFile( vDLG_Meta, "TZWDLGSO", vSubtask,
                                  szName, zSINGLE + zIGNORE_ATTRIB_ERRORS )

       IF nRC >= 0
          szDLL_Name = vDLG_Meta.Dialog.DLL_Name
          // KJS 02/25/15 - In the java world, we don't put values in the DLL_Name field, so 
          // use the object name in the list.
          IF szDLL_Name = ""
             szDLL_Name = vDLG_Meta.Dialog.Tag  
          END

          // Show only dialogs with source in target list
          // these dialogs have an DLL name
          IF szDLL_Name != ""

              SET CURSOR FIRST vTaskLPLR.TargetExecutable
                         WHERE vTaskLPLR.TargetExecutable.Name = szDLL_Name
              IF RESULT < zCURSOR_SET
                 CREATE ENTITY vTaskLPLR.TargetExecutable LAST
                 vTaskLPLR.TargetExecutable.Name = szDLL_Name
              END

              CREATE ENTITY vTaskLPLR.Meta
              vTaskLPLR.Meta.Name = vDLG_Meta.Dialog.Tag
              vTaskLPLR.Meta.ZKey = vDLG_Meta.Dialog.ZKey
              SetAttributeFromInteger( vTaskLPLR, "Meta", "MetaType", zREFER_DIALOG_META )
          END

          DropObjectInstance( vDLG_Meta )
      END
   END

   DropView( vMetaList )

   // Retrieve every LOD meta and copy every source file reference
   // to TargetExecutable.
   RetrieveViewForMetaList( vSubtask, vMetaList, zREFER_LOD_META )
   FOR EACH vMetaList.W_MetaDef
       IF vMetaList.W_MetaDef.Name != "KZMSGQOO"
          szMsg = "Searching Object Definition " + vMetaList.W_MetaDef.Name
          MB_SetMessage( vSubtask, 0, szMsg )

          szName = vTaskLPLR.LPLR.MetaSrcDir + "\" + vMetaList.W_MetaDef.Name + ".LOD"
          nRC = ActivateOI_FromFile( vLOD_Meta, "TZZOLODO", vSubtask,
                                     szName, zSINGLE + zIGNORE_ATTRIB_ERRORS )

          // If DLL_Name isn't set, then assume that there is no target
          // executable for the LOD.
          IF nRC >= 0
             szDLL_Name = vLOD_Meta.LOD.DLL_Name
          // KJS 02/25/15 - In the java world, we don't put values in the DLL_Name field, so 
          // use the object name in the list.
          IF szDLL_Name = ""
             szDLL_Name = vLOD_Meta.LOD.Name   
          END

             // Show only LODs with source in target list
             // these LODs have an DLL name
             IF szDLL_Name != ""
                SET CURSOR FIRST vLOD_Meta.Operation WITHIN vLOD_Meta.LOD
                IF RESULT >= zCURSOR_SET
                   // Check to see if the DLL name of the LOD is specified as a
                   // TargetExecutable.  If not, create it.
                   SET CURSOR FIRST vTaskLPLR.TargetExecutable
                              WHERE vTaskLPLR.TargetExecutable.Name = szDLL_Name
                   IF RESULT < zCURSOR_SET
                      CREATE ENTITY vTaskLPLR.TargetExecutable LAST
                      vTaskLPLR.TargetExecutable.Name = szDLL_Name
                   END

                   CREATE ENTITY vTaskLPLR.Meta
                   vTaskLPLR.Meta.Name = vLOD_Meta.LOD.Name
                   vTaskLPLR.Meta.ZKey = vLOD_Meta.LOD.ZKey
                   SetAttributeFromInteger( vTaskLPLR, "Meta", "MetaType", zREFER_LOD_META )
                END
             END

             DropObjectInstance( vLOD_Meta )
          END
       END
   END

   DropView( vMetaList )

   // Retrieve every Domain Group meta and copy every source file
   // reference to TargetExecutable.
   RetrieveViewForMetaList( vSubtask, vMetaList, zREFER_DOMAINGRP_META )
   FOR EACH vMetaList.W_MetaDef
       szMsg = "Searching Domain Group " + vMetaList.W_MetaDef.Name
       MB_SetMessage( vSubtask, 0, szMsg )

       szName = vTaskLPLR.LPLR.MetaSrcDir + "\" + vMetaList.W_MetaDef.Name + ".PDG"
       nRC = ActivateOI_FromFile( vDomainMeta, "TZDGSRCO", vSubtask,
                                  szName, zSINGLE + zIGNORE_ATTRIB_ERRORS )

       IF nRC >= 0 AND vDomainMeta.Operation EXISTS
          szDLL_Name = vDomainMeta.DomainGroup.DomainAndGlobalOpGroupName

          IF szDLL_Name != ""
             IF szDLL_Name != "TZAPDMAA"
                // Check to see if the DLL name of the Domain is specified as a
                // TargetExecutable.  If not, create it.
                SET CURSOR FIRST vTaskLPLR.TargetExecutable
                           WHERE vTaskLPLR.TargetExecutable.Name = szDLL_Name
                IF RESULT < zCURSOR_SET
                   CREATE ENTITY vTaskLPLR.TargetExecutable LAST
                   vTaskLPLR.TargetExecutable.Name = szDLL_Name
                END

                CREATE ENTITY vTaskLPLR.Meta
                vTaskLPLR.Meta.Name = vDomainMeta.DomainGroup.Name
                vTaskLPLR.Meta.ZKey = vDomainMeta.DomainGroup.ZKey
                SetAttributeFromInteger( vTaskLPLR, "Meta", "MetaType", zREFER_DOMAINGRP_META )
             END
          END
          DropObjectInstance( vDomainMeta )
       END
   END

   DropView( vMetaList )

   OrderEntityForView( vTaskLPLR, "TargetExecutable", "Name A" )
   MB_SetMessage( vSubtask, 0, "Done Building List" )

END


LOCAL OPERATION
MoveEntity( VIEW vView,
            STRING ( 32 ) szEntityName,
            SHORT nMovement )

   VIEW  vTemp
   SHORT nRC

   // If the cursor is not set for the entity name,
   // then don't do anything.
   IF CheckExistenceOfEntity( vView, szEntityName ) != zCURSOR_SET
      RETURN  0
   END

   CreateViewFromViewForTask( vTemp, vView, vView )
   IF nMovement = 0
      // Move entity up.
      nRC = SetCursorPrevEntity( vView, szEntityName, 0 )
      IF nRC = zCURSOR_UNCHANGED
         RETURN 0
      END

      CreateEntity( vView, szEntityName, zPOS_BEFORE )
      SetMatchingAttributesByName( vView, szEntityName,
                                   vTemp, szEntityName, zSET_ALL )

      DeleteEntity( vTemp, szEntityName, zREPOS_NONE )
      DropView( vTemp )
      SetSelectStateOfEntity( vView, szEntityName, 1 )
   ELSE
      // Move entity down.
      nRC = SetCursorNextEntity( vView, szEntityName, 0 )
      IF nRC = zCURSOR_UNCHANGED
         RETURN 0
      END

      CreateEntity( vView, szEntityName, zPOS_AFTER )
      SetMatchingAttributesByName( vView, szEntityName,
                                   vTemp, szEntityName, zSET_ALL )

      DeleteEntity( vTemp, szEntityName, zREPOS_NONE )
      DropView( vTemp )
      SetSelectStateOfEntity( vView, szEntityName, 1 )
   END

   RETURN 0
END



DIALOG OPERATION
CopyCompilerSpec( VIEW vSubtask )

   STRING ( 32 )  szName
   STRING ( 10 )  szNumber
   INTEGER        nNumber

   VIEW vTaskLPLR REGISTERED AS TaskLPLR
   VIEW vTemp     BASED ON LOD  TZCMLPLO
   VIEW vTempName BASED ON LOD  TZCMLPLO

   CreateViewFromViewForTask( vTemp, vTaskLPLR, vSubtask )
   CreateViewFromViewForTask( vTempName, vTaskLPLR, vSubtask )

   CREATE ENTITY vTaskLPLR.Compiler LAST
   SetMatchingAttributesByName( vTaskLPLR, "Compiler",
                                vTemp, "Compiler", zSET_ALL )
   // set unique Name
   nNumber = 0
   szName  = "New"
   SET CURSOR FIRST vTempName.Compiler
              WHERE vTempName.Compiler.Name = szName

   LOOP WHILE RESULT >= zCURSOR_SET
        nNumber = nNumber + 1
        zltoa( nNumber, szNumber )
        szName = "New" + szNumber
        SET CURSOR FIRST vTempName.Compiler
                   WHERE vTempName.Compiler.Name = szName
   END
   DropView( vTempName )

   vTaskLPLR.Compiler.Name = szName

   FOR EACH vTemp.Include
      CREATE ENTITY vTaskLPLR.Include
      SetMatchingAttributesByName( vTaskLPLR, "Include",
                                   vTemp, "Include", zSET_ALL )
   END

   FOR EACH vTemp.Lib
      CREATE ENTITY vTaskLPLR.Lib
      SetMatchingAttributesByName( vTaskLPLR, "Lib",
                                   vTemp, "Lib", zSET_ALL )
   END

   FOR EACH vTemp.ExternalTarget
      CREATE ENTITY vTaskLPLR.ExternalTarget
      SetMatchingAttributesByName( vTaskLPLR, "ExternalTarget",
                                   vTemp, "ExternalTarget", zSET_ALL )

     FOR EACH vTemp.ExternalObjFile
        CREATE ENTITY vTaskLPLR.ExternalObjFile
        SetMatchingAttributesByName( vTaskLPLR, "ExternalObjFile",
                                     vTemp, "ExternalObjFile", zSET_ALL )
     END

     FOR EACH vTemp.ExternalLibFile
        CREATE ENTITY vTaskLPLR.ExternalLibFile
        SetMatchingAttributesByName( vTaskLPLR, "ExternalLibFile",
                                     vTemp, "ExternalLibFile", zSET_ALL )
     END
   END

   DropView( vTemp )

END

DIALOG OPERATION
BuildCompilerEntity( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   IF vTaskLPLR.Compiler DOES NOT EXIST
      CREATE ENTITY vTaskLPLR.Compiler
      vTaskLPLR.Compiler.Name = "AutoGen"
   END

END

DIALOG OPERATION
ExternalTargetPrebuild( VIEW vSubtask )

   // create the external target list
   ExternalTargetCreateList( vSubtask )

   ExternalTargetRefresh( vSubtask )
END

DIALOG OPERATION
GetCurrentPath( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR
   STRING ( 1000 ) szPath

   SysGetEnvVar( szPath, "PATH", 1000 )
   vTaskLPLR.Compiler.Path = szPath

   RefreshCtrl( vSubtask, "edPath" )

END

DIALOG OPERATION
GetCurrentPathPostBuild( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

    IF vTaskLPLR.Compiler.Path = ""
        GetCurrentPath( vSubtask )
    END

END



DIALOG OPERATION
ExternalTargetRebuildTargetList( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   // Rebuild Executable Target list
   RebuildTargetList( vSubtask )

   // Create External Target list from Executable Target list
   vTaskLPLR.Compiler.CreateExternalList = 0
   ExternalTargetCreateList( vSubtask )

   ExternalTargetRefresh( vSubtask )
END


LOCAL OPERATION
ExternalTargetCreateList( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   IF vTaskLPLR.Compiler.CreateExternalList = 1
      OrderEntityForView( vTaskLPLR, "ExternalTarget", "Name" )
      SetSelectStateOfEntity( vTaskLPLR, "ExternalTarget", TRUE )
      RETURN
   END

   // The external target list is a list of all execution targets
   // plus the entry "<ALL>", which means that these externals
   // belong to all execution targets.
   // The LPLR contains normally only these external targets, for
   // which are external libs or objs defined. The others are only
   // temporal entries for the external target dialog.

   // Delete old Targets, which no more exist
   FOR EACH vTaskLPLR.ExternalTarget

       // Check, if ExternalTarget still exists as TargetExecutable
       SET CURSOR FIRST vTaskLPLR.TargetExecutable
                  WHERE vTaskLPLR.ExternalTarget.Name = vTaskLPLR.TargetExecutable.Name
       // if not, delete it from ExternalTarget, too
       IF RESULT != zCURSOR_SET AND vTaskLPLR.ExternalTarget.Name != "<ALL>"
          DELETE ENTITY vTaskLPLR.ExternalTarget NONE
       END
   END

   // Create the target "<ALL>"
   // This is for externals which belong to all targets
   SET CURSOR FIRST vTaskLPLR.ExternalTarget
              WHERE vTaskLPLR.ExternalTarget.Name = "<ALL>"
   IF RESULT != zCURSOR_SET
      CREATE ENTITY vTaskLPLR.ExternalTarget
      vTaskLPLR.ExternalTarget.Name = "<ALL>"
   END

   // Copy the target lists after the "<ALL>" target
   FOR EACH vTaskLPLR.TargetExecutable

       // Copy only, if not existing
       SET CURSOR FIRST vTaskLPLR.ExternalTarget
                  WHERE vTaskLPLR.ExternalTarget.Name = vTaskLPLR.TargetExecutable.Name
       IF RESULT != zCURSOR_SET
          CREATE ENTITY vTaskLPLR.ExternalTarget
          vTaskLPLR.ExternalTarget.Name = vTaskLPLR.TargetExecutable.Name
       ELSE
          IF vTaskLPLR.ExternalObjFile EXISTS OR vTaskLPLR.ExternalLibFile EXISTS
             vTaskLPLR.ExternalTarget.ExternalExists = "Y"
          END
       END
   END

   // Sort the list
   SetAllSelectStatesForEntity( vTaskLPLR, "ExternalTarget", FALSE, "Compiler" )
   OrderEntityForView( vTaskLPLR, "ExternalTarget", "Name" )
   SET CURSOR FIRST vTaskLPLR.ExternalTarget
   SetSelectStateOfEntity( vTaskLPLR, "ExternalTarget", TRUE )
   vTaskLPLR.Compiler.CreateExternalList = 1
END



/*************************************************************************************************
**
**    OPERATION: ExternalTargetRefresh
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetRefresh( VIEW vSubtask )

   RefreshWindowExceptForCtrl( vSubtask, "tgTargetList" )
END

/*************************************************************************************************
**
**    OPERATION: ExternalTargetObjFile_AddNew
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetObjFile_AddNew( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   CREATE ENTITY vTaskLPLR.ExternalObjFile LAST

   vTaskLPLR.ExternalTarget.ExternalExists = "Y"

   RefreshWindowExceptForCtrl( vSubtask, "tgObjectFiles" )

END

/*************************************************************************************************
**
**    OPERATION: ExternalTargetLibFile_AddNew
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetLibFile_AddNew( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   CREATE ENTITY vTaskLPLR.ExternalLibFile LAST

   vTaskLPLR.ExternalTarget.ExternalExists = "Y"

   RefreshWindowExceptForCtrl( vSubtask, "tgLibFiles" )

END

/*************************************************************************************************
**
**    OPERATION: ExternalTargetObjFile_New
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetObjFile_New( VIEW vSubtask )

   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   IF vTaskLPLR.ExternalObjFile EXISTS
      SetAllSelectStatesForEntity( vTaskLPLR, "ExternalObjFile", FALSE, "" )
   END

   CREATE ENTITY vTaskLPLR.ExternalObjFile LAST

   vTaskLPLR.ExternalTarget.ExternalExists = "Y"

   RefreshWindowExceptForCtrl( vSubtask, "tgLibFiles" )
   TG_SetActiveCell( vSubtask, "tgObjectFiles", -1, 0 )

END


/*************************************************************************************************
**
**    OPERATION: ExternalTargetLibFile_New
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetLibFile_New( VIEW vSubtask )


   VIEW vTaskLPLR REGISTERED AS TaskLPLR

   IF vTaskLPLR.ExternalLibFile EXISTS
      SetAllSelectStatesForEntity( vTaskLPLR, "ExternalLibFile", FALSE, "" )
   END

   CREATE ENTITY vTaskLPLR.ExternalLibFile LAST

   vTaskLPLR.ExternalTarget.ExternalExists = "Y"

   RefreshWindowExceptForCtrl( vSubtask, "tgObjectFiles" )
   TG_SetActiveCell( vSubtask, "tgLibFiles", -1, 0 )

END

/*************************************************************************************************
**
**    OPERATION: ExternalTargetObjFile_Delete
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetObjFile_Delete( VIEW vSubtask )

   VIEW  vTaskLPLR REGISTERED AS TaskLPLR
   SHORT nRC

   IF vTaskLPLR.ExternalObjFile EXISTS

      SetSelectStateOfEntity( vTaskLPLR, "ExternalObjFile", TRUE )
      RefreshCtrl( vSubtask, "tgObjectFiles" )

      nRC = MessagePrompt( vSubtask, "ED1004", "Zeidon Compiler",
                           "OK to delete selected External Object Files?",
                           0, zBUTTONS_YESNO, zRESPONSE_NO, 0 )

      IF nRC = zRESPONSE_YES

         nRC = SetCursorFirstSelectedEntity( vTaskLPLR, "ExternalObjFile", "" )

         LOOP WHILE nRC >= zCURSOR_SET

              DeleteEntity( vTaskLPLR, "ExternalObjFile", zREPOS_NONE )

              nRC = SetCursorNextSelectedEntity( vTaskLPLR, "ExternalObjFile", "" )
         END

      END

      TG_SetActiveCell( vSubtask, "tgObjectFiles", -1, 0 )

   END

   IF vTaskLPLR.ExternalObjFile DOES not EXIST AND vTaskLPLR.ExternalLibFile DOES not EXIST
      vTaskLPLR.ExternalTarget.ExternalExists = "N"
   END

END



/*************************************************************************************************
**
**    OPERATION: ExternalTargetLibFile_Delete
**
**
*************************************************************************************************/
DIALOG OPERATION
ExternalTargetLibFile_Delete( VIEW vSubtask )

   VIEW  vTaskLPLR REGISTERED AS TaskLPLR
   SHORT nRC

   IF vTaskLPLR.ExternalLibFile EXISTS

      SetSelectStateOfEntity( vTaskLPLR, "ExternalLibFile", TRUE )
      RefreshCtrl( vSubtask, "tgLibFiles" )

      nRC = MessagePrompt( vSubtask, "ED1004", "Zeidon Compiler",
                           "OK to delete selected External Lib Files?",
                           0, zBUTTONS_YESNO, zRESPONSE_NO, 0 )

      IF nRC = zRESPONSE_YES

         nRC = SetCursorFirstSelectedEntity( vTaskLPLR, "ExternalLibFile", "" )

         LOOP WHILE nRC >= zCURSOR_SET

              DeleteEntity( vTaskLPLR, "ExternalLibFile", zREPOS_NONE )

              nRC = SetCursorNextSelectedEntity( vTaskLPLR, "ExternalLibFile", "" )
         END

      END

      TG_SetActiveCell( vSubtask, "tgLibFiles", -1, 0 )

   END

   IF vTaskLPLR.ExternalObjFile DOES not EXIST AND vTaskLPLR.ExternalLibFile DOES not EXIST
      vTaskLPLR.ExternalTarget.ExternalExists = "N"
   END

END

/*************************************************************************************************
**
**    OPERATION: RetrieveCurrentCompileSpec
**
**    Set 'Compile' cursor in ProfileXFER to point to compile spec specified in
**    vProfileXFER.TZ.CurrentCompileSpec
**    c
**
*************************************************************************************************/
DIALOG OPERATION
RetrieveCurrentCompileSpec( VIEW vSubtask )

   STRING ( 50 )  szControlText
   STRING ( 32 )  szName

   VIEW vTaskLPLR     REGISTERED AS TaskLPLR
   VIEW vCompilerSpec BASED ON LOD  TZCMLPLO

   CreateViewFromViewForTask( vCompilerSpec, vTaskLPLR, vSubtask )
   NAME VIEW vCompilerSpec "CompilerSpec"

   SET CURSOR FIRST vTaskLPLR.Compiler
       WHERE vTaskLPLR.Compiler.Name = vTaskLPLR.LPLR.CurrentCompilerSpec

   szName = vTaskLPLR.LPLR.Name
   szControlText = " LPLR: " + szName
   SetCtrlText( vSubtask, "txtLPLR", szControlText )

END

/*************************************************************************************************
**
**    OPERATION: SystemClose_Init
**
**
*************************************************************************************************/
DIALOG OPERATION
SystemClose_Init( VIEW vSubtask )

  TerminateLPLR( vSubtask )

END

/*************************************************************************************************
**
**    OPERATION: Prebuild_Init
**
**    prebuild code for Init window
**
*************************************************************************************************/
DIALOG OPERATION
Prebuild_Init( VIEW vSubtask )

   InitializeLPLR( vSubtask, "" )

END
